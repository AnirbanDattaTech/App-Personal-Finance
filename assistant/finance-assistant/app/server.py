# FILE: assistant/finance-assistant/app/server.py
# PURPOSE: Defines the FastAPI server to expose the LangGraph agent via LangServe.
# MODIFICATIONS: Removed sys.path manipulation. Using direct agent imports.

import os
# import sys # No longer needed for path manipulation here
# from pathlib import Path # No longer needed for path manipulation here
import logging
from typing import Optional, Any

# Third-party imports
import uvicorn
from fastapi import FastAPI
from pydantic import BaseModel, Field
from langserve import add_routes

# Configure logging (can be done early)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(name)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__) # Logger for this server file


# --- Try importing agent components directly ---
# Assuming 'agent' package is available via editable install or PYTHONPATH
try:
    from agent.graph import graph as finance_assistant_graph
    from agent.state import AgentState
    # shared_clients is implicitly imported by agent.graph, no need to import here
    # unless directly used by server.py (which it isn't currently)
    # from agent import shared_clients # Optional: Import if needed directly

    logger.info("Successfully imported graph and AgentState from 'agent' package.")
    # We can't easily check shared_clients.LLM here without importing it,
    # but shared_clients logs initialization status itself.

except ImportError as e:
    logger.error(f"CRITICAL ERROR: Failed to import agent components from 'agent' package. "
                 f"Ensure the package is installed correctly (e.g., 'pip install -e .' from assistant/finance-assistant) "
                 f"and the environment is activated. Error: {e}", exc_info=True)
    # logger.error(f"Current sys.path: {sys.path}") # sys might not be imported
    raise ImportError("Could not import agent components. Server cannot start.") from e
except Exception as e:
    logger.error(f"An unexpected error occurred during agent component import: {e}", exc_info=True)
    raise

# --- Define API Input/Output Schemas (Keep as before) ---
class AssistantInput(BaseModel):
    """Input schema for the Finance Assistant Agent."""
    original_query: str = Field(..., description="The user's natural language query.")
    model_config = { "json_schema_extra": { "examples": [{"original_query": "What was my total grocery spend last month?"}] } }

class AssistantOutput(BaseModel):
    """Output schema for the Finance Assistant Agent."""
    final_response: Optional[str] = Field(None, description="The final text response generated for the user.")
    chart_json: Optional[str] = Field(None, description="Plotly chart JSON representation, if one was generated.")
    sql_query: Optional[str] = Field(None, description="The SQL query generated by the agent, if applicable.")
    error: Optional[str] = Field(None, description="Any error message captured during the agent's execution.")
    model_config = { "json_schema_extra": { "examples": [{"final_response": "Your total grocery spend last month was INR 5,432.10.", "chart_json": "{ ...plotly json... }", "sql_query": "SELECT category, SUM(amount) FROM expenses WHERE strftime('%Y-%m', date) = '2023-03' AND category = 'Grocery' GROUP BY category;", "error": None}] } }

# --- Initialize FastAPI App (Keep as before) ---
logger.info("Initializing FastAPI application...")
app = FastAPI(
    title="Personal Finance Assistant Agent API",
    version="0.1.4", # Bump version for import fix
    description="API endpoint for interacting with the LangGraph-based Personal Finance Assistant.",
)

# --- Basic Health Check Endpoint (Keep as before) ---
@app.get("/", tags=["Health Check"])
async def read_root():
    """Simple health check endpoint."""
    logger.debug("Root endpoint '/' accessed.")
    return {"status": "ok", "message": "Finance Assistant API is running."}

# --- Add LangServe Routes (Keep as before) ---
logger.info(f"Adding LangServe routes for agent graph '{finance_assistant_graph.__class__.__name__}'...")
add_routes(
    app=app,
    runnable=finance_assistant_graph,
    path="/assistant",
    input_type=AssistantInput,
    output_type=AssistantOutput,
    config_keys=["configurable"]
)
logger.info(f"LangServe routes added successfully at path '/assistant'. Playground at /assistant/playground/")


# --- Run with Uvicorn (Keep as before) ---
if __name__ == "__main__":
    port = int(os.getenv("PORT", 8000))
    host = os.getenv("HOST", "0.0.0.0")
    logger.info(f"Starting Uvicorn server directly on {host}:{port}...")
    logger.warning("Running directly with 'python app/server.py'. Use 'uvicorn' command or 'langgraph dev' for development features like hot-reloading.")
    uvicorn.run(app, host=host, port=port)