{
  "project_context_summary": {
    "project_name": "Personal Expense Tracker (Streamlit)",
    "goal": "Develop a personal finance tracker for 2 users (Anirban, Puspita) with expense logging, reporting, visualizations, and an AI assistant for data querying.",
    "current_phase": "Starting Phase 2 Development",
    "phase_1_status": {
      "git_tag": "v1.0.0",
      "summary": "Core application functional.",
      "key_features_completed": [
        "Multi-tab UI (Add Expenses, Reports, Visualizations)",
        "SQLite DB (`expenses.db`) backend via `db_utils.py`",
        "Metadata driven config (`metadata/expense_metadata.json`)",
        "Add Expense: Form entry, dynamic sub-category, auto-user, default date, toast feedback",
        "Reports: Filtering (multi-select, 'All'), summary stats, data table",
        "Edit/Delete: Implemented via selectbox and forms on Reports tab",
        "Visualizations: 2x2 grid (Pie, Category Bar, Line Trend, Sub-cat Treemap) with independent, collapsed filters",
        "Data Management: DB Backup download button",
        "Export: CSV export for filtered reports",
        "Styling: Basic light theme applied via `styles.css`",
        "Code Quality: Readability improvements, metadata caching"
      ]
    },
    "phase_2_plan": {
      "goal": "Implement AI Assistant Chatbot in new 'Assistant' tab",
      "scope": "EDA, basic stats, data retrieval on expenses. Excludes: complex stats, prediction, forecasting, financial advice.",
      "architecture": "Multi-Agent via LangGraph",
      "agents": [
        {
          "name": "Supervisor Agent",
          "role": "User interaction, intent classification (scope check), task routing, final response synthesis (text + triggering viz generation)."
        },
        {
          "name": "SQL Analyst Agent",
          "role": "Use LangChain SQL Toolkit/Agent to query `expenses.db` based on Supervisor's task, using detailed schema. Returns structured data/error."
        },
        {
          "name": "Visualization Agent",
          "role": "Receives query context + data result. Selects appropriate chart type from predefined list (Bar V/H, Scatter, Histo, Line, Bubble, Pie). Outputs structured chart configuration (JSON/dict)."
        }
      ],
      "key_features": [
        "Session-based conversation memory (`st.session_state`)",
        "Multi-turn interaction handling",
        "Generation of one relevant visualization per appropriate query",
        "Graceful handling of out-of-scope/irrelevant questions",
        "Autonomous agent collaboration pattern (ref LangGraph docs)",
        "LangSmith integration for tracing"
      ],
      "ui_assistant_tab": {
        "section1": "Chat Interface (History display, st.chat_input)",
        "section2": "Visualization Display Area (st.plotly_chart)"
      },
      "llm_api": "External (OpenAI GPT-4o or Gemini 1.5 Pro planned)"
    },
    "tech_stack_primary": [
      "Python",
      "Streamlit",
      "Pandas",
      "Plotly",
      "SQLite3",
      "LangGraph",
      "LangChain (primarily for SQL tools)",
      "OpenAI / google-generativeai",
      "LangSmith"
    ],
    "data_metadata": {
      "database": "expenses.db (SQLite, single table 'expenses')",
      "key_columns": ["id (TEXT, PK)", "date (TEXT, YYYY-MM-DD)", "account (TEXT)", "category (TEXT)", "sub_category (TEXT)", "type (TEXT)", "user (TEXT)", "amount (REAL)"],
      "config_metadata": "metadata/expense_metadata.json (Accounts, Cat->SubCat map, User->Account map)",
      "schema_metadata": "metadata/database_schema.json (PLANNED: Detailed schema description for SQL Agent)"
    },
    "project_structure": {
      "entry_point": "main.py",
      "tabs_module": "tabs/ (add_expense.py, reports.py, visuals.py, assistant.py [PLANNED])",
      "db_utils": "db_utils.py",
      "styling": ["style_utils.py", "styles.css"],
      "metadata_dir": "metadata/",
      "agent_logic": "agent_logic.py [PLANNED]",
      "dependencies": "requirements.txt",
      "git_ignore": ".gitignore"
    },
    "git_info": {
      "current_stable_tag": "v1.0.0",
      "development_branch": "feature/chatbot-multiagent [PLANNED]"
    },
    "deployment_plan": {
      "target_platforms": ["Streamlit Community Cloud", "Hugging Face Spaces"],
      "api_keys_secrets": "Use st.secrets on deployment platform",
      "database": "Included SQLite file likely sufficient for 2 users"
    },
    "immediate_next_steps": [
      "Generate detailed `metadata/database_schema.json` structure.",
      "Set up `agent_logic.py` file structure and basic LangGraph setup.",
      "Implement API key loading and LangSmith environment variable setup.",
      "Begin implementing SQL Analyst Agent node/tool."
    ]
  }
}