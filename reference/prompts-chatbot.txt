We will now start the development for a chatbot that can query the data and answer data related questions. For now, we will limit the scope to EDA and data analytics, and basic statistics related questions, to cover all areas a person might be interested in insight based on your understanding of the data, metadata and the project structure (what we are trying to do here). So we will keep all questions that require advanced statistical knowledge like probability and distributions, predictive modelling, and ML related questions (classification, regression, forecasting etc) out of scope.

REQUIREMENT-
1. DATA STRUCTURE AND HISTORY REQUIREMENT-
	1.1. The chatbot needs to remember the conversation history for a session for subsequent follow up questions, but no long term history needs to be saved. So each time the app is opened, a new conversation can be started where the context can be managed for the duraton of the session only.
	1.2. Currently the project has only 1 data file, the sqlite db table. Consider, based on the requirment, if any additional database needs to be created where additional chatbot related data to be stored. Modularize the codebase, creating a new folder for storing all the data files if needed, accordingly. Remember, modularity and simplicity are key requirments. The existing code may need to change to update the location references.
	1.3. I think a metada file with detailed description of all tables and all columns, including their data type, detailed description, unique values(where applicable), special constraints (like rent - once a month only, investment - once a month only) and other relevant information are required. If you agree, generate a metadata_detailed.json file with this info. Modularize the codebase, creating a new folder for storing all the metadata json files if needed, accordingly. Remember, modularity and simplicity are key requirments. The existing code may need to change to update the location references.
	
2. DESIGN REQUIREMENT-
	2.1. The chatbot needs to be in a fourth tab called 'Assistant' after visualization.
	2.2. In the assistant tab, there has to be 2 parts:
		2.2.1. CHAT WINDOW / SECTION - This is where my wife and i will interact with the chat bot through a chat window. there needs to be a simple pre-generated system messge: 'Greetings! What can I help you with?' Followed by a text box where i or my wife (not at the same time) can ask a simple question like 'what is my total spend for april?' and after the chatbot answers, ask 'ok, out of this how much did i spend on resturants?'. The conversation needs to be multiturn so state and session management is important for a single session. For toy example: AI: 'Greetings! What can I help you with?' HUMAN: 'Hey! What was my total spend on the month of march?' AI: 'Sure! Your total spend was inr 25,000.' HUMAN: 'Great! How much of that i spent on household?' AI: 'Out of total spend of inr 25000, you have spent inr 5000 on household.'
		
		2.2.2. VISUALIZATION WINDOW / SECTION - this is a section where, based on the question asked, the ai bot needs to show a relevant visualization. So for example in the previous example sequence: {AI: 'Greetings! What can I help you with?' HUMAN: 'Hey! What was my total spend on the month of march?' AI: 'Sure! Your total spend was inr 25,000.' HUMAN: 'Great! How much of that i spent on household?' AI: 'Out of total spend of inr 25000, you have spent inr 5000 on household.'} - the visualization can be a bar chart showing the spend across each category (because the human asked for the spend for a specific category) for the requested month (march in this example). 
	
3. DEVELOPMENT REQUIREMENT - 
	3.1. We will build a multi agent architecture using openai, langchain and langgraph and langsmith. I will upload the requirement file, pls ensure we have all the necessary dependencies to get started.
	3.2. CRITICAL: The key idea here is to explore autonomous agents and how they collaborate intelligently with a superagent to generate the answer and relevant visualization. If it is a deterministic workflow going from one node to next using prebuilt set of rules, there is no point in building complex agent frameworks. Explore how autonomous agents can be used to fulfill the requirement. Details on the agents follow:
	3.2. I think in the agent architecture, We need the following agents:
		3.2.1 SUPER AGENT - This is the super agent that interacts with the user and coordinates with the sub-agents.
			REQUIREMENTS - 
				3.2.1.1 Greet the user and get the user question
				3.2.1.2 Classify the question regarding whether the question is in scope, based on: {limit the scope to EDA and data analytics, and basic statistics related questions, to cover all areas a person might be interested in insight based on your understanding of the data, metadata and the project structure (what we are trying to do here). So we will keep all questions that require advanced statistical knowledge like probability and distributions, predictive modelling, and ML related questions (classification, regression, forecasting etc) out of scope.} A detailed prompt(s) with the best prompting techniques (few shot, CoT) needs to be developed for this AGENT NODES. Do so.
				3.2.1.3 Coordinate with the 'DATA ANALYST' agent to get the response to the data related question
				3.2.1.4 Coordinate with the 'DATA VISUALIZATION' agent to get the relevant graph /chart to the data related question
				3.2.1.5 Show the answer and relevant chart in the frontend, handle followup question
				3.2.1.6 Gently guide the user to ask a relevant question if the user asks an questions irrelevant to the solution such as 'What is the capital of Vietnam?' (handle non-relevant question, terminate after 2 tries)
				3.2.1.6 ADD ANY OTHER RELEVANT STEP HERE BASED ON YOUR UNDERSTANDING AND RECOMMENDATION
				
		3.2.2 DATA ANALYST SUB AGENT - This sub-agent is in charge of getting the answer to the data-related user question. A detailed prompt(s) with the best prompting techniques (few shot, CoT) needs to be developed for this AGENT NODES. Do so.
			REQUIREMENTS - 
				3.2.2.1 Get the question from the SUPER AGENT
				3.2.2.2 Extract entities from the question (Date,Account,Category,Sub-category,Type,User,Amount)
				3.2.2.3 Generate an sql query using langchain / sql tool etc - FLESH OUT THE DETAILS OF THIS STEP as to How exactly this will be handled
				3.2.2.4 Execute the sql on the expenses.db to get the required results
				3.2.1.5 ADD ANY OTHER RELEVANT STEP HERE BASED ON YOUR UNDERSTANDING AND RECOMMENDATION
				3.2.2.6 update the agentstate and Pass the result to the SUPER AGENT
				
		3.2.3. DATA VISUALIZATION SUB AGENT-  This sub-agent is responsible for creating a visualization in the 'Chart' section of the 'Assistant' tab in the streamlit UI based on the answer to the user queries generated by the DATA ANALYST SUB AGENT.A detailed prompt(s) with the best prompting techniques (few shot, CoT) needs to be developed for this AGENT NODES. Do so.
			REQUIREMENTS -
				3.2.3.1 Get the user query and the result of the sql query generated by the DATA ANALYST SUB AGENT.
				3.2.3.2 Select one of the predefined set of visualizations based on the natural language user query and the sql generated response. The categories are: {Vertical bar chart, Horizontal bar chart, Scatter plot, Histogram, Line chart, Bubble chart, Pie chart}. One of these chart types MUST be selected. No chart types other than these are to be selected.
				3.2.3.3 Get the x axis values, y axis values and other required values from the expenses.db and the sql generated response (basically get all the data required to generate the chart)
				3.2.3.4 Generate the chart with all the bells and whistles (heading, axis names, legend ticks etc) in the 'Chart' section of the 'Assistant' tab in the streamlit UI
				3.2.3.5 ADD ANY OTHER RELEVANT STEP HERE BASED ON YOUR UNDERSTANDING AND RECOMMENDATION
				3.2.2.6 update the agentstate and Pass the result to the SUPER AGENT
		
		3.2.4. The above multi-agent architecture is a recommendation. CRITICAL: use your judgement to come up with the multi-agent architecture based on this recommendations. *CRITICAL IMPORTANT*:
			3.2.4.1 Adhere to the business requirement: multi-turn conversation flow, chart generation for each question, handling non-relevant or out of scope queries
			3.2.4.2 Implement autonomous agents using above as a references
			3.2.4.3 Refer to these specific online documents for multi-agent flow in Langgraph:
				- https://langchain-ai.github.io/langgraph/how-tos/multi-agent-multi-turn-convo/
				- https://github.com/langchain-ai/langgraph/tree/main/docs/docs/tutorials/multi_agent
	
	3.3. Only 1 user at a time, no need to worry about concurrent users.
	3.4. focus on modularity and simplicity of the entire codebase based on this new requirement.
	3.5 I want to learn the proper git development workflow with branches and everything, so pls include that in your guidelines
	3.6 I want to use langsmith for tracing and looking at agent workflows, so include that accordingly
	3.5. carefully consider what impact it will have on the existing data/ code and modify accordingly. Existing functioalities and UI MUST remain as is.
	3.6 These are just *INDICATIVE* steps, understand the requirement and ask as many clarification questions as needed. I will also share with you the updated code content so you are upto speed.
	3.7 please carefully consider the requirment, focusing on error-free running, simlicity, robustness and scalability, and suggest changes to approach, additions, enhancements and recommedations.
	3.8 Finally, suggest a detailed step by step approach to implement the agentic ai chatbot according to requirement. No code necessary, just discuss the approach with me before development.