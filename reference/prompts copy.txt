1. INITIAL PROMPT

I want to to build a personal finance and expense tracker app for me and my wife. The idea is to track monthly spending by entering expenses manually. I have created a metada with an explanation of the data and attributes that will be considered. I also have a sample csv file that has the data in the structure and format that i want. I will upload both for your reference. The data model for the app is as follows: the app should have a table (either in sqlite3 or in csv) with the following columns: 

'Date': Date of transaction, 
'Account': One of the 4 accounts for me and my wife mentioned in the metadata, 
'Category': from the categories dictionary mentioned in the metadata, 
'Sub-category': from the categories dictionary mentioned in the metadata, 
'Type': Free text, we need to be able to enter it in the steamlit frontend, 
'User': One of the 2 values: 'Anirban', "Puspita" 
'Amount': amount of transaction.

Write the code and help me build a streamlit app that can run on my local machine.
Requirement:
	A. Design Requirement:
		1. The app should have 3 main pages / tabs.
			1a. page / tab 1: 'Add Expenses': This tab will have 2 main parts:
				1a1. Add Expenses: Here we will have an input form with the following input fields: 1. Date - filled manually 2. Account - one of the predefined values from the dropdown according to the metadata 3. Category - one of the predefined values from the dropdown according to the metadata, 4. Sub-category - one of the predefined values from the dropdown according to the metadata 5. Type - free text to be entered 6. user - one of the predefined values from the dropdown according to the metadata, 7. Amount - expense amount, to be filled in manually.
				
				1a2. Show last ten expenses from either user (showing 5 rows at a time, scrollable table). It needs to be updated when a new expense is added from the section 1a1. Add Expenses above.
				
			1b. page / tab 2: 'Reports' - This tab will have 2 main parts:
				1b1. Here the entire history report should be visible (up to 10 rows or so at a time, scrollable). It should have the following filters: 1. *Month* - to be extracted from the main data table shown as a checkbox with multi selection with 'all' option for all months in history, 2. *Account* - one of the predefined values according to the metadata, shown as a checkbox with multi selection with 'All' option for all values in history 3. *Category* - one of the predefined values according to the metadata, shown as a checkbox with multi selection with 'All' option for all values in history, 4. *Sub-category*-  one of the predefined values according to the metadata, shown as a checkbox with multi selection with 'All' option for all values in history. 5. *User*: one of the predefined values according to the metadata, shown as a checkbox with multi selection with 'All' option for all values in history. 
				
				The selection boxes / menu for the 5 attributes: Month, Account, Category, Subcategory and User should come first, folling a field showing the *total expenses* for the selected values in the 5 attributes (Month, Account, Category, Subcategory and User), followed by a table (up to 10 rows or so at a time, scrollable). all filters should have 'All' value to select all available values in the filters.

			1c. Page / tab 3: 'Visualizations': this tab will have 2 main parts - 
				1c1. a pie chart for the total expenses based on 4 filters - 
					1.*Month* - to be extracted from the main data table shown as a checkbox,we need to be able to select only one month value or the 'All' value to select all months (only 1 selection from the checkbox - no multi select for this chart) 
					2.*Account* - one of the predefined values according to the metadata, shown as a checkbox with multi selection with 'All' option for all values in history 
					3.*Category* - one of the predefined values according to the metadata, shown as a checkbox with multi selection with 'All' option for all values in history.
					4.*User* - one of the predefined values according to the metadata, shown as a checkbox with multi selection with 'All' option for all values in history
					In this section, a pie chart of the total expenses across categories will be shown based on the selected values for the filters (Month, Account, Category, User)
					
				1c2. A line char showing the trend of the total expenses based on the filters selected: the x axis will have dates (day level) and y axis will have total expense (the sum of the 'amount' column in the data). x axis start data will be the first date in the data and last date will be the latest or most recent date in the data. The chart will be displayed based on the following filters:
					2.*Account* - one of the predefined values according to the metadata, shown as a checkbox with multi selection with 'All' option for all values in history 
					3.*Category* - one of the predefined values according to the metadata, shown as a checkbox with multi selection with 'All' option for all values in history.
					4.*User* - one of the predefined values according to the metadata, shown as a checkbox with multi selection with 'All' option for all values in history
					In this section, a lne chart of the total expenses across time (dates) will be shown based on the selected values for the filters (Month, Account, Category, User)
					
		2. All charts, reports and total expense values have to be refreshed when a new expense is added in 1a. page / tab 1: 'Add Expenses', or an expense is edited / deleted in 1b. page / tab 2: Reports.
		3. Make the pages nice looking and intuitive, with light yet attractive colours.
		4. Make the charts really nice with headers, axis names, legends etc. For the line chart make it a dotted line like '-o-o-o-'.
		5. Ensure the spacing and margins are nice so the graphs and charts are clearly visible.
		6. Is it possible to create a responsive UI in streamlit? if so, IMPORTANT: Prioritize responsive design. For the 1c. Page / tab 3: 'Visualizations' tab, show the graphs (pie chart and line chart mentioned in 1c.) side by side when in a wide screen, and column wise (Pie chart over the line chart) in a narrower (mobile) screen
		7. It is critical to ensure the data and fonts in the screen are legible, but they are not too big as that will be unattractive. Use a web-friendly font like segue or roboto for the frontend. (Font size around 12 should be fine, we need to experiment).
		8. CRITICAL IMPORTANCE: the options for editing / deleting an expense entry is not needed in this phase. Once an expense is added, no modification / deletion is needed. We will add this feature later.
			
	B. Data requirement: 
		1. We need to keep the app as simple as possible. We will use streamlit for the development, and python libraries for data visualization. The user needs to add expenses as mentioned in A.1.a, and edit / delete a selected expense as mentioned in A.1.b. So we can use sqlite3. Right now this app only needs to run in local system. But my wife and I need to access it from our mobiles throgh an url, so this small app needs to be deployed at a later phase using a free hosting like git. So when choosing csv vs sqlite3, keep the need to update databases and deployment scalability in mind.
		
		2. For now, use the uploaded csv file as a sample data to run the app and experiment with all features like add / delete expenses, chart generation etc.
		3. There is no need to store the charts anywhere at all unless they are absolutely necessary. If needed, give me simple way to periodically delete them and all unnecessary data. IMPORTANT: avoid chart saving if at all possible. Just show the charts.
		4. No need to store any history, snapshot etc, as long as we are able to see the reports, tables and charts,we are good. IMPORTANT: Store additional data only if they are absolutely necessary, else avoid, and use the main data file for all functions.
		5. As the user needs to manually enter date which needs to be stored in the database, and from there the month has to be extracted, ensure data validation to make sure there are no data type related issues anywhere. THey are very annoying.
		6. All 'amount' values will be in INR. Show INR in the frontend where appropriate (like column headers in reports but not inside cells).
		
	C. Development requirment:
		1. I will be using python in a conda environment which should already have most of the dependencies, but doesn't hurt to check ensure there are no version conflicts.
		2. I will use vscode in windows 10 with powershell as my default terminal, so don't suggest anything that is not compatible with windows powershell. If in doubt, try to take a pythonic approach.
		3. Keep the code simple and efficient, i am not a fan of huge and sprawling codebases. 
		4. Remember Phase 1: this phase, we will need to run it in our local machine, Phase 2: future phase: we will deploy the app and create a sharable link. So design and development of the app has to be with deployment in mind.
		5. Ensure there are no key errors when fetching the data and in the code by normalizing the column names to lower case and ensure the same variables are being used across the codebase.
		6. IMPORTANT: Remember, the subcategories are mapped to categories according to the metadata definition, sharing it specifically here for reference:
		
		categories = {
    "Investment": ["SIP", "Mutual Funds", "Stocks", "FD/RD"],
    "Rent": ["House Rent"],
    "Travel": ["Day Trip", "Vacation", "Commute", "Cab", "Train", "Flight", "Hotel/Stay", "Parking Fee"],
    "Restaurant": ["Dine-in", "Takeaway", "Food Delivery", "Snacks", "Cafe", "Drinks"],
    "Insurance Premium": ["Life Insurance", "ULIP", "Health Insurance", "Vehicle Insurance"],
    "Household": [
        "Electricity Bill", "Plumbing", "Electrical Repairs", "Appliance Repair", "Cleaning",
        "Pest Control", "Bike Maintenance", "Car Maintenance", 
        "Furniture", "Kitchen Tools", "Ironing", "Maid"
    ],
    "Connectivity": ["Airtel WiFi", "Jio Recharge", "Airtel Mobile", "Netflix", "Prime Video", "Disney+ Hotstar"],
    "Waste": ["Smoke", "Alcohol"],
    "Grocery": ["BigBasket", "Amazon", "Flipkart Grocery", "Zepto", "Local Store", "Other"],
    "Beauty": ["Nykaa", "Meesho", "Purplle", "Salon", "Makeup", "Skincare", "Salon"],
    "Shopping": ["Amazon", "Flipkart", "Meesho", "Nykaa", "Purple", "Lifestyle", "Max", "Myntra"],
    "Health": ["Doctor Visit", "Medicines", "Lab Test", "Health Checkup"],
    "Utilities": ["Electricity", "Water", "Gas Cylinder", "Maintenance", "Garbage Collection"],
    "Gifts & Donations": ["Family", "Friends", "Charity", "Temple"],
    "Entertainment": ["Movies", "Concerts", "Games"],
    "Education": ["Online Courses", "Books", "Workshops"]
}
	
Initially, all filters of all tabs should have the value 'All' selected whereever applicable. On selecting a category, only a selected set of subcategories based on the above mapping are to be shown in the dropdown / checkbox filters in all tabs whereever applicable.
		7. modularize the code, don't put everything in a huge main.py file to be run in streamlit.
		8. For sqlite3 db creation from csv, give python script with detailed explanation. Do I need to create the db by running a script (say create_db.py) or it will be automatically created when launching streamlit app? running my script makes sense as it is a one time activity, guide step by step with code accordingly.
FINAL INSTRUCTIONS:
	1.Read the above requirement carefully and go through the attched metada and sample data excel file.
	2. Tell me in detail what you understand. Clearly tell me where the requirement is ambiguous and you need to make assumptions. go ahead and make assumptions to run the code.  You need to have the necessary and sufficient information needed to complete the development.
	4. Suggest changes / additions to the requirements based on the following priority in descending order: 1. Error free 2. Simple 3. Prettier 4. Scalable (still with the same data model) for deployment (at phase 2, not now)
	5. Ensure that the code runs correctly
	6. Give me the code and detailed step by step guidance to create a streamlit app in my local conda environment based on above requirement.
			


I have shared with you the detailed requirement and instructions to build a streamlit app to manage my personal finances. Give me detailed step by step instructions along with clean, efficient, error free, modular codebase to implement the streamlit app. Whereever you need to make an assumption, go ahead with your judgement. Running the code successfully in local is the highest priority.

 2. CODE STRUCTURE TREE

app-personal-finance/
    combined_files.txt
    create_db.py
    create_file_data.py
    db_utils.py
    dummy_expenses.csv
    expenses.db
    expense_metadata.json
    folder_tree.txt
    generate_tree.py
    main.py
    requirements.txt
    styles.css
    style_utils.py
    reference/
        plotly_charts.py
        prompts.txt
    tabs/
        add_expense.py
        reports.py
        visuals.py

3. CODE FOR ALL .py FILES

# Contents of E:\Code\Projects\App-PersonalFinance\app-personal-finance\db_utils.py
# db_utils.py
import sqlite3
import pandas as pd
from uuid import uuid4

DB_NAME = "expenses.db"

def get_connection():
    return sqlite3.connect(DB_NAME, check_same_thread=False)

def fetch_all_expenses():
    conn = get_connection()
    df = pd.read_sql("SELECT * FROM expenses", conn)
    conn.close()
    df['date'] = pd.to_datetime(df['date'], errors='coerce')
    return df

def insert_expense(data):
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("""
    INSERT INTO expenses (id, date, account, category, sub_category, type, user, amount)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
""", (str(uuid4()), data['date'], data['account'], data['category'], data['sub_category'],
      data['type'], data['user'], data['amount']))
    conn.commit()
    conn.close()

def fetch_last_expenses(n=10):
    conn = get_connection()
    df = pd.read_sql(f"SELECT * FROM expenses ORDER BY date DESC LIMIT {n}", conn)
    conn.close()
    df['date'] = pd.to_datetime(df['date'], errors='coerce')
    return df

# Contents of E:\Code\Projects\App-PersonalFinance\app-personal-finance\main.py
# main.py
import streamlit as st
from tabs import add_expense, reports, visuals
from style_utils import load_css 

st.set_page_config(
    layout="wide", 
    page_title="Personal Expense Tracker", 
    page_icon="💰"
)

# Load CSS styles
load_css()

# Navigation in sidebar
st.sidebar.title("Navigation")
page = st.sidebar.radio(
    "Go to", 
    ["Add Expenses", "Reports", "Visualizations"],
    label_visibility="collapsed"  # Cleaner look
)

# Render selected page
if page == "Add Expenses":
    add_expense.render()
elif page == "Reports":
    reports.render()
elif page == "Visualizations":
    visuals.render()

# Contents of E:\Code\Projects\App-PersonalFinance\app-personal-finance\style_utils.py
# style_utils.py
import streamlit as st

def load_css(file_path: str = "styles.css"):
    with open(file_path, "r") as f:
        css = f.read()
        st.markdown(f"<style>{css}</style>", unsafe_allow_html=True)


# Contents of E:\Code\Projects\App-PersonalFinance\app-personal-finance\tabs\add_expense.py
# tabs/add_expense.py
import streamlit as st
import pandas as pd
from db_utils import insert_expense, fetch_last_expenses
import json

def load_metadata():
    with open("expense_metadata.json", "r") as f:
        return json.load(f)

def render():
    metadata = load_metadata()
    st.subheader("Add New Expense")

    # --------------------
    # Step 1: Select date before form (UX improvement)
    # --------------------
    date = st.date_input("Date of Expense", help="Format: YYYY-MM-DD")

    # --------------------
    # Step 2: Select category before form to drive sub-category
    # --------------------
    category = st.selectbox("Category", list(metadata["categories"].keys()))
    available_subcategories = metadata["categories"][category]

    # --------------------
    # Step 3: Expense form
    # --------------------
    with st.form("expense_form"):
        col1, col2 = st.columns(2)

        with col1:
            account = st.selectbox("Account", metadata["Account"])
            sub_category = st.selectbox("Sub-category", available_subcategories)

        with col2:
            type_ = st.text_input("Type (≤ 50 chars)", max_chars=50)
            user = metadata["User"][account]
            amount = st.number_input("Amount (INR)", min_value=0.0, format="%.2f")

        submitted = st.form_submit_button("Add Expense")
        if submitted:
            if not type_:
                st.warning("Please enter a valid 'Type' for the expense.")
            elif amount == 0.0:
                st.warning("Amount cannot be zero.")
            elif sub_category not in metadata["categories"][category]:
                st.error("Invalid sub-category for selected category.")
            else:
                insert_expense({
                    "date": date.strftime("%Y-%m-%d"),
                    "account": account,
                    "category": category,
                    "sub_category": sub_category,
                    "type": type_,
                    "user": user,
                    "amount": amount
                })
                st.success("✅ Expense added successfully!")

    # --------------------
    # Step 4: Show recent entries
    # --------------------
    st.markdown("---")
    st.subheader("Last 10 Expenses")
    df = fetch_last_expenses(10)
   
   # Rename columns
    display_df = df.drop(columns=["id"]).rename(columns={
        "date": "Date",
        "account": "Account",
        "category": "Category",
        "sub_category": "Sub Category",
        "type": "Type",
        "user": "User",
        "amount": "Amount"
    })

    st.dataframe(
        display_df.style.format({'Amount': '₹{:.2f}'}),
        use_container_width=True,
        height=240,
        hide_index=True
    )

# Contents of E:\Code\Projects\App-PersonalFinance\app-personal-finance\tabs\reports.py
import streamlit as st
import pandas as pd
from db_utils import fetch_all_expenses
import json

def load_metadata():
    with open("expense_metadata.json", "r") as f:
        return json.load(f)

def render():
    metadata = load_metadata()
    df = fetch_all_expenses()
    df['month'] = df['date'].dt.strftime('%Y-%m')

    st.subheader("Expense Report")

    with st.expander("Filter Options", expanded=True):
        col1, col2, col3 = st.columns(3)
        with col1:
            months = st.multiselect("Month", ["All"] + sorted(df['month'].unique()), default=["All"])
            accounts = st.multiselect("Account", ["All"] + metadata["Account"], default=["All"])
        with col2:
            categories = st.multiselect("Category", ["All"] + list(metadata["categories"].keys()), default=["All"])
            users = st.multiselect("User", ["All", "Anirban", "Puspita"], default=["All"])
        with col3:
            filtered_cats = categories if "All" not in categories else list(metadata["categories"].keys())
            sub_cats = sum([metadata["categories"][cat] for cat in filtered_cats], [])
            subcategories = st.selectbox("Sub-category", ["All"] + sorted(set(sub_cats)))

    # Apply filters
    if "All" not in months: df = df[df['month'].isin(months)]
    if "All" not in accounts: df = df[df['account'].isin(accounts)]
    if "All" not in categories: df = df[df['category'].isin(categories)]
    if subcategories != "All": df = df[df['sub_category'] == subcategories]
    if "All" not in users: df = df[df['user'].isin(users)]

    total = df['amount'].sum()
    st.markdown(f"### Total Expense: ₹{total:,.2f}")
    
    # Rename columns
    display_df = df.drop(columns=["id", "month"]).rename(columns={
        "date": "Date",
        "account": "Account",
        "category": "Category",
        "sub_category": "Sub Category",
        "type": "Type",
        "user": "User",
        "amount": "Amount"
    })

    st.dataframe(
        display_df.sort_values("Date", ascending=False).style.format({'Amount': '₹{:.2f}'}),
        use_container_width=True,
        height=400,
        hide_index=True
    )


# Contents of E:\Code\Projects\App-PersonalFinance\app-personal-finance\tabs\visuals.py
# tabs/visuals.py
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from db_utils import fetch_all_expenses
import json

def load_metadata():
    with open("expense_metadata.json", "r") as f:
        return json.load(f)

def render():
    metadata = load_metadata()
    df = fetch_all_expenses()
    df['month'] = df['date'].dt.strftime('%Y-%m')

    st.subheader("Visualizations")

    # ----- PIE CHART -----
    st.markdown("### Category-wise Expense Distribution (Pie Chart)")
    with st.expander("Pie Chart Filters", expanded=True):
        pie_month = st.selectbox(
            "Month", ["All"] + sorted(df['month'].unique()), 
            index=0, 
            key="pie_month_select"
        )
        accounts = st.multiselect(
            "Account", ["All"] + metadata["Account"], 
            default=["All"], 
            key="pie_account_select"
        )
        categories = st.multiselect(
            "Category", ["All"] + list(metadata["categories"].keys()), 
            default=["All"], 
            key="pie_category_select"
        )
        users = st.multiselect(
            "User", ["All", "Anirban", "Puspita"], 
            default=["All"], 
            key="pie_user_select"
        )

    # Filter data for pie chart
    pie_df = df.copy()
    if pie_month != "All": pie_df = pie_df[pie_df['month'] == pie_month]
    if "All" not in accounts: pie_df = pie_df[pie_df['account'].isin(accounts)]
    if "All" not in categories: pie_df = pie_df[pie_df['category'].isin(categories)]
    if "All" not in users: pie_df = pie_df[pie_df['user'].isin(users)]

    pie_data = pie_df.groupby('category')['amount'].sum().reset_index()
    fig1 = px.pie(pie_data, values='amount', names='category', title="Expenses by Category", hole=0.4)
    st.plotly_chart(fig1, use_container_width=True)

    # ----- LINE CHART -----
    st.markdown("### Daily Expense Trend (Line Chart)")
    with st.expander("Line Chart Filters", expanded=True):
        col1, col2 = st.columns(2)
        with col1:
            accounts_line = st.multiselect(
                "Account", ["All"] + metadata["Account"], 
                default=["All"], 
                key="line_account_select"
            )
            categories_line = st.multiselect(
                "Category", ["All"] + list(metadata["categories"].keys()), 
                default=["All"], 
                key="line_category_select"
            )
        with col2:
            users_line = st.multiselect(
                "User", ["All", "Anirban", "Puspita"], 
                default=["All"], 
                key="line_user_select"
            )
            chart_mode = st.radio(
                "Chart Mode",
                ["Daily", "Cumulative", "Both"],
                index=0,
                key="chart_mode_select"
            )

    # Filter data for line chart
    line_df = df.copy()
    if "All" not in accounts_line: line_df = line_df[line_df['account'].isin(accounts_line)]
    if "All" not in categories_line: line_df = line_df[line_df['category'].isin(categories_line)]
    if "All" not in users_line: line_df = line_df[line_df['user'].isin(users_line)]

    # Prepare data
    daily_data = line_df.groupby('date')['amount'].sum().reset_index().sort_values('date')
    cumulative_data = daily_data.copy()
    cumulative_data['cumulative_amount'] = cumulative_data['amount'].cumsum()

    # Create figure
    fig2 = go.Figure()
    
    if chart_mode in ["Daily", "Both"]:
        fig2.add_trace(go.Scatter(
            x=daily_data['date'],
            y=daily_data['amount'],
            name='Daily Expenses',
            mode='lines+markers',
            line=dict(color='#1f77b4', width=2)
        ))
    
    if chart_mode in ["Cumulative", "Both"]:
        fig2.add_trace(go.Scatter(
            x=cumulative_data['date'],
            y=cumulative_data['cumulative_amount'],
            name='Cumulative Expenses',
            mode='lines+markers',
            line=dict(color='#ff7f0e', width=2, dash='dot')
        ))
    
    fig2.update_layout(
        title='Expense Trends',
        xaxis_title='Date',
        yaxis_title='INR',
        legend_title='Metric',
        hovermode="x unified"
    )
    st.plotly_chart(fig2, use_container_width=True)


















































