# instruction_code_details.txt
"""
Describes the functionality of each file...
"""

File: create_clean_csv.py
Location: create_clean_csv.py
Summary: The script processes 'expenses.csv' by normalizing column names and reconstructing missing 'date' entries using 'year', 'month', and 'day_of_week'. It applies a function to fill in missing dates, drops unreconstructed entries, formats dates, and saves the cleaned data back to the CSV file.
Code: """
# clean_expenses_csv.py
"""
This script reads 'data/expenses.csv', reconstructs missing 'date' entries using 'year', 'month', and 'day_of_week',
and writes the cleaned data back to 'data/expenses.csv'.
"""

import pandas as pd
import calendar
from datetime import datetime
from pathlib import Path

# Define paths
ROOT_DIR = Path(__file__).parent
DATA_DIR = ROOT_DIR / "data"
CSV_PATH = DATA_DIR / "expenses.csv"

# Load CSV
df = pd.read_csv(CSV_PATH)

# Normalize column names
df.columns = (
    df.columns
    .str.strip()
    .str.lower()
    .str.replace("-", "_")
    .str.replace(" ", "_")
)

# Check if 'date' column exists; if not, create it
if 'date' not in df.columns:
    df['date'] = pd.NaT

# Convert 'date' column to datetime
df['date'] = pd.to_datetime(df['date'], errors='coerce')

# Identify rows with missing 'date' values
missing_date_mask = df['date'].isnull()

# Function to reconstruct date
def reconstruct_date(row):
    try:
        year = int(row['year'])
        month_str = str(row['month'])
        if '-' in month_str:
            month = int(month_str.split('-')[1])
        else:
            month = int(month_str)
        day_name = row['day_of_week']
        # Get all days in the month
        month_calendar = calendar.monthcalendar(year, month)
        # Find the first occurrence of the specified day_of_week
        for week in month_calendar:
            for i, day in enumerate(week):
                if day != 0 and calendar.day_name[i] == day_name:
                    return datetime(year, month, day)
    except Exception as e:
        pass
    return pd.NaT

# Apply reconstruction to missing dates
df.loc[missing_date_mask, 'date'] = df[missing_date_mask].apply(reconstruct_date, axis=1)

# Check if any 'date' entries are still missing
still_missing = df['date'].isnull().sum()
if still_missing > 0:
    print(f"⚠️ Warning: {still_missing} 'date' entries could not be reconstructed and will be dropped.")
    df = df.dropna(subset=['date'])

# Format 'date' as string
df['date'] = df['date'].dt.strftime('%Y-%m-%d')

# Write cleaned data back to CSV
df.to_csv(CSV_PATH, index=False)

print(f"\n✅ 'expenses.csv' has been cleaned and updated at: {CSV_PATH.resolve()}")
print(f"📊 Total records written: {len(df)}")

"""

File: create_db.py
Location: create_db.py
Summary: The script processes 'data/expenses.csv' by reconstructing missing 'date' entries using 'year', 'month', and 'day_of_week', adds UUIDs, and saves the data to 'data/expenses.db'. It ensures necessary columns exist, handles missing data, and writes the processed data to an SQLite database.
Code: """
# create_db.py
"""
This script reads 'data/expenses.csv', reconstructs missing 'date' entries using 'year', 'month', and 'day_of_week',
adds UUIDs, and saves the result into 'data/expenses.db'.
"""

import sqlite3
import pandas as pd
import uuid
from pathlib import Path
import calendar
from datetime import datetime

# Define paths
ROOT_DIR = Path(__file__).parent
DATA_DIR = ROOT_DIR / "data"
CSV_PATH = DATA_DIR / "expenses.csv"
DB_PATH = DATA_DIR / "expenses.db"

# Ensure data directory exists
DATA_DIR.mkdir(parents=True, exist_ok=True)

# Load CSV
df = pd.read_csv(CSV_PATH)

# Normalize column names
df.columns = (
    df.columns
    .str.strip()
    .str.lower()
    .str.replace("-", "_")
    .str.replace(" ", "_")
)

# Check if 'date' column exists; if not, create it
if 'date' not in df.columns:
    df['date'] = pd.NaT

# Convert 'date' column to datetime
df['date'] = pd.to_datetime(df['date'], errors='coerce')

# Identify rows with missing 'date' values
missing_date_mask = df['date'].isnull()

# Function to reconstruct date
def reconstruct_date(row):
    year = int(row['year'])
    month = int(row['month'].split('-')[1]) if isinstance(row['month'], str) and '-' in row['month'] else int(row['month'])
    day_name = row['day_of_week']
    # Get all days in the month
    month_calendar = calendar.monthcalendar(year, month)
    # Find the first occurrence of the specified day_of_week
    for week in month_calendar:
        for i, day in enumerate(week):
            if day != 0 and calendar.day_name[i] == day_name:
                return datetime(year, month, day)
    return pd.NaT

# Apply reconstruction to missing dates
df.loc[missing_date_mask, 'date'] = df[missing_date_mask].apply(reconstruct_date, axis=1)

# Check if any 'date' entries are still missing
still_missing = df['date'].isnull().sum()
if still_missing > 0:
    print(f"⚠️ Warning: {still_missing} 'date' entries could not be reconstructed and will be dropped.")
    df = df.dropna(subset=['date'])

# Generate derived date columns
df['month'] = df['date'].dt.to_period('M').astype(str)
df['week'] = df['date'].dt.strftime('%G-W%V')  # ISO week format
df['day_of_week'] = df['date'].dt.day_name()

# Format 'date' as string
df['date'] = df['date'].dt.strftime('%Y-%m-%d')

# Add UUID as primary key
df['id'] = [str(uuid.uuid4()) for _ in range(len(df))]

# Final schema validation
required_columns = {
    'date', 'account', 'category', 'sub_category', 'type',
    'user', 'amount', 'month', 'week', 'day_of_week'
}
missing_cols = required_columns - set(df.columns)
if missing_cols:
    raise ValueError(f"❌ Missing required column(s) after processing: {missing_cols}")

# Write to SQLite database
with sqlite3.connect(DB_PATH) as conn:
    df.to_sql("expenses", conn, if_exists="replace", index=False)

print(f"\n✅ Database successfully created at: {DB_PATH.resolve()}")
print(f"📊 Total records written: {len(df)}")

"""

File: db_utils.py
Location: db_utils.py
Summary: The `db_utils.py` file provides utility functions for managing an SQLite database of expenses. It includes functions to establish a database connection, fetch all expenses, fetch expenses by ID, insert new expenses, update existing expenses, delete expenses, and fetch the last N expenses. Logging is used for error and info reporting.
Code: """
# db_utils.py
import sqlite3
import pandas as pd
from uuid import uuid4
from pathlib import Path
import logging
from typing import Optional, Dict, Any, List

# Setup basic logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# ✅ Updated database path to ROOT/data/expenses.db
DB_PATH = Path(__file__).parent / "data" / "expenses.db"

def get_connection() -> Optional[sqlite3.Connection]:
    """
    Establishes a connection to the SQLite database.

    Returns:
        Optional[sqlite3.Connection]: A connection object or None if connection fails.
    """
    try:
        conn = sqlite3.connect(DB_PATH, check_same_thread=False)
        conn.row_factory = sqlite3.Row  # Return rows as dictionary-like objects
        logging.debug(f"Database connection established at {DB_PATH.resolve()}")
        return conn
    except sqlite3.Error as e:
        logging.error(f"Database connection error: {e}")
        return None

def fetch_all_expenses() -> pd.DataFrame:
    conn = get_connection()
    if conn is None: return pd.DataFrame()
    try:
        df = pd.read_sql("SELECT * FROM expenses ORDER BY date DESC", conn)
        df['date'] = pd.to_datetime(df['date'], errors='coerce')
        logging.info(f"Fetched {len(df)} expenses.")
        return df
    except (sqlite3.Error, pd.errors.DatabaseError) as e:
        logging.error(f"Error fetching all expenses: {e}")
        return pd.DataFrame()
    finally:
        if conn: conn.close()

def fetch_expense_by_id(expense_id: str) -> Optional[Dict[str, Any]]:
    conn = get_connection()
    if conn is None: return None
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM expenses WHERE id = ?", (expense_id,))
        record = cursor.fetchone()
        logging.debug(f"Fetched expense for ID {expense_id}: {'Found' if record else 'Not Found'}")
        return dict(record) if record else None
    except sqlite3.Error as e:
        logging.error(f"Error fetching expense by ID {expense_id}: {e}")
        return None
    finally:
        if conn: conn.close()

def insert_expense(data: Dict[str, Any]) -> bool:
    """
    Inserts a new expense record into the database.

    Args:
        data (Dict[str, Any]): Dictionary containing expense details.

    Returns:
        bool: True if insertion was successful, False otherwise.
    """
    conn = get_connection()
    if conn is None:
        return False

    required_fields = ['date', 'year', 'month', 'week', 'day_of_week',
                       'account', 'category', 'sub_category', 'type',
                       'user', 'amount']
    
    if not all(field in data for field in required_fields):
        logging.error(f"Missing required fields for inserting expense. Got: {list(data.keys())}")
        return False

    sql = """
    INSERT INTO expenses (
        id, date, year, month, week, day_of_week,
        account, category, sub_category, type, user, amount
    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    """

    try:
        cursor = conn.cursor()
        new_id = str(uuid4())
        cursor.execute(sql, (
            new_id,
            data['date'],
            int(data['year']),
            data['month'],
            data['week'],
            data['day_of_week'],
            data['account'],
            data['category'],
            data['sub_category'],
            data['type'],
            data['user'],
            float(data['amount'])
        ))
        conn.commit()
        logging.info(f"✅ Expense inserted with ID: {new_id}")
        return True
    except (sqlite3.Error, ValueError) as e:
        logging.error(f"Error inserting expense: {e}")
        conn.rollback()
        return False
    finally:
        if conn:
            conn.close()


def update_expense(expense_id: str, data: Dict[str, Any]) -> bool:
    conn = get_connection()
    if conn is None: return False

    required_fields = ['date', 'account', 'category', 'sub_category', 'type', 'user', 'amount']
    if not all(field in data for field in required_fields):
        logging.error(f"Missing required fields for updating expense ID {expense_id}. Got: {data.keys()}")
        return False

    sql = """
    UPDATE expenses
    SET date = ?, account = ?, category = ?, sub_category = ?, type = ?, user = ?, amount = ?
    WHERE id = ?
    """
    try:
        cursor = conn.cursor()
        cursor.execute(sql, (
            data['date'], data['account'], data['category'], data['sub_category'],
            data['type'], data['user'], float(data['amount']), expense_id
        ))
        conn.commit()
        if cursor.rowcount == 0:
            logging.warning(f"No expense found with ID {expense_id} to update.")
            return False
        logging.info(f"Expense {expense_id} updated successfully.")
        return True
    except (sqlite3.Error, ValueError) as e:
        logging.error(f"Error updating expense {expense_id}: {e}")
        conn.rollback()
        return False
    finally:
        if conn: conn.close()

def delete_expense(expense_id: str) -> bool:
    conn = get_connection()
    if conn is None: return False

    sql = "DELETE FROM expenses WHERE id = ?"
    try:
        cursor = conn.cursor()
        cursor.execute(sql, (expense_id,))
        conn.commit()
        if cursor.rowcount == 0:
            logging.warning(f"No expense found with ID {expense_id} to delete.")
            return False
        logging.info(f"Expense {expense_id} deleted successfully.")
        return True
    except sqlite3.Error as e:
        logging.error(f"Error deleting expense {expense_id}: {e}")
        conn.rollback()
        return False
    finally:
        if conn: conn.close()

def fetch_last_expenses(n: int = 10) -> pd.DataFrame:
    conn = get_connection()
    if conn is None: return pd.DataFrame()
    try:
        df = pd.read_sql(f"SELECT * FROM expenses ORDER BY date DESC, rowid DESC LIMIT ?", conn, params=(n,))
        df['date'] = pd.to_datetime(df['date'], errors='coerce')
        logging.info(f"Fetched last {len(df)} expenses (requested {n}).")
        return df
    except (sqlite3.Error, pd.errors.DatabaseError) as e:
        logging.error(f"Error fetching last {n} expenses: {e}")
        return pd.DataFrame()
    finally:
        if conn: conn.close()

"""

File: dummy_expenses.csv
Location: dummy_expenses.csv
Summary: The file logs financial transactions for Anirban on January 1, 2025, detailing expenses on rent, shopping, household, and groceries, with amounts ranging from ₹230 to ₹30,000 across different accounts (ICICI and SBI).
Code: """
      Date       Account  Category     Sub-category                             Type    User  Amount
2025-01-01 Anirban-ICICI      Rent       House Rent     Monthly House Rent - January Anirban   30000
2025-01-01   Anirban-SBI  Shopping           Meesho           Meesho Find - Clothing Anirban    7740
2025-01-01   Anirban-SBI  Shopping        Lifestyle          Lifestyle Store - Books Anirban    5870
2025-01-01 Anirban-ICICI Household Electricity Bill Electricity Bill related expense Anirban    1570
2025-01-01   Anirban-SBI   Grocery            Zepto   Zepto Quick Order - Quick Need Anirban     230
"""

File: expenses.csv
Location: expenses.csv
Summary: The file is a financial transaction log detailing expenses on January 1, 2023, by Anirban and Puspita. It includes categories like rent, household, grocery, and restaurant, with specific sub-categories, payment types, and amounts for each transaction.
Code: """
      date  year   month     week day_of_week       account   category     sub_category                       type    user   amount
01-01-2023  2023 2023-01 2023-W52      Sunday Anirban-ICICI       Rent       House Rent Monthly House Rent Payment Anirban 30000.00
01-01-2023  2023 2023-01 2023-W52      Sunday   Puspita-SBI  Household             Maid        Monthly Maid Salary Puspita  2500.00
01-01-2023  2023 2023-01 2023-W52      Sunday Anirban-ICICI    Grocery            Other         Meat/Fish Purchase Anirban   534.04
01-01-2023  2023 2023-01 2023-W52      Sunday   Puspita-SBI    Grocery Flipkart Grocery         FK Quick Groceries Puspita  2921.10
01-01-2023  2023 2023-01 2023-W52      Sunday Anirban-ICICI Restaurant         Takeaway               Lunch Parcel Anirban   848.85
"""

File: expenses_sample.csv
Location: expenses_sample.csv
Summary: The file is a financial transaction record detailing expenses on January 1, 2023. It includes payments for house rent, maid salary, groceries, and a restaurant takeaway, categorized by account, type, user, and amount, involving Anirban and Puspita.
Code: """
      date  year   month     week day_of_week       account   category     sub_category                       type    user   amount
01-01-2023  2023 2023-01 2023-W52      Sunday Anirban-ICICI       Rent       House Rent Monthly House Rent Payment Anirban 30000.00
01-01-2023  2023 2023-01 2023-W52      Sunday   Puspita-SBI  Household             Maid        Monthly Maid Salary Puspita  2500.00
01-01-2023  2023 2023-01 2023-W52      Sunday Anirban-ICICI    Grocery            Other         Meat/Fish Purchase Anirban   534.04
01-01-2023  2023 2023-01 2023-W52      Sunday   Puspita-SBI    Grocery Flipkart Grocery         FK Quick Groceries Puspita  2921.10
01-01-2023  2023 2023-01 2023-W52      Sunday Anirban-ICICI Restaurant         Takeaway               Lunch Parcel Anirban   848.85
"""

File: expense_metadata.json
Location: expense_metadata.json
Summary: The file outlines a transaction record structure, including a date format and account names for Anirban and Puspita. It categorizes expenses into Investment, Rent, Travel, Restaurant, Insurance Premium, Household, Connectivity, and Waste, listing specific items under each category.
Code: """
{
    "Date": "Date of the transaction (format: YYYY-MM-DD)",
    "Account": [
        "Anirban-SBI",
        "Anirban-ICICI",
        "Puspita-SBI",
        "Puspita-Bandhan"
    ],
	"categories": {
        "Investment": ["SIP", "Mutual Funds", "Stocks", "FD/RD"],
        "Rent": ["House Rent"],
        "Travel": ["Day Trip", "Vacation", "Commute", "Cab", "Train", "Flight", "Hotel/Stay", "Parking Fee"],
        "Restaurant": ["Dine-in", "Takeaway", "Food Delivery", "Snacks", "Cafe", "Drinks"],
        "Insurance Premium": ["Life Insurance", "ULIP", "Health Insurance", "Vehicle Insurance"],
        "Household": [
            "Electricity Bill", "Plumbing", "Electrical Repairs", "Appliance Repair", "Cleaning",
            "Pest Control", "Bike Maintenance", "Car Maintenance",
            "Furniture", "Kitchen Tools", "Ironing", "Maid"
        ],
        "Connectivity": ["Airtel WiFi", "Jio Recharge", "Airtel Mobile", "Netflix", "Prime Video", "Disney+ Hotstar"],
        "Waste": ["Smoke", "Alcohol"],
        "Grocery": ["BigBasket", "Amazon", "Flipkart Grocery", "Zepto", "Local Store", "Other"],
        "Beauty": ["Nykaa", "Meesho", "Purplle", "Salon", "Makeup", "Skincare", "Salon"],
        "Shopping": ["Amazon", "Flipkart", "Meesho", "Nykaa", "Purple", "Lifestyle", "Max", "Myntra"],
        "Health": ["Doctor Visit", "Medicines", "Lab Test", "Health Checkup"],
        "Utilities": ["Electricity", "Water", "Gas Cylinder", "Maintenance", "Garbage Collection"],
        "Gifts & Donations": ["Family", "Friends", "Charity", "Temple"],
        "Entertainment": ["Movies", "Concerts", "Games"],
        "Education": ["Online Courses", "Books", "Workshops"]
	},
    "User": {
        "Anirban-SBI": "Anirban",
        "Anirban-ICICI": "Anirban",
        "Puspita-SBI": "Puspita",
        "Puspita-Bandhan": "Puspita"
    },
    "Type": "Free text input describing the nature or name of the transaction (e.g., 'Family dinner', 'Cab to airport')",
    "Amount": "INR value of the transaction"
}
"""

File: main.py
Location: main.py
Summary: The `main.py` file is a Streamlit application for a Personal Expense Tracker. It configures the page, loads custom CSS, and sets up a sidebar for navigation between "Add Expenses," "Reports," and "Visualizations" tabs. It also manages data backup for the SQLite database and handles page rendering based on user selection.
Code: """
# main.py
"""
Main Streamlit application file for the Personal Expense Tracker.
Handles page navigation and calls rendering functions for each tab.
"""
import streamlit as st
from tabs import add_expense, reports, visuals
from style_utils import load_css
import os # Import os for file path checking
import logging # Ensure logging is imported if used within main

# --- Page Configuration ---
st.set_page_config(
    layout="wide",
    page_title="Personal Expense Tracker",
    page_icon="💰"
)

# --- Load CSS ---
load_css() # Load custom styles first

# --- Add Application Header Banner ---
st.title("My Personal Finance App")
# --- End Application Header Banner ---

# --- Sidebar Navigation ---
st.sidebar.title("Navigation")
page = st.sidebar.radio(
    "Go to",
    ["Add Expenses", "Reports", "Visualizations"],
    label_visibility="collapsed",
    key="main_nav"
)

st.sidebar.markdown("---")

# --- Sidebar Data Management ---
st.sidebar.header("Data Management")
DB_FILE = "expenses.db"
if os.path.exists(DB_FILE):
    try:
        with open(DB_FILE, "rb") as fp:
            st.sidebar.download_button(
                label="Download Data Backup (.db)",
                data=fp,
                file_name="expenses_backup.db",
                mime="application/octet-stream",
                help="Download the entire SQLite database file."
            )
    except OSError as e:
        st.sidebar.error(f"Error reading database file: {e}")
        logging.error(f"Error reading DB for backup: {e}") # Log error
else:
    st.sidebar.warning("Database file not found for backup.")

# --- Page Rendering ---
if page == "Add Expenses":
    add_expense.render()
elif page == "Reports":
    reports.render()
elif page == "Visualizations":
    visuals.render()
else:
    st.error("Invalid page selected.")
"""

File: requirements-v2.0.txt
Location: requirements-v2.0.txt
Summary: The file lists various Python packages organized by categories: Core Application, Database, GenAI & Embeddings, LangChain & LangGraph, Data Science, ML and DL, Data Visualization, Python, and Utilities & Helpers. It includes specific versions for some packages, such as numpy, SQLAlchemy, and openai, among others.
Code: """
# Core Application
streamlit
pandas
numpy==2.1.3
python-dateutil
python-dotenv==1.0.1
SQLAlchemy==2.0.39
requests

# Database
aiosqlite==0.21.0         # async SQLite support
faiss-cpu==1.10.0         # vector search
SQLAlchemy==2.0.39

# GenAI & Embeddings
openai==1.68.2
cohere==5.14.0
sentence-transformers==4.0.2
huggingface-hub==0.30.1
transformers
tiktoken==0.9.0
tokenizers==0.21.1

# LangChain & LangGraph
langchain
langchain-cohere
langchain-community
langchain-core
langchain-milvus
langchain-ollama
langchain-openai
langchain-text-splitters
langchainhub
langfuse
langgraph
langgraph-api
langgraph-checkpoint
langgraph-cli
langgraph-prebuilt
langgraph-sdk
langsmith

# Data Science, ML and DL
scikit-learn==1.6.1
scipy==1.15.2
statsmodels==0.14.4
keras==3.9.2
xgboost==3.0.0
joblib==1.4.2
torch

# Data Visualization
matplotlib==3.10.1
plotly
seaborn==0.13.2

# Python
six==1.17.0
pydantic-settings==2.8.1
pydantic

# Utilities & Helpers
black==25.1.0
cloudpickle==3.1.1
click==8.1.8
pypdf
openpyxl==3.1.5
tqdm

# Web Frameworks & Scraping
Flask==3.1.0
fastapi==0.115.11
uvicorn
beautifulsoup4
boto3==1.36.26
botocore==1.36.26
Jinja2==3.1.6

"""

File: requirements.txt
Location: requirements.txt
Summary: I'm sorry, I can't access the file. Please provide the code or a description of its contents for a summary.
Code: """
Unable to read file.
"""

File: sample_data_generation.csv
Location: sample_data_generation.csv
Summary: The file outlines Anirban's investment categories, sub-categories, accounts, and expense details. It includes SIP, Mutual Funds, Stocks, and FD/RD with specified monthly expense frequencies, minimum and maximum expense amounts, and valid expense types, such as SIP investments, MF purchases, and stock trades.
Code: """
  Category Sub-category    User       Account Expense-Frequency  Min-expenses-amount  Max-expenses-amount  Max-times-per-month                                                                              Valid-expense-types
Investment          SIP Anirban Anirban-ICICI           monthly                 3000                 3000                    1                                                                           Monthly SIP Investment
Investment Mutual Funds Anirban   Anirban-SBI           monthly                 1000                15000                    2                 MF Purchase - Lumpsum|MF Purchase - Topup|Equity Fund Investment|Debt Fund Topup
Investment       Stocks Anirban   Anirban-SBI           monthly                 1000                20000                    2 Stock Purchase - Tata Motors|Stock Purchase - HDFC Bank|Stock Purchase - Reliance|Intraday Trade
Investment        FD/RD Anirban   Anirban-SBI           monthly                 5000                25000                    1                                                  New Fixed Deposit|Recurring Deposit Installment
      Rent   House Rent Anirban Anirban-ICICI           monthly                30000                30000                    1                                                                       Monthly House Rent Payment
"""

File: styles.css
Location: styles.css
Summary: The "styles.css" file defines a reverted light theme using CSS variables. It imports the "Roboto" font and sets colors for backgrounds, text, accents, borders, and success messages. The theme features a white primary background, dark text, blue accents, and subtle rounded corners, maintaining a clean and modern aesthetic.
Code: """
/* styles.css - Reverted Light Theme */

/* --- Base Font --- */
@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap');

/* --- Light Theme Variables --- */
:root {
    --primary-bg-color: #FFFFFF;       /* White main background */
    --secondary-bg-color: #F8F9FA;   /* Very light grey for sidebar, tables */
    --widget-bg-color: #FFFFFF;      /* Widget background (White) */
    --text-color: #212529;           /* Dark text color */
    --subtle-text-color: #6C757D;    /* Grey for less important text */
    --accent-color: #007BFF;         /* Standard Blue for buttons, highlights */
    --accent-hover-color: #0056b3;   /* Darker blue on hover */
    --border-color: #DEE2E6;         /* Light grey border */
    --border-focus-color: #80BDFF;   /* Lighter blue for focus rings */
    --border-radius: 4px;            /* Subtle rounded corners */
    --font-family: 'Roboto', sans-serif;

    --success-color: #198754;        /* Bootstrap Green */
    --warning-color: #FFC107;        /* Bootstrap Yellow */
    --error-color: #DC3545;          /* Bootstrap Red */
    --success-bg-color: #D1E7DD;
    --warning-bg-color: #FFF3CD;
    --error-bg-color: #F8D7DA;
}

/* --- General Styles --- */
body {
    color: var(--text-color);
    background-color: var(--primary-bg-color);
    font-family: var(--font-family);
    font-size: 14px;
}

h1, h2, h3, h4, h5, h6 { color: var(--text-color); font-weight: 500; }
h3 { margin-top: 1.8rem; margin-bottom: 0.8rem; padding-bottom: 0.4rem; border-bottom: 1px solid var(--border-color); font-weight: 600; }
a { color: var(--accent-color); text-decoration: none; }
a:hover { color: var(--accent-hover-color); text-decoration: underline; }
hr { border-top: 1px solid var(--border-color); margin-top: 1.5rem; margin-bottom: 1.5rem; }

/* --- Main Content Area --- */
.main .block-container {
    padding-top: 2rem; padding-bottom: 2rem; padding-left: 2.5rem; padding-right: 2.5rem;
}

/* --- Sidebar --- */
[data-testid="stSidebar"] { background-color: var(--secondary-bg-color); border-right: 1px solid var(--border-color); }
[data-testid="stSidebar"] h1, [data-testid="stSidebar"] h2, [data-testid="stSidebar"] h3 { color: var(--text-color); font-weight: 600; }
[data-testid="stSidebar"] .stRadio > label { color: var(--text-color); display: block; padding: 0.5rem 0.8rem; margin-bottom: 0.2rem; border-radius: var(--border-radius); transition: background-color 0.2s ease, color 0.2s ease; font-weight: 400; }
[data-testid="stSidebar"] .stRadio > label:hover { background-color: #E9ECEF; color: var(--accent-color); }
[data-testid="stSidebar"] .stRadio [type="radio"]:checked + div > label { color: var(--accent-color); font-weight: 600; background-color: #E9ECEF; }


/* --- Widgets --- General Appearance (Light Theme) --- */

/* Buttons */
.stButton > button { background-color: var(--accent-color); color: #FFFFFF; border: 1px solid var(--accent-color); padding: 0.4rem 1rem; border-radius: var(--border-radius); font-weight: 400; transition: background-color 0.2s ease, border-color 0.2s ease; }
.stButton > button:hover { background-color: var(--accent-hover-color); border-color: var(--accent-hover-color); color: #FFFFFF; }
.stButton > button:focus { outline: none; box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25); }

/* Text Input, Number Input, Date Input (Single rule for all) */
.stTextInput input,
.stNumberInput input,
.stDateInput input {
    background-color: var(--widget-bg-color); /* Should be #FFFFFF */
    color: var(--text-color); /* Should be dark */
    border: 1px solid var(--border-color); /* Should be light grey */
    border-radius: var(--border-radius);
    padding: 0.4rem 0.7rem;
    transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    width: 100%;
    box-sizing: border-box;
    font-size: 1em;
}
.stTextInput input:focus,
.stNumberInput input:focus,
.stDateInput input:focus {
    border-color: var(--border-focus-color); /* Light blue focus */
    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    outline: none;
}
/* Style the container for DateInput for consistency */
[data-testid="stDateInput"] > div:first-child {
     background-color: var(--widget-bg-color);
     border: 1px solid var(--border-color);
     border-radius: var(--border-radius);
     overflow: hidden;
}
[data-testid="stDateInput"] > div:first-child:has(input:focus) {
    border-color: var(--border-focus-color);
    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
}

/* Selectbox, Multiselect (Single rule for all) */
.stSelectbox > div[data-baseweb="select"],
.stMultiSelect > div[role="listbox"] {
    background-color: var(--widget-bg-color) !important; /* White background */
    border: 1px solid var(--border-color) !important; /* Light grey border */
    border-radius: var(--border-radius) !important;
    color: var(--text-color) !important; /* Dark text */
    overflow: hidden !important;
}
.stMultiSelect input { /* Text typed into multiselect */
    color: var(--text-color) !important;
    background-color: transparent !important;
}
/* Focus state for Selectbox/Multiselect */
.stSelectbox > div[aria-expanded="true"],
.stMultiSelect > div[aria-expanded="true"] {
    border-color: var(--border-focus-color) !important; /* Light blue focus */
    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25) !important;
}

/* Multiselect Tags (Default Appearance) */
.stMultiSelect [data-baseweb="tag"] {
    border-radius: 3px !important;
    padding-left: 0.5rem !important;
    padding-right: 0.5rem !important;
    font-weight: 400 !important;
    /* Let Streamlit/BaseWeb handle default tag colors */
}

/* Dropdown menu styling */
div[data-baseweb="popover"] > div[data-baseweb="menu"] { background-color: var(--primary-bg-color); border: 1px solid var(--border-color); border-radius: var(--border-radius); box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15); overflow: hidden; }
div[data-baseweb="popover"] ul li { color: var(--text-color); padding: 0.4rem 1rem; }
div[data-baseweb="popover"] ul li:hover { background-color: var(--secondary-bg-color); }
div[data-baseweb="popover"] ul li[aria-selected="true"] { background-color: var(--accent-color); color: #FFFFFF; }

/* Radio Buttons / Checkbox (Keep simple) */
.stRadio > label { color: var(--text-color); padding-bottom: 0.2rem; }
.stCheckbox > label { color: var(--text-color); }


/* --- Forms & Expanders (Subtle styling) --- */
[data-testid="stForm"] {
    padding: 1.5rem;
    border: 1px solid var(--border-color); /* Just a border */
    border-radius: var(--border-radius);
    margin-bottom: 1.5rem;
    overflow: hidden;
}
[data-testid="stExpander"] {
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius);
    margin-bottom: 1rem;
    overflow: hidden;
}
[data-testid="stExpander"] summary { font-weight: 500; padding: 0.6rem 1rem; color: var(--text-color); border-bottom: 1px solid var(--border-color); }
[data-testid="stExpander"] summary:hover { color: var(--accent-color); }
[data-testid="stExpander"] div[role="button"] svg { fill: var(--text-color); }
[data-testid="stExpander"] .streamlit-expanderContent { padding: 1rem 1rem 1rem 1rem; background-color: var(--primary-bg-color); }

/* Labels WITHIN Form/Expander (Use default text color) */
[data-testid="stForm"] label,
[data-testid="stExpander"] label {
    color: var(--text-color);
    font-weight: 500;
    display: block;
    margin-bottom: 0.25rem;
}

/* --- Dataframe / Table --- */
/* ... (Dataframe styles remain the same) ... */
.stDataFrame { border: 1px solid var(--border-color); border-radius: var(--border-radius); overflow: hidden; }
.stDataFrame > div { border-radius: inherit; overflow: hidden; }
.stDataFrame thead th { background-color: var(--secondary-bg-color); color: var(--text-color); font-weight: 600; border-bottom: 2px solid var(--border-color); text-align: left; padding: 0.6rem 0.8rem; }
.stDataFrame thead th:first-child { border-top-left-radius: var(--border-radius); }
.stDataFrame thead th:last-child { border-top-right-radius: var(--border-radius); }
.stDataFrame tbody tr:nth-child(even) { background-color: var(--secondary-bg-color); }
.stDataFrame tbody tr:nth-child(odd) { background-color: var(--primary-bg-color); }
.stDataFrame tbody td { color: var(--text-color); border-bottom: none; padding: 0.5rem 0.8rem; border-right: 1px solid var(--border-color); }
.stDataFrame tbody td:last-child { border-right: none; }
.stDataFrame tbody tr:last-child td:first-child { border-bottom-left-radius: var(--border-radius); }
.stDataFrame tbody tr:last-child td:last-child { border-bottom-right-radius: var(--border-radius); }
.stDataFrame tbody tr:hover td { background-color: #E9ECEF; }


/* --- Alerts / Messages --- */
/* ... (Alert styles remain the same) ... */
[data-testid="stAlert"] { border-radius: var(--border-radius); border: 1px solid transparent; padding: 0.8rem 1rem; }
[data-testid="stAlert"][data-baseweb="notification-positive"] { background-color: var(--success-bg-color); border-color: var(--success-color); color: #0f5132; }
[data-testid="stAlert"][data-baseweb="notification-warning"] { background-color: var(--warning-bg-color); border-color: var(--warning-color); color: #664d03; }
[data-testid="stAlert"][data-baseweb="notification-negative"] { background-color: var(--error-bg-color); border-color: var(--error-color); color: #842029; }

/* --- Sidebar Download Button Style --- */
/* ... (Sidebar download button style remains the same) ... */
[data-testid="stSidebar"] .stDownloadButton > button { background-color: var(--error-color); border-color: var(--error-color); color: #FFFFFF; }
[data-testid="stSidebar"] .stDownloadButton > button:hover { background-color: #C82333; border-color: #BD2130; color: #FFFFFF; }
[data-testid="stSidebar"] .stDownloadButton > button:focus { box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.5); outline: none; }

/* --- Application Header Banner Style --- */
/* --- Application Header Banner Style --- */
.main h1 {
    background-color: #495057;
    color: #FFFFFF;
    padding: 0.8rem 2.5rem;
    /* MODIFIED: Removed negative top margin, adjusted horizontal/bottom margin */
    margin: 0 -2.5rem 1.5rem -2.5rem;
    text-align: center;
    border-radius: 0;
    font-size: 1.75rem;
    font-weight: 500;
    border-bottom: none;
}

/* --- Main Content Area --- */
.main .block-container {
    /* MODIFIED: Increased top padding significantly */
    padding-top: 5rem; /* Adjust this value as needed (e.g., 4rem, 5rem, 6rem) */
    padding-bottom: 2rem;
    padding-left: 2.5rem;
    padding-right: 2.5rem;
}

/* ... (rest of styles) ... */
"""

File: style_utils.py
Location: style_utils.py
Summary: The `style_utils.py` file defines a function `load_css` that loads and injects CSS into a Streamlit app from a specified file path, defaulting to "styles.css". It checks for the file's existence and logs warnings or errors if the file is missing or cannot be read.
Code: """
# style_utils.py
import streamlit as st
import logging # For logging errors
import os # For checking file existence

def load_css(file_path: str = "styles.css"):
    """
    Loads CSS from a file and injects it into the Streamlit app.

    Args:
        file_path (str): The path to the CSS file. Defaults to "styles.css".
    """
    if not os.path.exists(file_path):
        logging.warning(f"CSS file not found at {file_path}. Skipping CSS load.")
        return # Exit gracefully if file doesn't exist

    try:
        with open(file_path, "r", encoding='utf-8') as f: # Specify encoding
            css = f.read()
            st.markdown(f"<style>{css}</style>", unsafe_allow_html=True)
            logging.debug(f"Successfully loaded CSS from {file_path}")
    except OSError as e:
        logging.error(f"Error reading CSS file {file_path}: {e}")
    except Exception as e:
        logging.error(f"An unexpected error occurred while loading CSS: {e}")
"""

File: test_openai.py
Location: test_openai.py
Summary: The file initializes an OpenAI client using an API key from the environment, creates a chat completion using the "gpt-3.5-turbo" model, and prints the assistant's reply to a user's "Hello!" message.
Code: """
import os
from openai import OpenAI

# Initialize the OpenAI client with your API key
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# Create a chat completion
response = client.chat.completions.create(
    model="gpt-3.5-turbo",  # or "gpt-4" if you have access
    messages=[
        {"role": "system", "content": "You are a helpful assistant."},
        {"role": "user", "content": "Hello!"},
    ]
)

# Print the assistant's reply
print(response.choices[0].message.content)

"""

File: expenses.csv
Location: data\expenses.csv
Summary: The file is a financial transaction record detailing expenses on January 1, 2023. It includes transactions for rent, household, grocery, and restaurant categories, with amounts ranging from ₹534.04 to ₹30,000. The users involved are Anirban and Puspita, with payments made from ICICI and SBI accounts.
Code: """
      date  year   month     week day_of_week       account   category     sub_category                       type    user   amount
2023-01-01  2023 2023-01 2023-W52      Sunday Anirban-ICICI       Rent       House Rent Monthly House Rent Payment Anirban 30000.00
2023-01-01  2023 2023-01 2023-W52      Sunday   Puspita-SBI  Household             Maid        Monthly Maid Salary Puspita  2500.00
2023-01-01  2023 2023-01 2023-W52      Sunday Anirban-ICICI    Grocery            Other         Meat/Fish Purchase Anirban   534.04
2023-01-01  2023 2023-01 2023-W52      Sunday   Puspita-SBI    Grocery Flipkart Grocery         FK Quick Groceries Puspita  2921.10
2023-01-01  2023 2023-01 2023-W52      Sunday Anirban-ICICI Restaurant         Takeaway               Lunch Parcel Anirban   848.85
"""

File: agentic_ds_app_prep.txt
Location: reference\agentic_ds_app_prep.txt
Summary: The file outlines a step for implementing agentic AI, focusing on generating additional data similar to a sample CSV from January 1, 2023, to April 20, 2025. It specifies important data columns such as date, account, category, transaction type, user, and amount, with detailed guidelines for each.
Code: """
## THINGS TO DO BEFORE AGENTIC AI IMPLEMENTATION

STEP 1: GENERATE MORE DATA
 - Generate more data, similar to the sample dummy_expenses.csv, from 2023.01.01 - 2025.04.20 (current date). Important considerations for data generation:
	- SUPER IMPORTANT: columns: 
	1. date: dd-mm-yyyy	
	2. year: yyyy	
	3. month: yyyy-mm	
	4. week: 2021-W01 to latest, 2025-xxx	
	5. day_of_week: {Monday, Tuesday,... Sunday} according to date, refer calendar
	6. account: "Account": [
        "Anirban-SBI",
        "Anirban-ICICI",
        "Puspita-SBI",
        "Puspita-Bandhan"
    ],	
	7. category: refer below and metadata
	8. sub_category: refer below and metadata	
	9. type: "Free text input describing the nature or name of the transaction (e.g., 'Family dinner', 'Cab to airport')",
	10. user:	 "User": {
        "Anirban-SBI": "Anirban",
        "Anirban-ICICI": "Anirban",
        "Puspita-SBI": "Puspita",
        "Puspita-Bandhan": "Puspita"
    },
	11. amount:"INR value of the transaction, max 50000"

	- IMPORTANT: Generate data accoording to day to day expenditure values in Bangalore, India for all categories to mimic real world scenario
	- Each month cannot have total spend amount more than inr 120000 and less than 60000
	- Each month cannot have more than 100 rows
	- Total rows -less than 2500 
	- IMPORTANT: Spends MUST adhere to the category-subcategory mapping:
		categories = {
    "Investment": ["SIP", "Mutual Funds", "Stocks", "FD/RD"],
    "Rent": ["House Rent"],
    "Travel": ["Day Trip", "Vacation", "Commute", "Cab", "Train", "Flight", "Hotel/Stay", "Parking Fee"],
    "Restaurant": ["Dine-in", "Takeaway", "Food Delivery", "Snacks", "Cafe", "Drinks"],
    "Insurance Premium": ["Life Insurance", "ULIP", "Health Insurance", "Vehicle Insurance"],
    "Household": [
        "Electricity Bill", "Plumbing", "Electrical Repairs", "Appliance Repair", "Cleaning",
        "Pest Control", "Bike Maintenance", "Car Maintenance", 
        "Furniture", "Kitchen Tools", "Ironing", "Maid"
    ],
    "Connectivity": ["Airtel WiFi", "Jio Recharge", "Airtel Mobile", "Netflix", "Prime Video", "Disney+ Hotstar"],
    "Waste": ["Smoke", "Alcohol"],
    "Grocery": ["BigBasket", "Amazon", "Flipkart Grocery", "Zepto", "Local Store", "Other"],
    "Beauty": ["Nykaa", "Meesho", "Purple", "Salon", "Makeup", "Skincare", "Salon"],
    "Shopping": ["Amazon", "Flipkart", "Meesho", "Nykaa", "Purple", "Lifestyle", "Max", "Myntra"],
    "Health": ["Doctor Visit", "Medicines", "Lab Test", "Health Checkup"],
    "Utilities": ["Electricity", "Water", "Gas Cylinder", "Maintenance", "Garbage Collection"],
    "Gifts & Donations": ["Family", "Friends", "Charity", "Temple"],
    "Entertainment": ["Movies", "Concerts", "Games"],
    "Education": ["Online Courses", "Books", "Workshops"]
}
	- IMPORTANT: I have updated the categories and subcategories. Some additional information: there are only 2 users: 'Anirban' and 'Puspita'. Anirban has the following bank accouts: 'Anirban-SBI' and 'Anirban-ICICI'.  Puspita has the following bank accouts: 'Puspita-SBI' and 'Puspita-Bandhan'. I want to keep the app as simple as possible, so i am thinking of creating a database (sqlite3 / csv) with the following columns: 
	'Date': Date of transaction, 
	'Account': One of the 4 accounts for me and my wife mentioned above, 
	'Category': from the categories dictionary mentioned above, 
	'Sub-category': from the categories dictionary mentioned above, 
	'Type': Free text, we need to be able to enter it in the steamlit frontend, 
	'User': One of the 2 values: 'Anirban', "Puspita" 
	'Amount': amount of transaction.
	- IMPORTANT: "Currency Format: Just plain numbers, keep it simple!
		Frequency of Transactions: minimum: 2(atleat 1 transaction per user), maximum: 20
		Expense Bias: Should we simulate more transactions from a specific account or category (e.g., more grocery or restaurant spends)? - Grocery and household are the biggest ones, but they are less than rent. House rent: once a month, fixed, 30000 (Anirban-ICICI). Maid: once a month, fixed, 2500 (Puspita-SBI). I pay house rent, wife pays maid salary. Puspita uses Puspita-Bandhan only for Travel and beauty categories. For me, most of the daily expenses are from Anirban-ICICI, with some from Anirban-SBI.
		Include recurring transactions? Like SIPs, rent, etc. on specific days?SIP: once a month, 3000, fixed. ULIP: once a month, 4000. fixed I pay both from Anirban-ICICI.
		match the type to category and sub category. For example, if: Category - household, Subcategory - Ironing, then type has to be ironing. if the cat - Travel and subcat -train, the type has to be something like: bangalore-mysore vande bharat, type can't be 'lab test', In summary, the type has to make sense for category and subcategory. Also, Puspita uses her bandhan for travel and rarely something else. In travel also, she will mainly use it to book train / flight tickets, not pay  parking fees, I pay that. Please generate data accordingly.
		
	- IMPORTANT: Spend trends, fixed values and behaviour
		- Fixed spends: "Investment": ["SIP" - 3000, "Mutual Funds" - 0 (None for now), "Stocks" - 0 (None for now), "FD/RD"0 (None for now)],
        "Rent": ["House Rent" - inr 30000] - all once a month, with fixed values
		"Insurance Premium": ["Life Insurance" - 55000 twice a year on 20th march and 20th september, "ULIP" - 4000 every month between 20th - 25th, "Health Insurance" - lets say 1200 every month between 20th - 25th, "Vehicle Insurance" - once a year, 0 for now]
		"Household": [
            "Electricity Bill", "Plumbing", "Electrical Repairs", "Appliance Repair", "Cleaning",
            "Pest Control", "Bike Maintenance", "Car Maintenance",
            "Furniture", "Kitchen Tools", "Ironing", "Maid"
        ], - many have 2 month (Electricity bill) or 1 month (Maid) cycles or ad hoc costs (everything else in "Household") 
        "Connectivity": ["Airtel WiFi", "Jio Recharge", "Airtel Mobile", "Netflix", "Prime Video", "Disney+ Hotstar"], - many have 6 month (Airtel WiFi) or 3 month ( "Jio Recharge", "Airtel Mobile") cycles or ad hoc costs (everything else in "Connectivity") 
		- Category wise spends: 
		"Waste": ["Smoke", "Alcohol"], - ad hoc, a small percentage of total, variable weekly and monthly, alcohol max once a month
        "Grocery": ["BigBasket", "Amazon", "Flipkart Grocery", "Zepto", "Local Store", "Other"], - ad hoc, concentrated on the first week of the month (after salary, salary is not tracked in the data), smaller spends dotted throughout the month
        "Beauty": ["Nykaa", "Meesho", "Purplle", "Salon", "Makeup", "Skincare", "Salon"],- ad hoc, spends dotted throughout the month
        "Shopping": ["Amazon", "Flipkart", "Meesho", "Nykaa", "Purple", "Lifestyle", "Max", "Myntra"], - ad hoc, concentrated on the first week of the month (after salary, salary is not tracked in the data), smaller spends dotted throughout the month
        "Health": ["Doctor Visit", "Medicines", "Lab Test", "Health Checkup"],- ad hoc, spends dotted throughout the month
        "Utilities": ["Electricity", "Water", "Gas Cylinder", "Maintenance", "Garbage Collection"],- electricity bill - 2 month cycle, gas cylinder - 2 month cycle, rest ad hoc, spends dotted throughout the month
        "Gifts & Donations": ["Family", "Friends", "Charity", "Temple"],ad hoc, small amounts, spends dotted throughout the month
        "Entertainment": ["Movies", "Concerts", "Games"],ad hoc, small amounts, spends dotted throughout the month
        "Education": ["Online Courses", "Books", "Workshops"] ad hoc, small amounts, spends dotted throughout the month
 

		
		
		
		
		
		
		
		
		

"""

File: data_analysis.ipynb
Location: reference\data_analysis.ipynb
Summary: The file outlines an Exploratory Data Analysis (EDA) process for personal finance data, specifically analyzing a CSV file (`dummy_expenses_generated.csv`) to assess its structure, realism, and suitability for AI/ML tasks. It references additional files for rules and metadata and uses libraries like pandas and plotly for analysis.
Code: """
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exploratory Data Analysis (EDA) for Personal Finance Data (v2)\n",
    "\n",
    "**Objective:** Analyze the generated expense data (`dummy_expenses_generated.csv`) to validate its structure, adherence to generation rules, realism, and suitability for downstream AI/ML tasks (Phase 2 Assistant). Plots will be displayed inline.\n",
    "\n",
    "**Data Source:** `../dummy_expenses_generated.csv` (Relative path from `reference/` to project root)\n",
    "**Ruleset Reference:** `../sample_data_generation.csv`\n",
    "**Metadata Reference:** `../expense_metadata.json`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "fcb1b6c8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import necessary libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import plotly.express as px\n",
    "import plotly.graph_objects as go\n",
    "from plotly.subplots import make_subplots\n",
    "import json\n",
    "from pathlib import Path\n",
    "import datetime\n",
    "import logging\n",
    "import os # Import os for directory creation\n",
    "from typing import Optional, Dict, Any # For type hints\n",
    "\n",
    "# Configure logging for analysis insights\n",
    "logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "86a4f331",
   "metadata": {},
   "outputs": [],
   "source": [
    "# --- Setup Paths and Create Output Directory ---\n",
    "\n",
    "# Define file paths relative to the notebook location (reference/)\n",
    "NOTEBOOK_DIR = Path().resolve() # Should be the reference folder when running notebook there\n",
    "PROJECT_ROOT = NOTEBOOK_DIR.parent\n",
    "DATA_FILE = PROJECT_ROOT / \"dummy_expenses_generated.csv\"\n",
    "RULES_FILE = PROJECT_ROOT / \"sample_data_generation.csv\"\n",
    "METADATA_FILE = PROJECT_ROOT / \"expense_metadata.json\"\n",
    "\n",
    "# Define image output directory (though we won't save by default now)\n",
    "IMG_DIR = NOTEBOOK_DIR / \"img\"\n",
    "\n",
    "# Optionally ensure the image directory exists if you uncomment saving later\n",
    "# try:\n",
    "#     os.makedirs(IMG_DIR, exist_ok=True)\n",
    "#     logging.info(f\"Image output directory exists or created: {IMG_DIR}\")\n",
    "# except OSError as e:\n",
    "#     logging.error(f\"Could not create image directory {IMG_DIR}: {e}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f596d3c0",
   "metadata": {},
   "source": [
    "## Helper Function: Load Rules"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "2a2675ae",
   "metadata": {},
   "outputs": [],
   "source": [
    "# --- Helper Function: Load Rules (Moved here to be defined before use) ---\n",
    "def load_rules(filepath: Path) -> Optional[pd.DataFrame]:\n",
    "    \"\"\"Loads and preprocesses the ruleset CSV.\"\"\"\n",
    "    if not filepath.exists():\n",
    "        logging.error(f\"Rules file not found: {filepath}\")\n",
    "        return None\n",
    "    try:\n",
    "        df_rules = pd.read_csv(filepath)\n",
    "        # Clean column names if needed (assuming they are already clean based on previous step)\n",
    "        df_rules.columns = [col.strip() for col in df_rules.columns]\n",
    "        # Split the valid types string into a list\n",
    "        # Handle potential errors if the column doesn't exist or has NaNs\n",
    "        if 'Valid-expense-types' in df_rules.columns:\n",
    "             df_rules['Valid-expense-types'] = df_rules['Valid-expense-types'].fillna('').astype(str).str.split('|')\n",
    "        else:\n",
    "             logging.warning(\"'Valid-expense-types' column not found in rules file.\")\n",
    "             df_rules['Valid-expense-types'] = [[] for _ in range(len(df_rules))] # Add empty list\n",
    "\n",
    "        # Convert amount/count columns to numeric, coercing errors\n",
    "        for col in ['Min-expenses-amount', 'Max-expenses-amount', 'Max-times-per-month']:\n",
    "            if col in df_rules.columns:\n",
    "                df_rules[col] = pd.to_numeric(df_rules[col], errors='coerce')\n",
    "            else:\n",
    "                logging.warning(f\"Column '{col}' not found in rules file.\")\n",
    "                df_rules[col] = np.nan # Add column with NaN if missing\n",
    "\n",
    "        # Fill missing Max-times with a default (e.g., 5) or handle based on frequency\n",
    "        df_rules['Max-times-per-month'].fillna(5, inplace=True)\n",
    "        df_rules['Max-times-per-month'] = df_rules['Max-times-per-month'].astype(int)\n",
    "\n",
    "        # Define critical columns needed from rules file\n",
    "        critical_rule_cols = ['Category', 'Sub-category', 'User', 'Account', 'Expense-Frequency', 'Min-expenses-amount', 'Max-expenses-amount', 'Max-times-per-month']\n",
    "        missing_critical = [col for col in critical_rule_cols if col not in df_rules.columns]\n",
    "        if missing_critical:\n",
    "            logging.error(f\"Rules file is missing critical columns: {missing_critical}\")\n",
    "            return None\n",
    "\n",
    "        # Drop rows with missing critical numeric info after conversion attempts\n",
    "        df_rules.dropna(subset=['Min-expenses-amount', 'Max-expenses-amount'], inplace=True)\n",
    "        # Drop rows with missing critical categorical info\n",
    "        df_rules.dropna(subset=['Category', 'Sub-category', 'User', 'Account', 'Expense-Frequency'], inplace=True)\n",
    "\n",
    "        logging.info(f\"Loaded and preprocessed {len(df_rules)} rules from {filepath}\")\n",
    "        return df_rules\n",
    "    except Exception as e:\n",
    "        logging.error(f\"Error loading or processing rules file {filepath}: {e}\", exc_info=True)\n",
    "        return None"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2e32c188",
   "metadata": {},
   "source": [
    "## 1. Load Data and Basic Checks\n",
    "\n",
    "Load the generated CSV, parse dates correctly using the 'dd-mm-yyyy' format, check basic info, data types, and null values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "55eae2b5",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO: Attempting to load data from: E:\\Code\\Projects\\App-PersonalFinance\\app-personal-finance\\dummy_expenses_generated.csv\n",
      "INFO: Reference ruleset: E:\\Code\\Projects\\App-PersonalFinance\\app-personal-finance\\sample_data_generation.csv\n",
      "INFO: Reference metadata: E:\\Code\\Projects\\App-PersonalFinance\\app-personal-finance\\expense_metadata.json\n",
      "INFO: Successfully loaded E:\\Code\\Projects\\App-PersonalFinance\\app-personal-finance\\dummy_expenses_generated.csv. Shape: (951, 11)\n",
      "INFO: Successfully loaded metadata from E:\\Code\\Projects\\App-PersonalFinance\\app-personal-finance\\expense_metadata.json\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loaded 951 rows.\n"
     ]
    }
   ],
   "source": [
    "logging.info(f\"Attempting to load data from: {DATA_FILE}\")\n",
    "logging.info(f\"Reference ruleset: {RULES_FILE}\")\n",
    "logging.info(f\"Reference metadata: {METADATA_FILE}\")\n",
    "\n",
    "# Load the generated data\n",
    "try:\n",
    "    df = pd.read_csv(DATA_FILE)\n",
    "    logging.info(f\"Successfully loaded {DATA_FILE}. Shape: {df.shape}\")\n",
    "    print(f\"Loaded {len(df)} rows.\")\n",
    "except FileNotFoundError:\n",
    "    logging.error(f\"Data file not found at {DATA_FILE}. Please ensure it's generated in the project root.\")\n",
    "    df = pd.DataFrame() # Create empty df to avoid downstream errors\n",
    "except Exception as e:\n",
    "    logging.error(f\"Error loading data CSV {DATA_FILE}: {e}\", exc_info=True)\n",
    "    df = pd.DataFrame()\n",
    "\n",
    "# Load metadata for validation checks\n",
    "try:\n",
    "    with open(METADATA_FILE, 'r') as f:\n",
    "        metadata = json.load(f)\n",
    "    logging.info(f\"Successfully loaded metadata from {METADATA_FILE}\")\n",
    "except Exception as e:\n",
    "    logging.error(f\"Could not load metadata file {METADATA_FILE}: {e}\")\n",
    "    metadata = {} # Assign empty dict if load fails"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "5d905392",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO: Converted 'date' column to datetime objects ('date_dt').\n",
      "INFO: All dates successfully parsed.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Data Info ---\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 951 entries, 0 to 950\n",
      "Data columns (total 11 columns):\n",
      " #   Column        Non-Null Count  Dtype  \n",
      "---  ------        --------------  -----  \n",
      " 0   date          951 non-null    object \n",
      " 1   year          951 non-null    int64  \n",
      " 2   month         951 non-null    object \n",
      " 3   week          951 non-null    object \n",
      " 4   day_of_week   951 non-null    object \n",
      " 5   account       951 non-null    object \n",
      " 6   category      951 non-null    object \n",
      " 7   sub_category  951 non-null    object \n",
      " 8   type          951 non-null    object \n",
      " 9   user          951 non-null    object \n",
      " 10  amount        951 non-null    float64\n",
      "dtypes: float64(1), int64(1), object(9)\n",
      "memory usage: 81.9+ KB\n",
      "\n",
      "--- Date Conversion ---\n"
     ]
    }
   ],
   "source": [
    "# Display basic information if data loaded\n",
    "if not df.empty:\n",
    "    print(\"\\n--- Data Info ---\")\n",
    "    df.info()\n",
    "\n",
    "    # Convert 'date' column from dd-mm-yyyy string to datetime objects for analysis\n",
    "    print(\"\\n--- Date Conversion ---\")\n",
    "    try:\n",
    "        # Explicitly use dayfirst=True or format='%d-%m-%Y'\n",
    "        df['date_dt'] = pd.to_datetime(df['date'], format='%d-%m-%Y', errors='coerce')\n",
    "        logging.info(\"Converted 'date' column to datetime objects ('date_dt').\")\n",
    "\n",
    "        # Check for any conversion errors\n",
    "        null_dates = df['date_dt'].isnull().sum()\n",
    "        if null_dates > 0:\n",
    "            logging.warning(f\"Found {null_dates} rows with invalid date formats that couldn't be parsed to 'dd-mm-yyyy'.\")\n",
    "            # Optional: Display problematic rows\n",
    "            # print(\"\\nRows with date parsing errors:\")\n",
    "            # print(df[df['date_dt'].isnull()]['date'])\n",
    "            df.dropna(subset=['date_dt'], inplace=True) # Remove rows with invalid dates for analysis\n",
    "            logging.info(f\"Removed rows with invalid dates. New shape: {df.shape}\")\n",
    "        else:\n",
    "            logging.info(\"All dates successfully parsed.\")\n",
    "\n",
    "    except KeyError:\n",
    "        logging.error(\"Column 'date' not found in the CSV.\")\n",
    "    except Exception as e:\n",
    "        logging.error(f\"Error during date conversion: {e}\", exc_info=True)\n",
    "\n",
    "else:\n",
    "    print(\"DataFrame is empty. Cannot perform further analysis.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d2692605",
   "metadata": {},
   "source": [
    "## 2. Data Range and Null Value Check\n",
    "\n",
    "Verify the date range covers the expected period and check for unexpected missing values in core columns."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "77c097ac",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: Data ends earlier (2025-04-15) than expected (2025-04-20).\n",
      "INFO: No unexpected null values found in critical columns (sub_category/type might have blanks/nulls).\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Date Range Check ---\n",
      "Data spans from: 2023-01-01 to 2025-04-15\n",
      "\n",
      "--- Null Value Check ---\n",
      "Columns with Null/NaN values:\n",
      "Series([], dtype: int64)\n"
     ]
    }
   ],
   "source": [
    "if not df.empty and 'date_dt' in df.columns:\n",
    "    min_date = df['date_dt'].min()\n",
    "    max_date = df['date_dt'].max()\n",
    "    print(f\"\\n--- Date Range Check ---\")\n",
    "    print(f\"Data spans from: {min_date.strftime('%Y-%m-%d')} to {max_date.strftime('%Y-%m-%d')}\")\n",
    "\n",
    "    expected_start = datetime.datetime(2023, 1, 1)\n",
    "    expected_end = datetime.datetime(2025, 4, 20)\n",
    "\n",
    "    if min_date.date() > expected_start.date():\n",
    "        logging.warning(f\"Data starts later ({min_date.date()}) than expected ({expected_start.date()}).\")\n",
    "    if max_date.date() < expected_end.date():\n",
    "        logging.warning(f\"Data ends earlier ({max_date.date()}) than expected ({expected_end.date()}).\")\n",
    "\n",
    "    print(\"\\n--- Null Value Check ---\")\n",
    "    null_counts = df.isnull().sum()\n",
    "    print(\"Columns with Null/NaN values:\")\n",
    "    print(null_counts[null_counts > 0]) # Only show columns with nulls\n",
    "\n",
    "    # Check critical columns - adjust if 'sub_category' or 'type' can legitimately be empty strings instead of NaN\n",
    "    critical_cols = ['date', 'year', 'month', 'week', 'day_of_week', 'account', 'category', 'user', 'amount', 'date_dt']\n",
    "    unexpected_nulls = null_counts.reindex(critical_cols, fill_value=0).sum() > 0 # Use reindex to handle missing cols safely\n",
    "\n",
    "    if unexpected_nulls:\n",
    "        logging.error(\"UNEXPECTED null values found in critical columns! Review data generation.\")\n",
    "    else:\n",
    "        logging.info(\"No unexpected null values found in critical columns (sub_category/type might have blanks/nulls).\")\n",
    "else:\n",
    "     print(\"Skipping range/null checks as DataFrame is empty or date conversion failed.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cff3bca3",
   "metadata": {},
   "source": [
    "## 3. Constraint Validation: Row Counts\n",
    "\n",
    "Check if the number of transactions per month adheres to the `MONTHLY_MAX_ROWS = 100` limit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "fac25dab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "hovertemplate": "Month (YYYY-MM)=%{x}<br>Number of Transactions=%{y}<extra></extra>",
         "legendgroup": "",
         "marker": {
          "color": "#636efa",
          "pattern": {
           "shape": ""
          }
         },
         "name": "",
         "orientation": "v",
         "showlegend": false,
         "textposition": "auto",
         "type": "bar",
         "x": [
          "2023-01",
          "2023-02",
          "2023-03",
          "2023-04",
          "2023-05",
          "2023-06",
          "2023-07",
          "2023-08",
          "2023-09",
          "2023-10",
          "2023-11",
          "2023-12",
          "2024-01",
          "2024-02",
          "2024-03",
          "2024-04",
          "2024-05",
          "2024-06",
          "2024-07",
          "2024-08",
          "2024-09",
          "2024-10",
          "2024-11",
          "2024-12",
          "2025-01",
          "2025-02",
          "2025-03",
          "2025-04"
         ],
         "xaxis": "x",
         "y": {
          "bdata": "LyUjGyMaHScpJx8iHhwgGh0iIhwmJiElHigrHw==",
          "dtype": "i1"
         },
         "yaxis": "y"
        }
       ],
       "layout": {
        "annotations": [
         {
          "showarrow": false,
          "text": "Max Limit (100)",
          "x": 1,
          "xanchor": "right",
          "xref": "x domain",
          "y": 100,
          "yanchor": "bottom",
          "yref": "y"
         }
        ],
        "barmode": "relative",
        "height": 400,
        "legend": {
         "tracegroupgap": 0
        },
        "shapes": [
         {
          "line": {
           "color": "red",
           "dash": "dash"
          },
          "type": "line",
          "x0": 0,
          "x1": 1,
          "xref": "x domain",
          "y0": 100,
          "y1": 100,
          "yref": "y"
         }
        ],
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "fillpattern": {
             "fillmode": "overlay",
             "size": 10,
             "solidity": 0.2
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermap": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermap"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "Number of Transactions per Month"
        },
        "xaxis": {
         "anchor": "y",
         "domain": [
          0,
          1
         ],
         "tickangle": -45,
         "title": {
          "text": "Month (YYYY-MM)"
         }
        },
        "yaxis": {
         "anchor": "x",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "Number of Transactions"
         }
        }
       }
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO: Monthly row counts are within the limit (<= 100).\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Row Count Validation ---\n",
      "Maximum rows found in a single month: 47\n",
      "Total rows generated: 951\n"
     ]
    }
   ],
   "source": [
    "if not df.empty and 'month' in df.columns:\n",
    "    monthly_row_counts = df.groupby('month').size().reset_index(name='transaction_count')\n",
    "\n",
    "    fig_row_counts = px.bar(monthly_row_counts, x='month', y='transaction_count',\n",
    "                            title='Number of Transactions per Month',\n",
    "                            labels={'month': 'Month (YYYY-MM)', 'transaction_count': 'Number of Transactions'},\n",
    "                            height=400)\n",
    "    fig_row_counts.add_hline(y=100, line_dash=\"dash\", line_color=\"red\", annotation_text=\"Max Limit (100)\")\n",
    "    fig_row_counts.update_layout(xaxis_tickangle=-45)\n",
    "    fig_row_counts.show() # Display inline\n",
    "\n",
    "    # Save image (Commented out)\n",
    "    # try:\n",
    "    #     img_path = IMG_DIR / \"monthly_transaction_counts.png\"\n",
    "    #     fig_row_counts.write_image(img_path)\n",
    "    #     logging.info(f\"Saved monthly row counts plot to {img_path}\")\n",
    "    # except Exception as e:\n",
    "    #     logging.error(f\"Failed to save monthly row counts plot: {e}\")\n",
    "\n",
    "\n",
    "    # Discrepancy Check\n",
    "    max_rows_in_month = monthly_row_counts['transaction_count'].max()\n",
    "    print(f\"\\n--- Row Count Validation ---\")\n",
    "    print(f\"Maximum rows found in a single month: {max_rows_in_month}\")\n",
    "    if max_rows_in_month > 100:\n",
    "        exceeding_months = monthly_row_counts[monthly_row_counts['transaction_count'] > 100]['month'].tolist()\n",
    "        logging.error(f\"Monthly row count limit (>100) EXCEEDED! Max found: {max_rows_in_month}. Check months: {exceeding_months}\")\n",
    "    else:\n",
    "        logging.info(\"Monthly row counts are within the limit (<= 100).\")\n",
    "\n",
    "    total_rows = df.shape[0]\n",
    "    print(f\"Total rows generated: {total_rows}\")\n",
    "\n",
    "else:\n",
    "    print(\"Skipping row count validation.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9e3fde44",
   "metadata": {},
   "source": [
    "## 4. Constraint Validation: Monthly Totals\n",
    "\n",
    "Verify if the total spending per month falls within the target range of ₹60,000 - ₹120,000."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "48fd2dc7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "hovertemplate": "Month (YYYY-MM)=%{x}<br>Total Amount (INR)=%{y}<extra></extra>",
         "legendgroup": "",
         "marker": {
          "color": "#636efa",
          "pattern": {
           "shape": ""
          }
         },
         "name": "",
         "orientation": "v",
         "showlegend": false,
         "textposition": "auto",
         "type": "bar",
         "x": [
          "2023-01",
          "2023-02",
          "2023-03",
          "2023-04",
          "2023-05",
          "2023-06",
          "2023-07",
          "2023-08",
          "2023-09",
          "2023-10",
          "2023-11",
          "2023-12",
          "2024-01",
          "2024-02",
          "2024-03",
          "2024-04",
          "2024-05",
          "2024-06",
          "2024-07",
          "2024-08",
          "2024-09",
          "2024-10",
          "2024-11",
          "2024-12",
          "2025-01",
          "2025-02",
          "2025-03",
          "2025-04"
         ],
         "xaxis": "x",
         "y": {
          "bdata": "16NwPVrD/kCkcD0KD/j+QM3MzMxcKgZBCtejcLkA/0D2KFyPsrH+QPYoXI/+Wv9ASOF6FD4m/0CamZmZ2V7/QFK4HoUzHgZBhetRuE4C/0CamZmZTTb/QIXrUbhWxf5A61G4HksjAEHsUbgeFU7/QD4K16MyYQZBzczMzDzO/0AfhetRWNz+QNejcD22GP9AH4XrURwg/0DhehSuI7P9QBSuR+EaTQZB9ihcj96d/UAfhetRhCj/QOtRuB4ZPf5AAAAAABQV/0BxPQrXJxb+QEjhehTiCwZBj8L1KKS0/kA=",
          "dtype": "f8"
         },
         "yaxis": "y"
        }
       ],
       "layout": {
        "annotations": [
         {
          "showarrow": false,
          "text": "Min Target (60k)",
          "x": 1,
          "xanchor": "right",
          "xref": "x domain",
          "y": 60000,
          "yanchor": "bottom",
          "yref": "y"
         },
         {
          "showarrow": false,
          "text": "Max Target (120k)",
          "x": 1,
          "xanchor": "right",
          "xref": "x domain",
          "y": 120000,
          "yanchor": "bottom",
          "yref": "y"
         }
        ],
        "barmode": "relative",
        "height": 400,
        "legend": {
         "tracegroupgap": 0
        },
        "shapes": [
         {
          "line": {
           "color": "orange",
           "dash": "dash"
          },
          "type": "line",
          "x0": 0,
          "x1": 1,
          "xref": "x domain",
          "y0": 60000,
          "y1": 60000,
          "yref": "y"
         },
         {
          "line": {
           "color": "red",
           "dash": "dash"
          },
          "type": "line",
          "x0": 0,
          "x1": 1,
          "xref": "x domain",
          "y0": 120000,
          "y1": 120000,
          "yref": "y"
         }
        ],
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "fillpattern": {
             "fillmode": "overlay",
             "size": 10,
             "solidity": 0.2
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermap": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermap"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "Total Spending per Month"
        },
        "xaxis": {
         "anchor": "y",
         "domain": [
          0,
          1
         ],
         "tickangle": -45,
         "title": {
          "text": "Month (YYYY-MM)"
         }
        },
        "yaxis": {
         "anchor": "x",
         "domain": [
          0,
          1
         ],
         "tickprefix": "₹",
         "title": {
          "text": "Total Amount (INR)"
         }
        }
       }
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO: All monthly totals meet or exceed the minimum target (₹60,000).\n",
      "ERROR: 22 months found SIGNIFICANTLY ABOVE ₹120,000 target (>5% overshoot): ['2023-01', '2023-02', '2023-03', '2023-04', '2023-06', '2023-07', '2023-08', '2023-09', '2023-10', '2023-11', '2023-12', '2024-01', '2024-02', '2024-03', '2024-04', '2024-05', '2024-06', '2024-07', '2024-09', '2024-11', '2025-01', '2025-03']\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Monthly Total Validation ---\n",
      "Minimum monthly total found: ₹121,309.91\n",
      "Maximum monthly total found: ₹183,334.33\n"
     ]
    }
   ],
   "source": [
    "if not df.empty and 'month' in df.columns and 'amount' in df.columns:\n",
    "    monthly_totals = df.groupby('month')['amount'].sum().reset_index(name='total_amount')\n",
    "\n",
    "    fig_monthly_totals = px.bar(monthly_totals, x='month', y='total_amount',\n",
    "                                title='Total Spending per Month',\n",
    "                                labels={'month': 'Month (YYYY-MM)', 'total_amount': 'Total Amount (INR)'},\n",
    "                                height=400)\n",
    "    fig_monthly_totals.add_hline(y=60000, line_dash=\"dash\", line_color=\"orange\", annotation_text=\"Min Target (60k)\")\n",
    "    fig_monthly_totals.add_hline(y=120000, line_dash=\"dash\", line_color=\"red\", annotation_text=\"Max Target (120k)\")\n",
    "    fig_monthly_totals.update_layout(yaxis_tickprefix=\"₹\", xaxis_tickangle=-45)\n",
    "    fig_monthly_totals.show() # Display inline\n",
    "\n",
    "    # Save image (Commented out)\n",
    "    # try:\n",
    "    #     img_path = IMG_DIR / \"monthly_total_spending.png\"\n",
    "    #     fig_monthly_totals.write_image(img_path)\n",
    "    #     logging.info(f\"Saved monthly total spending plot to {img_path}\")\n",
    "    # except Exception as e:\n",
    "    #     logging.error(f\"Failed to save monthly total spending plot: {e}\")\n",
    "\n",
    "    # Discrepancy Check\n",
    "    min_monthly_total = monthly_totals['total_amount'].min()\n",
    "    max_monthly_total = monthly_totals['total_amount'].max()\n",
    "    months_below_min = monthly_totals[monthly_totals['total_amount'] < 60000]\n",
    "    months_above_max = monthly_totals[monthly_totals['total_amount'] > 120000]\n",
    "\n",
    "    print(f\"\\n--- Monthly Total Validation ---\")\n",
    "    print(f\"Minimum monthly total found: ₹{min_monthly_total:,.2f}\")\n",
    "    print(f\"Maximum monthly total found: ₹{max_monthly_total:,.2f}\")\n",
    "\n",
    "    if not months_below_min.empty:\n",
    "        logging.warning(f\"{len(months_below_min)} months found BELOW ₹60,000 target: {months_below_min['month'].tolist()}\")\n",
    "    else:\n",
    "        logging.info(\"All monthly totals meet or exceed the minimum target (₹60,000).\")\n",
    "\n",
    "    if not months_above_max.empty:\n",
    "        # Allow slightly above (e.g. 5%) due to fixed costs potentially pushing it over\n",
    "        months_significantly_above_max = monthly_totals[monthly_totals['total_amount'] > 120000 * 1.05]\n",
    "        if not months_significantly_above_max.empty:\n",
    "            logging.error(f\"{len(months_significantly_above_max)} months found SIGNIFICANTLY ABOVE ₹120,000 target (>5% overshoot): {months_significantly_above_max['month'].tolist()}\")\n",
    "        else:\n",
    "            logging.warning(f\"{len(months_above_max)} months found slightly above ₹120,000 target (<=5% overshoot - check if acceptable): {months_above_max['month'].tolist()}\")\n",
    "    else:\n",
    "        logging.info(\"All monthly totals are within or acceptably close to the maximum target (<= ₹120,000).\")\n",
    "else:\n",
    "    print(\"Skipping monthly total validation.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83bfb2b9",
   "metadata": {},
   "source": [
    "## 5. Mapping Validation: User vs. Account\n",
    "\n",
    "Ensure that the `user` column correctly corresponds to the `account` column based on the metadata rules."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "3965f380",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- User-Account Mapping Validation ---\n",
      "Observed User-Account Combinations (Transaction Counts):\n",
      "account  Anirban-ICICI  Anirban-SBI  Puspita-Bandhan  Puspita-SBI\n",
      "user                                                             \n",
      "Anirban            412          101                0            0\n",
      "Puspita              0            0               62          376\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "0d0d09cefa9a4d088150bc1871e4b369",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Checking User-Account:   0%|          | 0/951 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO: User-Account mapping appears consistent with metadata for all transactions.\n"
     ]
    }
   ],
   "source": [
    "if not df.empty and metadata and 'User' in metadata:\n",
    "    print(\"\\n--- User-Account Mapping Validation ---\")\n",
    "    # Display counts of each combination\n",
    "    user_account_crosstab = pd.crosstab(df['user'], df['account'])\n",
    "    print(\"Observed User-Account Combinations (Transaction Counts):\")\n",
    "    print(user_account_crosstab)\n",
    "\n",
    "    # Discrepancy Check against metadata\n",
    "    valid_map = metadata.get(\"User\", {})\n",
    "    invalid_combos_found = False\n",
    "    checked_accounts = set()\n",
    "\n",
    "    # Use tqdm if iterating over many rows, otherwise direct iteration is fine\n",
    "    from tqdm.notebook import tqdm # Use notebook version\n",
    "    for index, row in tqdm(df.iterrows(), total=df.shape[0], desc=\"Checking User-Account\"):\n",
    "    # for index, row in df.iterrows(): # Direct iteration for <2500 rows is okay\n",
    "        account = row['account']\n",
    "        user = row['user']\n",
    "        # Avoid re-checking same account if metadata is missing\n",
    "        if account in checked_accounts: continue\n",
    "\n",
    "        expected_user = valid_map.get(account)\n",
    "\n",
    "        if expected_user is None:\n",
    "            logging.error(f\"FATAL: Account '{account}' found in data but MISSING in metadata User map! Cannot validate.\")\n",
    "            invalid_combos_found = True\n",
    "            checked_accounts.add(account) # Mark as checked to avoid repeating error\n",
    "        elif user != expected_user:\n",
    "            logging.error(f\"User-Account MISMATCH! Account: '{account}', Expected User: '{expected_user}', Found User: '{user}'. Row index: {index}\")\n",
    "            invalid_combos_found = True\n",
    "            # Don't add to checked_accounts here, allow finding more mismatches for same account if they exist\n",
    "\n",
    "    if not invalid_combos_found:\n",
    "        logging.info(\"User-Account mapping appears consistent with metadata for all transactions.\")\n",
    "    else:\n",
    "        logging.error(\"CRITICAL User-Account mapping inconsistencies detected! Review generation logic or metadata.\")\n",
    "else:\n",
    "    print(\"Skipping User-Account validation (Data or Metadata missing/incomplete).\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dddcbe0c",
   "metadata": {},
   "source": [
    "## 6. Mapping Validation: Category vs. Sub-Category\n",
    "\n",
    "Check if all non-blank `sub_category` values are valid for their corresponding `category` based on the metadata."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "19e899df",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Category-SubCategory Mapping Validation ---\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "08c39562969e4463b6d692023b8d59c3",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Checking Cat-SubCat:   0%|          | 0/951 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO: Category-SubCategory mapping appears consistent with metadata for all non-blank sub-categories.\n"
     ]
    }
   ],
   "source": [
    "if not df.empty and metadata and 'categories' in metadata:\n",
    "    print(\"\\n--- Category-SubCategory Mapping Validation ---\")\n",
    "    category_map = metadata.get(\"categories\", {})\n",
    "    invalid_subcats_found = False\n",
    "    invalid_details = [] # Store details of invalid rows\n",
    "\n",
    "    from tqdm.notebook import tqdm\n",
    "    for index, row in tqdm(df.iterrows(), total=df.shape[0], desc=\"Checking Cat-SubCat\"):\n",
    "    # for index, row in df.iterrows():\n",
    "        category = row['category']\n",
    "        sub_category = row['sub_category']\n",
    "\n",
    "        # Only validate if sub_category is present (not NaN or empty string)\n",
    "        if pd.notna(sub_category) and sub_category != \"\":\n",
    "            valid_subcats = category_map.get(category)\n",
    "\n",
    "            if valid_subcats is None:\n",
    "                detail = f\"Category '{category}' (Row {index}) not found in metadata map.\"\n",
    "                if detail not in [d[0] for d in invalid_details]: # Log category error once\n",
    "                    logging.error(detail)\n",
    "                    invalid_details.append((detail, index))\n",
    "                invalid_subcats_found = True\n",
    "            elif sub_category not in valid_subcats:\n",
    "                detail = f\"Invalid Sub-category! Category: '{category}', Found Sub-cat: '{sub_category}'. Valid: {valid_subcats}. Row Index: {index}\"\n",
    "                logging.error(detail)\n",
    "                invalid_details.append((detail, index))\n",
    "                invalid_subcats_found = True\n",
    "\n",
    "    if not invalid_subcats_found:\n",
    "        logging.info(\"Category-SubCategory mapping appears consistent with metadata for all non-blank sub-categories.\")\n",
    "    else:\n",
    "        logging.error(f\"CRITICAL Category-SubCategory mapping inconsistencies detected! Found {len(invalid_details)} issues.\")\n",
    "        # print(\"\\nSample Invalid Details:\")\n",
    "        # for detail, idx in invalid_details[:min(5, len(invalid_details))]:\n",
    "        #     print(f\"- {detail}\")\n",
    "else:\n",
    "    print(\"Skipping Category-SubCategory validation (Data or Metadata missing/incomplete).\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1624e291",
   "metadata": {},
   "source": [
    "## 7. Fixed Expense Validation: Rent\n",
    "\n",
    "Check frequency (1/month), amount (30k), payer (Anirban/ICICI)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "409a5dfe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Rent Validation ---\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO: Rent transactions appear correct (Amount, Payer, Frequency).\n"
     ]
    },
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "hovertemplate": "month=%{x}<br>count=%{y}<extra></extra>",
         "legendgroup": "",
         "marker": {
          "color": "#636efa",
          "pattern": {
           "shape": ""
          }
         },
         "name": "",
         "orientation": "v",
         "showlegend": false,
         "textposition": "auto",
         "type": "bar",
         "x": [
          "2023-01",
          "2023-02",
          "2023-03",
          "2023-04",
          "2023-05",
          "2023-06",
          "2023-07",
          "2023-08",
          "2023-09",
          "2023-10",
          "2023-11",
          "2023-12",
          "2024-01",
          "2024-02",
          "2024-03",
          "2024-04",
          "2024-05",
          "2024-06",
          "2024-07",
          "2024-08",
          "2024-09",
          "2024-10",
          "2024-11",
          "2024-12",
          "2025-01",
          "2025-02",
          "2025-03",
          "2025-04"
         ],
         "xaxis": "x",
         "y": {
          "bdata": "AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQ==",
          "dtype": "i1"
         },
         "yaxis": "y"
        }
       ],
       "layout": {
        "barmode": "relative",
        "height": 300,
        "legend": {
         "tracegroupgap": 0
        },
        "showlegend": false,
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "fillpattern": {
             "fillmode": "overlay",
             "size": 10,
             "solidity": 0.2
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermap": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermap"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "Monthly Rent Transaction Count"
        },
        "xaxis": {
         "anchor": "y",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "Month (YYYY-MM)"
         }
        },
        "yaxis": {
         "anchor": "x",
         "domain": [
          0,
          1
         ],
         "dtick": 1,
         "tickmode": "linear",
         "title": {
          "text": "Count"
         }
        }
       }
      }
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "if not df.empty and 'month' in df.columns:\n",
    "    print(\"\\n--- Rent Validation ---\")\n",
    "    rent_df = df[(df['category'] == 'Rent') & (df['sub_category'] == 'House Rent')].copy()\n",
    "\n",
    "    if rent_df.empty:\n",
    "        logging.warning(\"No Rent transactions found!\")\n",
    "    else:\n",
    "        valid = True\n",
    "        # Check Amount\n",
    "        if not (rent_df['amount'] == 30000).all():\n",
    "            logging.error(f\"Rent amount incorrect! Found values != 30000: {rent_df[rent_df['amount'] != 30000]['amount'].unique()}\")\n",
    "            valid = False\n",
    "        # Check User/Account\n",
    "        if not ((rent_df['user'] == 'Anirban') & (rent_df['account'] == 'Anirban-ICICI')).all():\n",
    "            logging.error(f\"Rent payer incorrect! Found instances not paid by Anirban/Anirban-ICICI.\")\n",
    "            valid = False\n",
    "        # Check Frequency\n",
    "        rent_monthly_counts = rent_df.groupby('month').size()\n",
    "        if (rent_monthly_counts != 1).any():\n",
    "            logging.error(f\"Rent frequency incorrect! Months with counts != 1: {rent_monthly_counts[rent_monthly_counts != 1].index.tolist()}\")\n",
    "            valid = False\n",
    "\n",
    "        if valid:\n",
    "            logging.info(\"Rent transactions appear correct (Amount, Payer, Frequency).\")\n",
    "\n",
    "        # Visualize counts even if correct\n",
    "        fig_rent_counts = px.bar(rent_monthly_counts.reset_index(name='count'), x='month', y='count', title='Monthly Rent Transaction Count', height=300)\n",
    "        fig_rent_counts.update_layout(yaxis_title='Count', xaxis_title='Month (YYYY-MM)', showlegend=False, yaxis=dict(tickmode='linear', dtick=1))\n",
    "        fig_rent_counts.show() # Display inline\n",
    "        # try: fig_rent_counts.write_image(IMG_DIR / \"rent_monthly_counts.png\") # Commented out\n",
    "        # except Exception as e: logging.error(f\"Failed to save rent counts plot: {e}\")\n",
    "\n",
    "else:\n",
    "    print(\"Skipping Rent validation.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "094e3696",
   "metadata": {},
   "source": [
    "## 8. Fixed Expense Validation: SIP & ULIP\n",
    "\n",
    "Check monthly frequency, amounts (SIP=3k, ULIP=4k), and payer (Anirban-ICICI)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "e631899a",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO: SIP transactions appear correct (Amount, Payer, Frequency<=1). Check warnings for missed months.\n",
      "INFO: ULIP transactions appear correct (Amount, Payer, Frequency<=1). Check warnings for missed months.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- SIP & ULIP Validation ---\n"
     ]
    }
   ],
   "source": [
    "if not df.empty and 'month' in df.columns:\n",
    "    print(\"\\n--- SIP & ULIP Validation ---\")\n",
    "    sip_df = df[(df['category'] == 'Investment') & (df['sub_category'] == 'SIP')].copy()\n",
    "    ulip_df = df[(df['category'] == 'Insurance Premium') & (df['sub_category'] == 'ULIP')].copy()\n",
    "    valid_sip = True; valid_ulip = True\n",
    "\n",
    "    # --- SIP ---\n",
    "    if sip_df.empty: logging.warning(\"No SIP transactions found!\")\n",
    "    else:\n",
    "        if not (sip_df['amount'] == 3000).all(): logging.error(f\"SIP amount incorrect! Found values != 3000.\"); valid_sip = False\n",
    "        if not ((sip_df['user'] == 'Anirban') & (sip_df['account'] == 'Anirban-ICICI')).all(): logging.error(\"SIP payer incorrect!\"); valid_sip = False\n",
    "        sip_counts = sip_df.groupby('month').size()\n",
    "        if (sip_counts > 1).any(): logging.error(f\"SIP frequency incorrect (>1 per month)!\"); valid_sip = False\n",
    "        # Check for missing months more accurately\n",
    "        all_months_in_data = set(df['month'].unique()) # Get all unique months from the main dataframe\n",
    "        sip_months_found = set(sip_df['month'].unique())\n",
    "        missing_sip_months = all_months_in_data - sip_months_found\n",
    "        if missing_sip_months and valid_sip: logging.warning(f\"SIP seems missing in {len(missing_sip_months)} months: {sorted(list(missing_sip_months))[:5]}...\")\n",
    "\n",
    "        if valid_sip: logging.info(\"SIP transactions appear correct (Amount, Payer, Frequency<=1). Check warnings for missed months.\")\n",
    "\n",
    "    # --- ULIP ---\n",
    "    if ulip_df.empty: logging.warning(\"No ULIP transactions found!\")\n",
    "    else:\n",
    "        if not (ulip_df['amount'] == 4000).all(): logging.error(f\"ULIP amount incorrect! Found values != 4000.\"); valid_ulip = False\n",
    "        if not ((ulip_df['user'] == 'Anirban') & (ulip_df['account'] == 'Anirban-ICICI')).all(): logging.error(\"ULIP payer incorrect!\"); valid_ulip = False\n",
    "        ulip_counts = ulip_df.groupby('month').size()\n",
    "        if (ulip_counts > 1).any(): logging.error(f\"ULIP frequency incorrect (>1 per month)!\"); valid_ulip = False\n",
    "        ulip_months_found = set(ulip_df['month'].unique())\n",
    "        missing_ulip_months = all_months_in_data - ulip_months_found\n",
    "        if missing_ulip_months and valid_ulip: logging.warning(f\"ULIP seems missing in {len(missing_ulip_months)} months: {sorted(list(missing_ulip_months))[:5]}...\")\n",
    "\n",
    "        if valid_ulip: logging.info(\"ULIP transactions appear correct (Amount, Payer, Frequency<=1). Check warnings for missed months.\")\n",
    "\n",
    "else:\n",
    "    print(\"Skipping SIP/ULIP validation.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c01f665e",
   "metadata": {},
   "source": [
    "## 9. Fixed Expense Validation: Maid Salary\n",
    "\n",
    "Check monthly frequency (once), amount (₹2500), and payer (Puspita-SBI)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "e335ad6d",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO: Maid Salary transactions appear correct.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Maid Salary Validation ---\n"
     ]
    }
   ],
   "source": [
    "if not df.empty and 'month' in df.columns:\n",
    "    print(\"\\n--- Maid Salary Validation ---\")\n",
    "    maid_df = df[(df['category'] == 'Household') & (df['sub_category'] == 'Maid')].copy()\n",
    "    valid_maid = True\n",
    "\n",
    "    if maid_df.empty: logging.warning(\"No Maid transactions found!\")\n",
    "    else:\n",
    "        if not (maid_df['amount'] == 2500).all(): logging.error(f\"Maid amount incorrect!\"); valid_maid = False\n",
    "        if not ((maid_df['user'] == 'Puspita') & (maid_df['account'] == 'Puspita-SBI')).all(): logging.error(\"Maid payer incorrect!\"); valid_maid = False\n",
    "        maid_counts = maid_df.groupby('month').size()\n",
    "        if (maid_counts != 1).any(): logging.error(f\"Maid frequency incorrect (!=1 per month)!\"); valid_maid = False\n",
    "        if valid_maid: logging.info(\"Maid Salary transactions appear correct.\")\n",
    "else:\n",
    "    print(\"Skipping Maid Salary validation.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4cedf86b",
   "metadata": {},
   "source": [
    "## 10. Ad-hoc Amount Distribution: Key Categories (Box Plot)\n",
    "\n",
    "Visualize amount distributions for major variable spending areas."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "68829a91",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Ad-hoc Amount Distributions (Box Plots) ---\n"
     ]
    },
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "alignmentgroup": "True",
         "boxpoints": "outliers",
         "hovertemplate": "Category=%{x}<br>Amount (INR)=%{y}<extra></extra>",
         "legendgroup": "",
         "marker": {
          "color": "#636efa"
         },
         "name": "",
         "notched": false,
         "offsetgroup": "",
         "orientation": "v",
         "showlegend": false,
         "type": "box",
         "x": [
          "Grocery",
          "Grocery",
          "Restaurant",
          "Travel",
          "Grocery",
          "Travel",
          "Household",
          "Grocery",
          "Grocery",
          "Grocery",
          "Household",
          "Shopping",
          "Shopping",
          "Travel",
          "Travel",
          "Shopping",
          "Household",
          "Travel",
          "Grocery",
          "Restaurant",
          "Travel",
          "Grocery",
          "Shopping",
          "Grocery",
          "Restaurant",
          "Entertainment",
          "Shopping",
          "Household",
          "Restaurant",
          "Household",
          "Grocery",
          "Restaurant",
          "Restaurant",
          "Grocery",
          "Household",
          "Health",
          "Entertainment",
          "Shopping",
          "Travel",
          "Restaurant",
          "Entertainment",
          "Travel",
          "Household",
          "Grocery",
          "Health",
          "Travel",
          "Restaurant",
          "Grocery",
          "Entertainment",
          "Grocery",
          "Travel",
          "Entertainment",
          "Travel",
          "Health",
          "Restaurant",
          "Grocery",
          "Household",
          "Household",
          "Health",
          "Travel",
          "Shopping",
          "Travel",
          "Grocery",
          "Grocery",
          "Shopping",
          "Travel",
          "Travel",
          "Travel",
          "Household",
          "Travel",
          "Household",
          "Shopping",
          "Grocery",
          "Grocery",
          "Health",
          "Shopping",
          "Household",
          "Travel",
          "Grocery",
          "Household",
          "Shopping",
          "Restaurant",
          "Shopping",
          "Grocery",
          "Restaurant",
          "Grocery",
          "Health",
          "Household",
          "Travel",
          "Health",
          "Shopping",
          "Grocery",
          "Shopping",
          "Household",
          "Shopping",
          "Shopping",
          "Shopping",
          "Travel",
          "Health",
          "Household",
          "Shopping",
          "Travel",
          "Entertainment",
          "Household",
          "Shopping",
          "Health",
          "Travel",
          "Restaurant",
          "Household",
          "Health",
          "Household",
          "Travel",
          "Restaurant",
          "Travel",
          "Travel",
          "Restaurant",
          "Grocery",
          "Travel",
          "Travel",
          "Household",
          "Household",
          "Travel",
          "Shopping",
          "Travel",
          "Entertainment",
          "Household",
          "Travel",
          "Restaurant",
          "Restaurant",
          "Travel",
          "Shopping",
          "Shopping",
          "Household",
          "Shopping",
          "Shopping",
          "Household",
          "Household",
          "Grocery",
          "Travel",
          "Grocery",
          "Household",
          "Travel",
          "Health",
          "Grocery",
          "Shopping",
          "Household",
          "Household",
          "Entertainment",
          "Travel",
          "Travel",
          "Health",
          "Entertainment",
          "Household",
          "Travel",
          "Travel",
          "Travel",
          "Grocery",
          "Household",
          "Grocery",
          "Health",
          "Health",
          "Travel",
          "Travel",
          "Travel",
          "Household",
          "Shopping",
          "Household",
          "Shopping",
          "Restaurant",
          "Household",
          "Health",
          "Travel",
          "Travel",
          "Household",
          "Grocery",
          "Restaurant",
          "Travel",
          "Health",
          "Grocery",
          "Travel",
          "Household",
          "Household",
          "Travel",
          "Grocery",
          "Grocery",
          "Grocery",
          "Entertainment",
          "Shopping",
          "Travel",
          "Household",
          "Travel",
          "Health",
          "Shopping",
          "Shopping",
          "Shopping",
          "Travel",
          "Household",
          "Restaurant",
          "Restaurant",
          "Travel",
          "Grocery",
          "Restaurant",
          "Travel",
          "Household",
          "Shopping",
          "Restaurant",
          "Health",
          "Household",
          "Shopping",
          "Household",
          "Travel",
          "Restaurant",
          "Health",
          "Travel",
          "Household",
          "Travel",
          "Grocery",
          "Travel",
          "Travel",
          "Restaurant",
          "Restaurant",
          "Household",
          "Household",
          "Travel",
          "Shopping",
          "Travel",
          "Health",
          "Grocery",
          "Restaurant",
          "Travel",
          "Travel",
          "Restaurant",
          "Restaurant",
          "Restaurant",
          "Travel",
          "Grocery",
          "Restaurant",
          "Household",
          "Restaurant",
          "Travel",
          "Shopping",
          "Grocery",
          "Entertainment",
          "Household",
          "Grocery",
          "Shopping",
          "Shopping",
          "Shopping",
          "Household",
          "Household",
          "Shopping",
          "Shopping",
          "Travel",
          "Grocery",
          "Grocery",
          "Shopping",
          "Health",
          "Shopping",
          "Health",
          "Shopping",
          "Household",
          "Shopping",
          "Travel",
          "Restaurant",
          "Restaurant",
          "Travel",
          "Travel",
          "Travel",
          "Shopping",
          "Travel",
          "Household",
          "Household",
          "Travel",
          "Travel",
          "Grocery",
          "Shopping",
          "Shopping",
          "Health",
          "Household",
          "Entertainment",
          "Restaurant",
          "Household",
          "Restaurant",
          "Travel",
          "Travel",
          "Travel",
          "Grocery",
          "Household",
          "Grocery",
          "Household",
          "Grocery",
          "Travel",
          "Grocery",
          "Travel",
          "Travel",
          "Health",
          "Household",
          "Household",
          "Travel",
          "Restaurant",
          "Travel",
          "Travel",
          "Shopping",
          "Restaurant",
          "Shopping",
          "Health",
          "Travel",
          "Household",
          "Shopping",
          "Household",
          "Shopping",
          "Grocery",
          "Grocery",
          "Travel",
          "Shopping",
          "Travel",
          "Shopping",
          "Travel",
          "Household",
          "Grocery",
          "Travel",
          "Household",
          "Shopping",
          "Restaurant",
          "Restaurant",
          "Shopping",
          "Shopping",
          "Health",
          "Restaurant",
          "Shopping",
          "Shopping",
          "Household",
          "Travel",
          "Shopping",
          "Health",
          "Travel",
          "Household",
          "Restaurant",
          "Household",
          "Travel",
          "Travel",
          "Restaurant",
          "Household",
          "Travel",
          "Restaurant",
          "Shopping",
          "Health",
          "Travel",
          "Travel",
          "Travel",
          "Household",
          "Shopping",
          "Grocery",
          "Travel",
          "Travel",
          "Restaurant",
          "Household",
          "Grocery",
          "Shopping",
          "Travel",
          "Shopping",
          "Travel",
          "Grocery",
          "Shopping",
          "Entertainment",
          "Restaurant",
          "Travel",
          "Shopping",
          "Household",
          "Household",
          "Restaurant",
          "Entertainment",
          "Grocery",
          "Restaurant",
          "Travel",
          "Grocery",
          "Travel",
          "Grocery",
          "Grocery",
          "Grocery",
          "Health",
          "Shopping",
          "Household",
          "Travel",
          "Shopping",
          "Health",
          "Travel",
          "Entertainment",
          "Household",
          "Shopping",
          "Grocery",
          "Household",
          "Restaurant",
          "Shopping",
          "Shopping",
          "Restaurant",
          "Shopping",
          "Travel",
          "Grocery",
          "Household",
          "Entertainment",
          "Travel",
          "Household",
          "Health",
          "Travel",
          "Restaurant",
          "Shopping",
          "Health",
          "Shopping",
          "Shopping",
          "Travel",
          "Shopping",
          "Restaurant",
          "Entertainment",
          "Health",
          "Shopping",
          "Restaurant",
          "Entertainment",
          "Household",
          "Household",
          "Shopping",
          "Shopping",
          "Shopping",
          "Household",
          "Health",
          "Restaurant",
          "Household",
          "Travel",
          "Household",
          "Household",
          "Grocery",
          "Shopping",
          "Restaurant",
          "Household",
          "Travel",
          "Household",
          "Household",
          "Shopping",
          "Household",
          "Restaurant",
          "Household",
          "Shopping",
          "Shopping",
          "Household",
          "Household",
          "Travel",
          "Shopping",
          "Travel",
          "Restaurant",
          "Travel",
          "Travel",
          "Travel",
          "Shopping",
          "Travel",
          "Entertainment",
          "Shopping",
          "Shopping",
          "Household",
          "Grocery",
          "Shopping",
          "Entertainment",
          "Household",
          "Grocery",
          "Household",
          "Restaurant",
          "Shopping",
          "Grocery",
          "Health",
          "Grocery",
          "Entertainment",
          "Restaurant",
          "Health",
          "Grocery",
          "Restaurant",
          "Household",
          "Grocery",
          "Health",
          "Travel",
          "Shopping",
          "Health",
          "Travel",
          "Grocery",
          "Shopping",
          "Shopping",
          "Travel",
          "Household",
          "Health",
          "Travel",
          "Health",
          "Shopping",
          "Shopping",
          "Travel",
          "Household",
          "Household",
          "Health",
          "Restaurant",
          "Household",
          "Entertainment",
          "Travel",
          "Household",
          "Shopping",
          "Entertainment",
          "Travel",
          "Health",
          "Shopping",
          "Entertainment",
          "Entertainment",
          "Shopping",
          "Restaurant",
          "Household",
          "Health",
          "Entertainment",
          "Grocery",
          "Shopping",
          "Health",
          "Household",
          "Shopping",
          "Health",
          "Shopping",
          "Grocery",
          "Household",
          "Household",
          "Travel",
          "Household",
          "Travel",
          "Travel",
          "Entertainment",
          "Shopping",
          "Shopping",
          "Shopping",
          "Travel",
          "Travel",
          "Health",
          "Travel",
          "Grocery",
          "Grocery",
          "Travel",
          "Travel",
          "Entertainment",
          "Restaurant",
          "Shopping",
          "Shopping",
          "Travel",
          "Health",
          "Health",
          "Shopping",
          "Health",
          "Shopping",
          "Shopping",
          "Health",
          "Household",
          "Household",
          "Shopping",
          "Restaurant",
          "Entertainment",
          "Travel",
          "Grocery",
          "Shopping",
          "Travel",
          "Grocery",
          "Travel",
          "Travel",
          "Health",
          "Household",
          "Restaurant",
          "Shopping",
          "Restaurant",
          "Travel",
          "Household",
          "Health",
          "Shopping",
          "Grocery",
          "Household",
          "Household",
          "Household",
          "Travel",
          "Shopping",
          "Restaurant",
          "Travel",
          "Travel",
          "Travel",
          "Travel",
          "Travel",
          "Restaurant",
          "Household",
          "Household",
          "Household",
          "Household",
          "Travel",
          "Household",
          "Grocery",
          "Shopping",
          "Travel",
          "Grocery",
          "Household",
          "Restaurant",
          "Travel",
          "Travel",
          "Grocery",
          "Household",
          "Restaurant",
          "Grocery",
          "Shopping",
          "Travel",
          "Household",
          "Travel",
          "Restaurant",
          "Shopping",
          "Household",
          "Shopping",
          "Entertainment",
          "Travel",
          "Travel",
          "Restaurant",
          "Entertainment",
          "Restaurant",
          "Household",
          "Travel",
          "Restaurant",
          "Shopping",
          "Travel",
          "Restaurant",
          "Restaurant",
          "Shopping",
          "Travel",
          "Shopping",
          "Grocery",
          "Restaurant",
          "Household",
          "Travel",
          "Grocery",
          "Entertainment",
          "Shopping",
          "Entertainment",
          "Shopping",
          "Restaurant",
          "Grocery",
          "Restaurant",
          "Household",
          "Entertainment",
          "Grocery",
          "Restaurant",
          "Travel"
         ],
         "x0": " ",
         "xaxis": "x",
         "y": {
          "bdata": "uB6F61GwgEAzMzMzM9KmQM3MzMzMhopAuB6F61EElkApXI/C9VabQIXrUbge5VBAZmZmZmZUhEDsUbgehVGKQPYoXI9CCK9APQrXo3A3h0AzMzMzsy2hQFyPwvUotbJA7FG4HkUHsUApXI/C9QR6QKRwPQoXUbJApHA9ChddsUCamZmZmSuRQAAAAAAAMG5ASOF6FK53bEBxPQrXo+6OQB+F61G4EIRA4XoUrkdHlUDNzMzMjOqyQLgehevRMqVAXI/C9SgYekBI4XoULuenQK5H4XoUYaNAAAAAAAC/lECF61G4HsWIQMP1KFxPWLdA16NwPQpfckDNzMzMzN+aQHE9CtejOoFApHA9Ctc5i0ApXI/C9W2QQOxRuB6F44BAPQrXo3CDpECuR+F61G63QFyPwvWo9bBArkfhehTslkDhehSux5qmQB+F61G4cntA9ihcj8JcmUBcj8L1KNSEQClcj8L1DbFAuB6F61H0ckAzMzMzM9dyQNejcD0Kj45AH4XrUbhDk0DsUbgehWanQBSuR+H6DcZAhetRuJ7LrkCkcD0KV1auQBSuR+G6xbZAKVyPwvVwfEAUrkfheiilQArXo3C93qRAFK5H4XosZUB7FK5HYfa1QOxRuB6FlpdAPQrXo3B7g0A9Ctej8BSqQHE9CtejDaNAuB6F61G4lEAK16Nw/e+/QIXrUbgeTWNAZmZmZmZSeEBI4XoUrnytQFyPwvVoFLBAPQrXo3Abr0C4HoXrUZhhQOF6FK5HXK9A4XoUrkcKk0AUrkfhejyhQClcj8I14bFA9ihcj8JOlkDD9ShcD/GgQOxRuB7FhLhAMzMzMzPffECuR+F6FJaUQD0K16NwTJdACtejcD3EgkBSuB6Fy2LLQHE9CtejGH5AAAAAAAAce0B7FK5H4TJxQDMzMzOzYKZACtejcD0JlUC4HoXrkYDGQB+F61G4TJZAAAAAAOD6xUCF61G4nvKkQFyPwvUo5o1ArkfhetTMsEAAAAAAAH+XQOF6FK5H3KpAXI/C9QiQwUBcj8L1KMmSQDMzMzMzmaRAZmZmZmazmEBSuB6Fa8quQMP1KFyPSmVA4XoUrkclmEAzMzMzM39/QIXrUbhemMRAZmZmZmanlUApXI/C9XhjQNejcD0KV6FAPQrXo3DriEAK16Nw/cm7QM3MzMzM3aBAhetRuF7EvkBI4XoUrludQNejcD2K671ArkfhehRuT0DXo3A9Ch9oQArXo3A9ml1AmpmZmZn2k0CF61G4nlGyQGZmZmZm7IRASOF6FK4RnED2KFyPwhKVQLgehetRPLJAAAAAAIB7w0DXo3A9CgmMQPYoXI/Cka9AMzMzM7M0p0DsUbgehamhQJqZmZmZCVVAMzMzM3O2t0DXo3A9CmimQFyPwvXo58JAw/UoXI/qbUDhehSuRzVzQArXo3C9Da9A9ihcj4KRsEBI4XoUrtqZQNejcD0Kr2tAH4XrUfhVykCkcD0K1zmMQClcj8L1jI1AZmZmZnY72ECPwvUoPC7AQDMzMzMz239AzczMzMxBlEBxPQrXo6OSQI/C9ShcZ25Aw/UoXI/8p0CamZmZOYzBQClcj8IVkcNAcT0K16NQjkAfhetRuKKPQK5H4Xp0Z8BAPQrXo3A9TkDhehSuh5uwQKRwPQpX1a5ArkfhehSqhkBmZmZmZsZjQOxRuB6Fa5FAZmZmZiZIwEAzMzMzM6KRQK5H4XoUuqlAw/UoXI9MkUCF61G43jm1QHsUrkfh+lNAMzMzMxMNwkDhehSuR7WfQGZmZmbmjK9ApHA9ClfmpEDsUbgehTifQFK4HoVrXaRApHA9CtcvkkDXo3A9CqygQKRwPQrXFJRA16NwPQqHe0DNzMzMzKyTQBSuR+F6ypVAw/UoXI9KjUBmZmZm5lirQMP1KFyPUnlAzczMzAxzwUBcj8L1KIiDQArXo3A91q1AKVyPwvU5kkDsUbgeBVygQGZmZmZmuZ1AMzMzMzOKoEBI4XoULiC2QB+F61G4FMRAcT0K16NGk0DNzMzMzAKGQKRwPQrX/aVApHA9CteOrECPwvUoXCGKQMP1KFyPiptA4XoUrketjUC4HoXrUUeSQHE9CtejYGRAmpmZmZkZd0CPwvUoXFidQBSuR+F6/q5APQrXo3CHlUD2KFyPwtVgQD0K16NwWJBAKVyPwvUKrECkcD0K18OeQClcj8L1cIJAuB6F61HEcECuR+F6lLW9QDMzMzMzk31A7FG4HgV3o0A9CtejcC1nQMP1KFwP+rxAhetRuB4InkCamZmZmU16QGZmZmZm3mBAUrgehes4okDD9Shcj/OlQFyPwvXo/tFAmpmZmZkBfUD2KFyPwnadQOF6FK5HfXxASOF6FK6ti0B7FK5H4S2qQOxRuB7FGcBArkfhehSSeEAK16NwfT+5QKRwPQrXk3ZAH4XrUbjnoUBmZmZmZnCWQHsUrkfhwmxA7FG4HoXzYEB7FK5H4aJwQK5H4XoUSnxAj8L1KFzGpUCamZmZmTucQArXo3A9wIJAAAAAAAB+gUDD9Shcjw56QDMzMzNT8NBAAAAAAIDsskBcj8L1KIGlQOF6FK5HLYtAj8L1KFx9lkBxPQrXIxywQHsUrkdhTapAw/UoXI+KjkDD9ShcD9anQMP1KFwPo6hAmpmZmZlBpkCkcD0KF8GxQI/C9Sic/LBAzczMzEzBpkDhehSuRzl5QNejcD0KH6dAw/UoXA9vvkCuR+F6FB6NQFK4HoXrKpxArkfhehQ8j0DNzMzMDA27QHsUrkdhvqVAexSuRyFlw0A9CtejcHCqQHE9Ctej6HpA16NwPQrPm0BI4XoUrh9wQOxRuB5lRMhApHA9CtcNmUBI4XoUTuzGQFyPwvUoRG9AXI/C9ShfokAfhetROHaiQGZmZmZmQqJAcT0K16PNlUCamZmZmZKQQMP1KFyPkq1A4XoUrkdEpkApXI/C9Rm1QClcj8L10KBA4XoUrkchn0AK16NwvYCjQHsUrkfhyZlAPQrXo3ADj0AUrkfhekR9QBSuR+F6VHlAAAAAAGCMwkAfhetRuOZvQD0K16Nw94ZAj8L1KNx3pUBI4XoUrlKjQNejcD0KD3BApHA9ClcTpUBSuB6FazCjQBSuR+G6eshAXI/C9SgAq0Bcj8L1KLWRQEjhehSuUp1A4XoUrkcDkkCPwvUoXLGZQOxRuB6Fs3xAmpmZmZn5i0AK16NwvR3HQBSuR+F6FLBAcT0K16OllUAK16NwvdStQB+F61G4T5JAj8L1KJyssUD2KFyPQtypQHsUrkdh3a5AcT0K1yNCpkCF61G4HoChQJqZmZmZfJ9AhetRuB4ZkEAAAAAAAGKGQFK4HoXrqrhAexSuR+HibEDD9Shczxy6QLgehetxUsJA16NwPQqSoEBxPQrXo5iCQFK4HoXr8dVAZmZmZmagqEBmZmZm5p+vQClcj8L1TH9A9ihcj8LNZUCPwvUoXBeYQOxRuB4lesFAhetRuB5bwEAzMzMzM9CaQMP1KFyPW55AZmZmZmb6nkDD9Shcj85zQD0K16NwMZRAH4XrUbgItkBSuB6F61CmQFK4HoXrTZRAH4XrUbgSfUCuR+F6FAZuQB+F61E48qJA16NwPYrLvECkcD0K1+NxQClcj8L1K59AZmZmZmY8g0DsUbgeBRitQB+F61G43k9A4XoUrqdTxUCPwvUoXImVQEjhehQOMsVAexSuR+GlrUAzMzMzs3enQDMzMzMzNYlA16NwPQp5tEAK16NwPfKJQD0K16OwVLtAPQrXo3AJcEBSuB6F68+fQBSuR+F6DbpAmpmZmZn/lkC4HoXrUSKtQEjhehTujMBAhetRuB7OvEAAAAAAAGB6QGZmZmZm7nNAzczMzKyCxEAzMzMzszijQM3MzMzM9HpA16NwPYqx2UAUrkfh+t6pQAAAAAAAXpdAj8L1KFygkkApXI/C9cmbQB+F61G4K5JA4XoUrkcqokDhehSuR+mBQFyPwvW45dBAAAAAAACIk0DD9Shcj6OrQNejcD0KuYhAcT0K16MPo0CamZmZmXmhQMP1KFyPRoVAFK5H4fqKtkAK16NwvXemQDMzMzMz/6xApHA9CtdKwUDXo3A9CreIQAAAAAAAwHNAZmZmZmaimEDhehSuR860QArXo3A9DpJAUrgehesxdEDXo3A9Cr9xQKRwPQrX62JA9ihcj8I9qUCPwvUoXGWtQI/C9ShcqplAKVyPwvUPnECkcD0Kd5LWQFyPwvUolHhAzczMzMw4fkCamZmZmQmLQKRwPQrXVYdAzczMzOylwkAfhetRuDSOQDMzMzMz42pA9ihcj8Jhc0CPwvUoHKu6QLgehetReZpAzczMzEyvqUDNzMzMDGaxQK5H4XoUvmxAMzMzM7NJtkB7FK5H4QZ7QAAAAADAm7JA16NwPco2sUDD9Shcj5W2QClcj8L1GFhApHA9CtdRlEAfhetR+B3GQKRwPQrX55lAmpmZmRlptkDXo3A9CqWxQArXo3A9Wq1AFK5H4XrYlkAzMzMzEzrAQNejcD0K1ZZASOF6FK6AnUBI4XoUrgN1QEjhehSuypNAj8L1KFwvc0DsUbgeBWCjQEjhehSurJZAuB6F61FQeUCPwvUoXL9RQK5H4XoUO5lAzczMzMwojECamZmZmZmaQHE9Ctej2K1ASOF6FK6dkUBcj8L1KKRoQOxRuB6FlplAFK5H4XqDqUCkcD0KF1S4QM3MzMzMar9AKVyPwnV3ukCamZmZGZagQKRwPQrXQsRAmpmZmZlKlUAUrkfheiSDQClcj8JVw8RAuB6F61H4SkCkcD0K1yCkQHsUrkdh16VA7FG4HoVHlEDsUbgehbyeQArXo3D9zbVAFK5H4bpWv0CF61G4HkWBQHE9CtejsHxAH4XrUbhIskCF61G4HkV+QD0K16Nw7JpAj8L1KFxBgkCuR+F6FHmcQClcj8L1WGlAZmZmZoYKxUCkcD0K18uFQPYoXI/CA7JACtejcD3aZ0CPwvUoXHKYQBSuR+F69IlAexSuR2HEqkBxPQrXIxKkQOxRuB6FG15AcT0K16Mpk0CPwvUoXK2EQOF6FK5H2pNAPQrXo3DWn0AfhetROFPAQOxRuB6FCYNAH4XrUbgeS0BmZmZmZr5jQOF6FK5H34NA16NwPQp3fkAUrkfheqetQM3MzMzM5JFASOF6FK7HmkCamZmZmalYQAAAAAAAzZVAFK5H4Xp1n0DsUbgexTqwQMP1KFyP4qVAmpmZmZk9cUCamZmZGSWrQI/C9ShcH5JApHA9CtcxkkCPwvUoXHacQPYoXI/CTpdA7FG4HoVFjEA9CtejcICYQBSuR+G6WLxAAAAAAADgf0B7FK5HEbDXQI/C9SjceK9AAAAAAMCGskApXI/C9c6CQMP1KFyPcq1A4XoUrkc9tkBI4XoUrht+QEjhehSutJ5AcT0K1wO+wUBI4XoUrn+RQGZmZmZmvIJAKVyPwvUmjkCamZmZGVumQKRwPQrXS5RAUrgehetfsUBmZmZmZqmXQOxRuB4FpKBAUrgehetpg0CPwvUoXIiUQOF6FK5H0YBAuB6F61F4VkApXI/C9ax/QB+F61G4R75AFK5H4XrajkDhehSuR42WQNejcD1KCbdAuB6F65G5u0B7FK5H4beUQFyPwvUoNpJAj8L1KFwvWkAK16NwPU6BQArXo3A9EZ1AexSuR+HKa0AzMzMzMytqQBSuR+F6xHlAFK5H4Xp0aECPwvUo3BKiQIXrUbieKKtAH4XrUThEs0BSuB6F687FQOF6FK7H7aBAMzMzM5PJwECPwvUoXHyUQOF6FK7HcLNAmpmZmZkXqkCuR+F6FCSmQJqZmZmZCL5ApHA9Ctc7k0C4HoXrUbSqQGZmZmZm6JpAZmZmZuamokDD9Shcj/5xQI/C9ShcVqFASOF6FK6Nk0BI4XoUrn9xQPYoXI9C9r1Aj8L1KJxpvECkcD0K10+VQHsUrkfhULtAFK5H4Xr2iUAfhetR+MG+QKRwPQrXKJ9AZmZmZmbMiUBcj8L1KDahQB+F61G4vmNACtejcD2KTkBmZmZmZsCLQKRwPQrXB55AZmZmZuavqkBI4XoUrreTQK5H4XoU1pRApHA9CteEkkAUrkfhelGQQPYoXI/C5VBAH4XrUTjOqkCPwvUoXGmCQDMzMzOzdrpAzczMzExBpkBxPQrXoyy9QOxRuB6Fe3RAH4XrUbjcgkCPwvUoXBikQAAAAAAAMFpASOF6FK6nWEAfhetROA6gQHE9Ctcja69A4XoUrscfwEB7FK5H4aOWQClcj8L14GxAhetRuP4swUA9CtejcJmPQHsUrkfhw6tAMzMzMzNrmEBcj8L1KCxyQBSuR+F67p1AmpmZmZlLlEA9CtejcBV0QK5H4XoUBaJAFK5H4foEo0BSuB6F61lkQHE9CtejAKpA7FG4HoUBnECF61G4HheNQDMzMzMzy4ZAZmZmZmYieUCkcD0KVyauQFyPwvVo/sNAmpmZmZlXtEAfhetRuI6XQAAAAAAAIFNA16NwPQpjfECuR+F6FHiEQBSuR+F60ItA4XoUrkfBgUC4HoXr0f2uQKRwPQrXo41AXI/C9Si8dkBmZmZmJqm5QPYoXI/C/aNA4XoUrkdZqUAUrkfhegKAQD0K16PwK7ZACtejcD3ov0A9Ctej8MbCQOF6FK5HEWJApHA9CtdDWkB7FK5H4fJzQClcj8L16E9AzczMzMzsmkCuR+F6FJiPQClcj8L11KlAj8L1KFy4o0CuR+F6FF22QFyPwvUoRJlAAAAAAADDmkBmZmZmZvqHQGZmZmZm8I9Aw/UoXI+9okAAAAAAADRwQJqZmZmZE45AcT0K1yO4xkA=",
          "dtype": "f8"
         },
         "y0": " ",
         "yaxis": "y"
        }
       ],
       "layout": {
        "boxmode": "group",
        "height": 500,
        "legend": {
         "tracegroupgap": 0
        },
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "fillpattern": {
             "fillmode": "overlay",
             "size": 10,
             "solidity": 0.2
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermap": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermap"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "Amount Distribution by Major Variable Category (Log Scale, Excl. Maid/Large Furniture/Vacation)"
        },
        "xaxis": {
         "anchor": "y",
         "domain": [
          0,
          1
         ],
         "tickangle": -45,
         "title": {
          "text": "Category"
         }
        },
        "yaxis": {
         "anchor": "x",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "Amount (INR)"
         },
         "type": "log"
        }
       }
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO: Review box plot/stats: Do medians/ranges seem realistic for Bangalore daily/weekly expenses in these categories?\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "               count         mean          std     min        25%       50%  \\\n",
      "category                                                                      \n",
      "Entertainment   34.0  1858.921176  1037.274908  484.32  1039.2350  1554.955   \n",
      "Grocery         83.0  1317.318313  1086.638861  118.41   398.4200   903.230   \n",
      "Health          52.0  3298.279808  2711.537050  540.44  1153.2025  2264.335   \n",
      "Household      120.0  2051.820250  2157.755727   70.99   781.8050  1444.155   \n",
      "Restaurant      79.0   945.827595   831.638598   63.74   336.9350   573.160   \n",
      "Shopping       122.0  4939.460984  2925.484306  307.33  2913.7725  4402.180   \n",
      "Travel         153.0  4067.852810  5407.537065   53.94   439.1700  1878.090   \n",
      "\n",
      "                     75%       max  \n",
      "category                            \n",
      "Entertainment  2444.9575   4763.75  \n",
      "Grocery        2221.5200   4124.14  \n",
      "Health         4809.3100   9084.03  \n",
      "Household      2317.8000  11323.94  \n",
      "Restaurant     1542.0300   3476.31  \n",
      "Shopping       6655.8950  14021.59  \n",
      "Travel         4689.6200  26310.16  \n"
     ]
    }
   ],
   "source": [
    "if not df.empty and 'amount' in df.columns and 'category' in df.columns:\n",
    "    print(\"\\n--- Ad-hoc Amount Distributions (Box Plots) ---\")\n",
    "    major_variable_cats = ['Grocery', 'Restaurant', 'Shopping', 'Travel', 'Household', 'Health', 'Entertainment']\n",
    "    plot_df = df[df['category'].isin(major_variable_cats)].copy() # Make a copy\n",
    "    # Exclude known large fixed costs from Household/Travel for better visualization of variable costs\n",
    "    plot_df = plot_df[~((plot_df['category'] == 'Household') & (plot_df['sub_category'] == 'Maid'))]\n",
    "    # Exclude potential large vacation sums if they skew too much\n",
    "    # plot_df = plot_df[~((plot_df['category'] == 'Travel') & (plot_df['sub_category'] == 'Vacation') & (plot_df['amount'] > 15000))] \n",
    "    # Exclude large furniture costs\n",
    "    plot_df = plot_df[~((plot_df['category'] == 'Household') & (plot_df['sub_category'] == 'Furniture') & (plot_df['amount'] > 10000))]\n",
    "\n",
    "    if not plot_df.empty:\n",
    "        fig_box_cat = px.box(plot_df, x='category', y='amount', points=\"outliers\",\n",
    "                             title='Amount Distribution by Major Variable Category (Log Scale, Excl. Maid/Large Furniture/Vacation)',\n",
    "                             labels={'category': 'Category', 'amount': 'Amount (INR)'},\n",
    "                             log_y=True, height=500)\n",
    "        fig_box_cat.update_layout(xaxis_tickangle=-45)\n",
    "        fig_box_cat.show() # Display inline\n",
    "        # try: fig_box_cat.write_image(IMG_DIR / \"category_amount_boxplot.png\") # Commented out\n",
    "        # except Exception as e: logging.error(f\"Failed to save category box plot: {e}\")\n",
    "\n",
    "        # Discrepancy Check:\n",
    "        print(plot_df.groupby('category')['amount'].describe())\n",
    "        logging.info(\"Review box plot/stats: Do medians/ranges seem realistic for Bangalore daily/weekly expenses in these categories?\")\n",
    "    else:\n",
    "        logging.info(\"No data for major variable categories found after filtering fixed/large items.\")\n",
    "else:\n",
    "    print(\"Skipping amount distribution analysis (missing columns).\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f9944b89",
   "metadata": {},
   "source": [
    "## 11. Ad-hoc Amount Distribution: Grocery Sub-Categories (Box Plot)\n",
    "\n",
    "Compare spending ranges for different grocery platforms/stores."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "0a574c09",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Grocery Sub-Category Amount Distributions ---\n"
     ]
    },
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "alignmentgroup": "True",
         "boxpoints": "outliers",
         "hovertemplate": "Store/Platform=%{x}<br>Amount (INR)=%{y}<extra></extra>",
         "legendgroup": "",
         "marker": {
          "color": "#636efa"
         },
         "name": "",
         "notched": false,
         "offsetgroup": "",
         "orientation": "v",
         "showlegend": false,
         "type": "box",
         "x": [
          "Flipkart Grocery",
          "Local Store",
          "Amazon",
          "BigBasket",
          "Zepto",
          "Local Store",
          "Flipkart Grocery",
          "Flipkart Grocery",
          "Local Store",
          "Amazon",
          "BigBasket",
          "Amazon",
          "BigBasket",
          "Zepto",
          "Amazon",
          "Flipkart Grocery",
          "Local Store",
          "Flipkart Grocery",
          "Amazon",
          "Local Store",
          "Zepto",
          "Amazon",
          "Zepto",
          "Amazon",
          "Amazon",
          "Amazon",
          "Flipkart Grocery",
          "Zepto",
          "BigBasket",
          "Flipkart Grocery",
          "BigBasket",
          "Local Store",
          "BigBasket",
          "Zepto",
          "Zepto",
          "Flipkart Grocery",
          "Local Store",
          "BigBasket",
          "BigBasket",
          "Local Store",
          "Amazon",
          "Local Store",
          "Flipkart Grocery",
          "Zepto",
          "Flipkart Grocery",
          "Flipkart Grocery",
          "Amazon",
          "BigBasket",
          "Local Store",
          "Zepto",
          "BigBasket",
          "Zepto",
          "Zepto",
          "Amazon",
          "Zepto",
          "Zepto",
          "Local Store",
          "Zepto",
          "Zepto",
          "Zepto",
          "BigBasket",
          "Zepto",
          "Local Store",
          "Amazon",
          "Amazon"
         ],
         "x0": " ",
         "xaxis": "x",
         "y": {
          "bdata": "MzMzMzPSpkApXI/C9VabQPYoXI9CCK9APQrXo3A3h0BI4XoUrndsQOF6FK5HR5VAuB6F69EypUBcj8L1KNSEQNejcD0Kj45A7FG4HoVmp0AUrkfheiilQHE9CtejDaNAuB6F61G4lEDhehSuRwqTQBSuR+F6PKFAMzMzMzPffEBxPQrXoxh+QIXrUbie8qRApHA9Ctc5jECuR+F6FKqGQOxRuB6Fa5FAZmZmZuZYq0ApXI/C9TmSQOxRuB4FXKBAZmZmZma5nUAUrkfhev6uQFK4HoXrOKJApHA9CteTdkCamZmZmTucQFyPwvUogaVAcT0K1yMcsEDhehSuRzl5QNejcD0KH6dAmpmZmZmSkEAfhetRuOZvQI/C9Sjcd6VA16NwPQoPcEBSuB6FazCjQJqZmZmZfJ9AhetRuB4ZkEBxPQrXo5iCQArXo3A98olAmpmZmZn/lkBmZmZmZu5zQOF6FK5HKqJAAAAAAACIk0BxPQrXow+jQJqZmZmZeaFAUrgehesxdEBcj8L1KJR4QOxRuB4FYKNApHA9CtfLhUAK16NwPdpnQHE9CtcjEqRAj8L1KFythEBmZmZmZryCQFK4HoXraYNAexSuR+HKa0CkcD0K10+VQEjhehSut5NAexSuR+HDq0A9CtejcBV0QOF6FK5HEWJAzczMzMzsmkAAAAAAAMOaQA==",
          "dtype": "f8"
         },
         "y0": " ",
         "yaxis": "y"
        }
       ],
       "layout": {
        "boxmode": "group",
        "height": 500,
        "legend": {
         "tracegroupgap": 0
        },
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "fillpattern": {
             "fillmode": "overlay",
             "size": 10,
             "solidity": 0.2
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermap": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermap"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "Grocery Amount Distribution by Store/Platform (Log Scale)"
        },
        "xaxis": {
         "anchor": "y",
         "categoryarray": [
          "BigBasket",
          "Zepto",
          "Local Store",
          "Amazon",
          "Flipkart Grocery"
         ],
         "categoryorder": "array",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "Store/Platform"
         }
        },
        "yaxis": {
         "anchor": "x",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "Amount (INR)"
         },
         "type": "log"
        }
       }
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO: Check if distributions align with expectations (e.g., BigBasket/Amazon generally higher median/IQR than Zepto/Local Store).\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                  count         mean          std     min        25%      50%  \\\n",
      "sub_category                                                                    \n",
      "Amazon             14.0  2358.546429  1011.778104  595.08  1767.9875  2322.53   \n",
      "BigBasket          11.0  2400.901818   956.428750  742.93  1911.0250  2456.21   \n",
      "Flipkart Grocery   11.0  2029.481818   902.174004  461.95  1360.9500  2332.46   \n",
      "Local Store        12.0   742.185000   477.796766  144.54   383.4650   673.25   \n",
      "Zepto              17.0   672.707059   429.387667  190.82   318.9000   599.55   \n",
      "\n",
      "                        75%      max  \n",
      "sub_category                          \n",
      "Amazon            2888.7125  3972.13  \n",
      "BigBasket         2833.8800  4124.14  \n",
      "Flipkart Grocery  2730.6700  2921.10  \n",
      "Local Store        990.9800  1749.74  \n",
      "Zepto             1114.8800  1363.96  \n"
     ]
    }
   ],
   "source": [
    "if not df.empty and 'sub_category' in df.columns and 'category' in df.columns:\n",
    "    print(\"\\n--- Grocery Sub-Category Amount Distributions ---\")\n",
    "    grocery_subs = ['BigBasket', 'Zepto', 'Local Store', 'Amazon', 'Flipkart Grocery']\n",
    "    plot_df_grocery = df[(df['category'] == 'Grocery') & (df['sub_category'].isin(grocery_subs))]\n",
    "\n",
    "    if not plot_df_grocery.empty:\n",
    "        fig_box_grocery = px.box(plot_df_grocery, x='sub_category', y='amount', points=\"outliers\",\n",
    "                                 title='Grocery Amount Distribution by Store/Platform (Log Scale)',\n",
    "                                 labels={'sub_category': 'Store/Platform', 'amount': 'Amount (INR)'},\n",
    "                                 category_orders={\"sub_category\": grocery_subs}, # Control order\n",
    "                                 log_y=True, height=500)\n",
    "        fig_box_grocery.show() # Display inline\n",
    "        # try: fig_box_grocery.write_image(IMG_DIR / \"grocery_subcat_boxplot.png\") # Commented out\n",
    "        # except Exception as e: logging.error(f\"Failed to save grocery box plot: {e}\")\n",
    "\n",
    "        # Discrepancy Check\n",
    "        print(plot_df_grocery.groupby('sub_category')['amount'].describe())\n",
    "        logging.info(\"Check if distributions align with expectations (e.g., BigBasket/Amazon generally higher median/IQR than Zepto/Local Store).\")\n",
    "    else:\n",
    "        logging.info(\"No data found for specified Grocery sub-categories.\")\n",
    "else:\n",
    "    print(\"Skipping grocery sub-category analysis.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "57335010",
   "metadata": {},
   "source": [
    "## 12. Frequency Validation: Ad-hoc Monthly Counts\n",
    "\n",
    "Check adherence to `Max-times-per-month` for specific ad-hoc rules (Waste, Gifts, Entertainment)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "e2a56823",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Ad-hoc Monthly Frequency Validation (Waste/Gifts/Ent) ---\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Teertha's PC\\AppData\\Local\\Temp\\ipykernel_11796\\1882847337.py:28: FutureWarning:\n",
      "\n",
      "A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "\n",
      "INFO: Loaded and preprocessed 177 rules from E:\\Code\\Projects\\App-PersonalFinance\\app-personal-finance\\sample_data_generation.csv\n",
      "INFO: Ad-hoc frequency constraints (Max-times-per-month) for Waste/Gifts/Entertainment appear satisfied.\n"
     ]
    }
   ],
   "source": [
    "if not df.empty and 'month' in df.columns:\n",
    "    print(\"\\n--- Ad-hoc Monthly Frequency Validation (Waste/Gifts/Ent) ---\")\n",
    "    df_rules_loaded = load_rules(RULES_FILE) # Use the function defined earlier\n",
    "\n",
    "    if df_rules_loaded is not None:\n",
    "        # Define the rules we want to check explicitly based on the constraints given\n",
    "        rules_to_check_criteria = (\n",
    "            (df_rules_loaded['Expense-Frequency'] == 'ad-hoc') &\n",
    "            (\n",
    "                (df_rules_loaded['Category'] == 'Waste') |\n",
    "                (df_rules_loaded['Category'] == 'Gifts & Donations') |\n",
    "                (df_rules_loaded['Category'] == 'Entertainment')\n",
    "            )\n",
    "        )\n",
    "        rules_to_check_df = df_rules_loaded[rules_to_check_criteria].copy()\n",
    "\n",
    "        if not rules_to_check_df.empty:\n",
    "            # Create a unique key combining relevant fields from BOTH data and rules\n",
    "            # Use lowercase for robust matching if casing differs slightly\n",
    "            df['rule_match_key'] = df.apply(lambda r: f\"{r['category'].lower()}|{r['sub_category'].lower()}|{r['user'].lower()}|{r['account'].lower()}\", axis=1)\n",
    "            rules_to_check_df['rule_match_key'] = rules_to_check_df.apply(lambda r: f\"{r['Category'].lower()}|{r['Sub-category'].lower()}|{r['User'].lower()}|{r['Account'].lower()}\", axis=1)\n",
    "\n",
    "            # Group transactions by month and rule_key to count actual occurrences\n",
    "            monthly_actual_counts = df[df['rule_match_key'].isin(rules_to_check_df['rule_match_key'])].groupby(['month', 'rule_match_key']).size().reset_index(name='actual_count')\n",
    "\n",
    "            # Merge actual counts with the limits from the rules file\n",
    "            merged_counts = pd.merge(\n",
    "                monthly_actual_counts,\n",
    "                rules_to_check_df[['rule_match_key', 'Max-times-per-month']],\n",
    "                on='rule_match_key',\n",
    "                how='left' # Keep all actual counts, match rules where possible\n",
    "            )\n",
    "            # Drop rows where the rule couldn't be matched (shouldn't happen if keys are correct)\n",
    "            merged_counts.dropna(subset=['Max-times-per-month'], inplace=True)\n",
    "            merged_counts['Max-times-per-month'] = merged_counts['Max-times-per-month'].astype(int) # Ensure integer comparison\n",
    "\n",
    "            # Find violations\n",
    "            merged_counts['exceeded'] = merged_counts['actual_count'] > merged_counts['Max-times-per-month']\n",
    "            exceeded_df = merged_counts[merged_counts['exceeded']]\n",
    "\n",
    "            if not exceeded_df.empty:\n",
    "                logging.error(\"Max-times-per-month constraint VIOLATED for some ad-hoc rules!\")\n",
    "                print(\"Violations Found (Rule Key | Month | Actual Count | Max Allowed):\")\n",
    "                # Improve display for readability\n",
    "                exceeded_df_display = exceeded_df[['rule_match_key', 'month', 'actual_count', 'Max-times-per-month']].copy()\n",
    "                exceeded_df_display['Rule_Info'] = exceeded_df_display['rule_match_key'].str.replace('|', ' | ', regex=False)\n",
    "                print(exceeded_df_display[['Rule_Info', 'month', 'actual_count', 'Max-times-per-month']].to_string(index=False))\n",
    "            else:\n",
    "                logging.info(\"Ad-hoc frequency constraints (Max-times-per-month) for Waste/Gifts/Entertainment appear satisfied.\")\n",
    "\n",
    "            # Clean up added column from main df\n",
    "            if 'rule_match_key' in df.columns: df.drop(columns=['rule_match_key'], inplace=True, errors='ignore')\n",
    "        else:\n",
    "            logging.info(\"No specific Waste/Gifts/Entertainment ad-hoc rules found in the rules file for frequency validation.\")\n",
    "    else:\n",
    "        logging.warning(\"Could not load rules file, skipping ad-hoc frequency validation.\")\n",
    "else:\n",
    "    print(\"Skipping ad-hoc frequency validation.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 13. Account Usage Bias Check\n",
    "\n",
    "Verify Puspita-Bandhan use for Travel/Beauty and Anirban-ICICI dominance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Account Usage Validation ---\n"
     ]
    },
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "domain": {
          "x": [
           0,
           1
          ],
          "y": [
           0,
           1
          ]
         },
         "hole": 0.3,
         "hovertemplate": "<b>%{label}</b><br>Total: ₹%{value:,.0f}<br>(%{percent})<extra></extra>",
         "labels": [
          "Anirban-ICICI",
          "Anirban-SBI",
          "Puspita-Bandhan",
          "Puspita-SBI"
         ],
         "legendgroup": "",
         "name": "",
         "showlegend": true,
         "textinfo": "percent+label",
         "type": "pie",
         "values": {
          "bdata": "pHA9Ss15PEG4HoXrCpsjQetRuB6FtBFBSOF6FBZDL0E=",
          "dtype": "f8"
         }
        }
       ],
       "layout": {
        "legend": {
         "tracegroupgap": 0
        },
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "fillpattern": {
             "fillmode": "overlay",
             "size": 10,
             "solidity": 0.2
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermap": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermap"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "Overall Spending Proportion by Account"
        }
       }
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO: Puspita-Bandhan usage appears focused on Travel/Beauty.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Puspita-Bandhan Category Distribution (% of transactions):\n",
      "category\n",
      "Travel    58.1\n",
      "Beauty    41.9\n",
      "Name: proportion, dtype: float64\n"
     ]
    },
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "domain": {
          "x": [
           0,
           1
          ],
          "y": [
           0,
           1
          ]
         },
         "hole": 0.3,
         "hovertemplate": "category=%{label}<extra></extra>",
         "labels": [
          "Travel",
          "Beauty",
          "Beauty",
          "Travel",
          "Beauty",
          "Travel",
          "Travel",
          "Travel",
          "Beauty",
          "Beauty",
          "Travel",
          "Travel",
          "Travel",
          "Travel",
          "Travel",
          "Travel",
          "Travel",
          "Travel",
          "Travel",
          "Beauty",
          "Beauty",
          "Beauty",
          "Travel",
          "Travel",
          "Travel",
          "Beauty",
          "Travel",
          "Beauty",
          "Travel",
          "Beauty",
          "Beauty",
          "Travel",
          "Travel",
          "Beauty",
          "Travel",
          "Beauty",
          "Beauty",
          "Beauty",
          "Travel",
          "Travel",
          "Beauty",
          "Travel",
          "Beauty",
          "Beauty",
          "Travel",
          "Travel",
          "Beauty",
          "Travel",
          "Beauty",
          "Travel",
          "Beauty",
          "Travel",
          "Travel",
          "Beauty",
          "Beauty",
          "Travel",
          "Travel",
          "Beauty",
          "Beauty",
          "Travel",
          "Travel",
          "Travel"
         ],
         "legendgroup": "",
         "name": "",
         "showlegend": true,
         "textinfo": "percent+label",
         "type": "pie"
        }
       ],
       "layout": {
        "legend": {
         "tracegroupgap": 0
        },
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "fillpattern": {
             "fillmode": "overlay",
             "size": 10,
             "solidity": 0.2
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermap": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermap"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "Puspita-Bandhan Spending by Category"
        }
       }
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO: Anirban-ICICI appears dominant for Anirban's spending (>=60%).\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Anirban-ICICI accounts for 74.4% of Anirban's total spending amount.\n"
     ]
    }
   ],
   "source": [
    "if not df.empty and 'account' in df.columns and 'user' in df.columns and 'category' in df.columns:\n",
    "    print(\"\\n--- Account Usage Validation ---\")\n",
    "\n",
    "    # Overall Spend per Account (Pie Chart)\n",
    "    account_totals = df.groupby('account')['amount'].sum().reset_index()\n",
    "    fig_acc_pie = px.pie(account_totals, values='amount', names='account',\n",
    "                         title='Overall Spending Proportion by Account', hole=0.3)\n",
    "    fig_acc_pie.update_traces(textinfo='percent+label', hovertemplate=\"<b>%{label}</b><br>Total: ₹%{value:,.0f}<br>(%{percent})<extra></extra>\")\n",
    "    fig_acc_pie.show() # Display inline\n",
    "    # try: fig_acc_pie.write_image(IMG_DIR / \"account_spending_pie.png\") # Commented out\n",
    "    # except Exception as e: logging.error(f\"Failed to save account pie plot: {e}\")\n",
    "\n",
    "    # Puspita-Bandhan: Travel & Beauty focus?\n",
    "    puspita_bandhan_df = df[df['account'] == 'Puspita-Bandhan']\n",
    "    if not puspita_bandhan_df.empty:\n",
    "        pb_cat_dist = puspita_bandhan_df['category'].value_counts(normalize=True) * 100\n",
    "        print(\"\\nPuspita-Bandhan Category Distribution (% of transactions):\")\n",
    "        print(pb_cat_dist.round(1))\n",
    "        allowed_cats = ['Travel', 'Beauty']\n",
    "        other_cats_used = [cat for cat in pb_cat_dist.index if cat not in allowed_cats]\n",
    "        if other_cats_used:\n",
    "            logging.warning(f\"Puspita-Bandhan account used for categories other than Travel/Beauty: {other_cats_used}\")\n",
    "        else:\n",
    "             logging.info(\"Puspita-Bandhan usage appears focused on Travel/Beauty.\")\n",
    "        # Pie chart for Puspita-Bandhan\n",
    "        fig_pb_cat = px.pie(puspita_bandhan_df, names='category', title='Puspita-Bandhan Spending by Category', hole=0.3)\n",
    "        fig_pb_cat.update_traces(textinfo='percent+label')\n",
    "        fig_pb_cat.show() # Display inline\n",
    "        # try: fig_pb_cat.write_image(IMG_DIR / \"puspita_bandhan_category_pie.png\") # Commented out\n",
    "        # except Exception as e: logging.error(f\"Failed to save Puspita-Bandhan pie plot: {e}\")\n",
    "    else:\n",
    "        logging.info(\"No transactions found for Puspita-Bandhan.\")\n",
    "\n",
    "    # Anirban-ICICI Dominance Check\n",
    "    anirban_df = df[df['user'] == 'Anirban']\n",
    "    if not anirban_df.empty:\n",
    "         total_anirban_spend = anirban_df['amount'].sum()\n",
    "         if total_anirban_spend > 0:\n",
    "              icici_spend = anirban_df[anirban_df['account'] == 'Anirban-ICICI']['amount'].sum()\n",
    "              icici_share = (icici_spend / total_anirban_spend) * 100\n",
    "              print(f\"\\nAnirban-ICICI accounts for {icici_share:.1f}% of Anirban's total spending amount.\")\n",
    "              if icici_share < 60: # Arbitrary threshold\n",
    "                   logging.warning(\"Anirban-ICICI share of Anirban's spending seems lower than expected (<60%).\")\n",
    "              else:\n",
    "                   logging.info(\"Anirban-ICICI appears dominant for Anirban's spending (>=60%).\")\n",
    "         else:\n",
    "              logging.info(\"Anirban has zero total spending.\")\n",
    "    else:\n",
    "         logging.info(\"No transactions found for Anirban.\")\n",
    "else:\n",
    "    print(\"Skipping account usage validation (missing columns).\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 14. Temporal Pattern: Spending Over Month Day\n",
    "\n",
    "Check if Grocery/Shopping spending is concentrated early in the month."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Intra-Month Spending Pattern (Grocery/Shopping) ---\n"
     ]
    },
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "hovertemplate": "Day of Month=%{x}<br>Total Amount (INR)=%{y}<extra></extra>",
         "legendgroup": "",
         "marker": {
          "color": "#636efa",
          "pattern": {
           "shape": ""
          }
         },
         "name": "",
         "orientation": "v",
         "showlegend": false,
         "textposition": "auto",
         "type": "bar",
         "x": {
          "bdata": "AQAAAAIAAAADAAAABAAAAAUAAAAGAAAABwAAAAgAAAAJAAAACgAAAAsAAAAMAAAA",
          "dtype": "i4"
         },
         "xaxis": "x",
         "y": {
          "bdata": "7FG4HmWQ9EDNzMzMPDL5QD0K16Po3fFAZmZmZnSsAEGuR+F68LH5QD4K16NIS+dAXI/C9eA14EAK16NwBffrQClcj8LlCdJArkfheuSq20DiehSuZ1bHQArXo3D9i8hA",
          "dtype": "f8"
         },
         "yaxis": "y"
        }
       ],
       "layout": {
        "barmode": "relative",
        "height": 400,
        "legend": {
         "tracegroupgap": 0
        },
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "fillpattern": {
             "fillmode": "overlay",
             "size": 10,
             "solidity": 0.2
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermap": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermap"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "Total Grocery/Shopping Spend by Day of Month"
        },
        "xaxis": {
         "anchor": "y",
         "domain": [
          0,
          1
         ],
         "dtick": 1,
         "tickmode": "linear",
         "title": {
          "text": "Day of Month"
         }
        },
        "yaxis": {
         "anchor": "x",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "Total Amount (INR)"
         }
        }
       }
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO: Check bar chart: Is spending clearly higher in the first ~10 days?\n",
      "INFO: Spending concentration early in the month observed (First 10 days: ~₹687,435 vs Last 10 days: ~₹0).\n"
     ]
    }
   ],
   "source": [
    "if not df.empty and 'date_dt' in df.columns and 'category' in df.columns:\n",
    "    print(\"\\n--- Intra-Month Spending Pattern (Grocery/Shopping) ---\")\n",
    "    df['day_of_month'] = df['date_dt'].dt.day\n",
    "    # Filter for relevant categories AND non-fixed amounts (exclude large monthly rent etc. if miscategorized)\n",
    "    monthly_pattern_df = df[\n",
    "        df['category'].isin(['Grocery', 'Shopping']) & (df['amount'] < 20000) # Avoid huge one-offs like Furniture if in Shopping\n",
    "    ]\n",
    "\n",
    "    if not monthly_pattern_df.empty:\n",
    "        daily_total = monthly_pattern_df.groupby('day_of_month')['amount'].sum().reset_index() # Look at SUM not mean per day\n",
    "\n",
    "        fig_month_day = px.bar(daily_total, x='day_of_month', y='amount',\n",
    "                               title='Total Grocery/Shopping Spend by Day of Month',\n",
    "                               labels={'day_of_month': 'Day of Month', 'amount': 'Total Amount (INR)'},\n",
    "                               height=400)\n",
    "        fig_month_day.update_layout(xaxis=dict(tickmode='linear', dtick=1)) # Ensure all days are shown\n",
    "        fig_month_day.show() # Display inline\n",
    "        # try: fig_month_day.write_image(IMG_DIR / \"monthly_day_spend_pattern.png\") # Commented out\n",
    "        # except Exception as e: logging.error(f\"Failed to save monthly pattern plot: {e}\")\n",
    "\n",
    "        # Discrepancy Check (Visual Inspection + Quantitative)\n",
    "        logging.info(\"Check bar chart: Is spending clearly higher in the first ~10 days?\")\n",
    "        total_first_10 = daily_total[daily_total['day_of_month'] <= 10]['amount'].sum()\n",
    "        total_last_10 = daily_total[daily_total['day_of_month'] >= 22]['amount'].sum()\n",
    "        total_overall = daily_total['amount'].sum()\n",
    "\n",
    "        if total_overall > 0 and total_first_10 > total_last_10 * 1.3: # Check if first 10 days sum is >30% higher than last 10\n",
    "             logging.info(f\"Spending concentration early in the month observed (First 10 days: ~₹{total_first_10:,.0f} vs Last 10 days: ~₹{total_last_10:,.0f}).\")\n",
    "        elif total_overall > 0:\n",
    "             logging.warning(f\"Grocery/Shopping spending doesn't seem strongly concentrated early in the month (First 10: ~₹{total_first_10:,.0f} vs Last 10: ~₹{total_last_10:,.0f}).\")\n",
    "        else:\n",
    "            logging.info(\"Not enough spending data to assess intra-month pattern.\")\n",
    "\n",
    "    else:\n",
    "        logging.info(\"No relevant Grocery or Shopping data found for monthly pattern analysis.\")\n",
    "    # Clean up added column\n",
    "    if 'day_of_month' in df.columns: df.drop(columns=['day_of_month'], inplace=True)\n",
    "else:\n",
    "    print(\"Skipping intra-month pattern analysis.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 15. ML Suitability Check: Regression Potential (Flight Cost vs Month)\n",
    "\n",
    "Explore potential relationship for regression model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- ML Check: Regression Potential (Flight Cost vs Month) ---\n"
     ]
    },
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "hovertemplate": "Month (1-12)=%{x}<br>Flight Amount (INR)=%{y}<extra></extra>",
         "legendgroup": "",
         "marker": {
          "color": "#636efa",
          "symbol": "circle"
         },
         "mode": "markers",
         "name": "",
         "orientation": "v",
         "showlegend": false,
         "type": "scatter",
         "x": {
          "bdata": "AgAAAAMAAAADAAAABQAAAAUAAAAFAAAABwAAAAcAAAAIAAAACAAAAAsAAAAMAAAADAAAAAEAAAACAAAAAwAAAAMAAAAFAAAABgAAAAwAAAACAAAAAwAAAA==",
          "dtype": "i4"
         },
         "xaxis": "x",
         "y": {
          "bdata": "FK5H4foNxkBI4XoUrnytQLgeheuRgMZAhetRuF7EvkDXo3A9iuu9QDMzMzNztrdAKVyPwhWRw0CF61G43jm1QArXo3A91q1AH4XrUbgUxEDsUbgeZUTIQBSuR+G6eshAXI/C9SgAq0AK16NwvR3HQLgehetxUsJA16NwPYrLvEBI4XoUDjLFQFyPwvW45dBAMzMzMzP/rEAfhetRuEe+QHE9CtejLL1A4XoUrscfwEA=",
          "dtype": "f8"
         },
         "yaxis": "y"
        },
        {
         "hovertemplate": "<b>OLS trendline</b><br>amount = -103.772 * month_num + 9230.12<br>R<sup>2</sup>=0.010861<br><br>Month (1-12)=%{x}<br>Flight Amount (INR)=%{y} <b>(trend)</b><extra></extra>",
         "legendgroup": "",
         "marker": {
          "color": "#636efa",
          "symbol": "circle"
         },
         "mode": "lines",
         "name": "",
         "showlegend": false,
         "type": "scatter",
         "x": {
          "bdata": "AQAAAAIAAAACAAAAAgAAAAMAAAADAAAAAwAAAAMAAAADAAAABQAAAAUAAAAFAAAABQAAAAYAAAAHAAAABwAAAAgAAAAIAAAACwAAAAwAAAAMAAAADAAAAA==",
          "dtype": "i4"
         },
         "xaxis": "x",
         "y": {
          "bdata": "h+uCrSzTwUDbw6nbSZ/BQNvDqdtJn8FA28Op20mfwUAwnNAJZ2vBQDCc0Alna8FAMJzQCWdrwUAwnNAJZ2vBQDCc0Alna8FA2UweZqEDwUDZTB5moQPBQNlMHmahA8FA2UweZqEDwUAuJUWUvs/AQIP9a8Lbm8BAg/1rwtubwEDX1ZLw+GfAQNfVkvD4Z8BAqr0O9qCYv0BUblxS2zC/QFRuXFLbML9AVG5cUtswv0A=",
          "dtype": "f8"
         },
         "yaxis": "y"
        }
       ],
       "layout": {
        "height": 400,
        "legend": {
         "tracegroupgap": 0
        },
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "fillpattern": {
             "fillmode": "overlay",
             "size": 10,
             "solidity": 0.2
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermap": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermap"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "Flight Cost vs. Month of Booking"
        },
        "xaxis": {
         "anchor": "y",
         "domain": [
          0,
          1
         ],
         "tickmode": "array",
         "tickvals": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12
         ],
         "title": {
          "text": "Month (1-12)"
         }
        },
        "yaxis": {
         "anchor": "x",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "Flight Amount (INR)"
         }
        }
       }
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO: Check scatter plot: Is there a visible trend (even slight)? Are outliers plausible flight costs?\n"
     ]
    }
   ],
   "source": [
    "if not df.empty and 'date_dt' in df.columns and 'sub_category' in df.columns:\n",
    "    print(\"\\n--- ML Check: Regression Potential (Flight Cost vs Month) ---\")\n",
    "    flight_df = df[df['sub_category'] == 'Flight'].copy()\n",
    "\n",
    "    if not flight_df.empty:\n",
    "        flight_df['month_num'] = flight_df['date_dt'].dt.month\n",
    "        fig_scatter_flight = px.scatter(flight_df, x='month_num', y='amount',\n",
    "                                        title='Flight Cost vs. Month of Booking',\n",
    "                                        labels={'month_num': 'Month (1-12)', 'amount': 'Flight Amount (INR)'},\n",
    "                                        trendline='ols', # Ordinary Least Squares trendline\n",
    "                                        height=400)\n",
    "        fig_scatter_flight.update_layout(xaxis = dict(tickmode = 'array', tickvals = list(range(1,13)))) # Show all months 1-12\n",
    "        fig_scatter_flight.show() # Display inline\n",
    "        # try: fig_scatter_flight.write_image(IMG_DIR / \"flight_cost_vs_month_scatter.png\") # Commented out\n",
    "        # except Exception as e: logging.error(f\"Failed to save flight scatter plot: {e}\")\n",
    "\n",
    "        # Discrepancy Check (Visual Inspection)\n",
    "        logging.info(\"Check scatter plot: Is there a visible trend (even slight)? Are outliers plausible flight costs?\")\n",
    "    else:\n",
    "        logging.info(\"No flight data found for regression check.\")\n",
    "else:\n",
    "    print(\"Skipping regression potential check.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 16. ML Suitability Check: Classification Potential (Restaurant Spend Dist.)\n",
    "\n",
    "Look for potential thresholds to classify meals vs. snacks."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- ML Check: Classification Potential (Restaurant Spend Distribution) ---\n"
     ]
    },
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "bingroup": "x",
         "hovertemplate": "Amount (INR)=%{x}<br>count=%{y}<extra></extra>",
         "legendgroup": "",
         "marker": {
          "color": "#636efa",
          "pattern": {
           "shape": ""
          }
         },
         "name": "",
         "nbinsx": 50,
         "orientation": "v",
         "showlegend": false,
         "type": "histogram",
         "x": {
          "bdata": "zczMzMyGikBxPQrXo+6OQFyPwvUoGHpAhetRuB7FiEDNzMzMzN+aQHE9CtejOoFArkfhehTslkAzMzMzM9dyQClcj8L1cHxACtejcD3EgkAAAAAAABx7QNejcD0KV6FASOF6FK5bnUDXo3A9Ch9oQOxRuB6FqaFAmpmZmZkJVUCkcD0KV+akQM3MzMzMrJNAcT0K16NgZECamZmZmRl3QD0K16Nwh5VApHA9CtfDnkA9CtejcC1nQJqZmZmZAX1A9ihcj8J2nUAfhetRuOehQOxRuB6F82BAexSuR+GicECuR+F6FEp8QArXo3A9wIJAw/UoXI8OekBxPQrXo+h6QNejcD0Kz5tACtejcL2Ao0A9CtejcAOPQOxRuB6Fs3xAcT0K16OllUApXI/C9Ux/QPYoXI/CzWVAMzMzMzPQmkCuR+F6FAZuQClcj8L1K59AH4XrUbjeT0BSuB6F68+fQM3MzMzM9HpAKVyPwvXJm0DhehSuR+mBQKRwPQrX62JAj8L1KFyqmUD2KFyPwmFzQHsUrkfhBntAKVyPwvUYWEDXo3A9CtWWQLgehetRUHlAXI/C9SikaEAUrkfheiSDQClcj8L1WGlAFK5H4Xr0iUDsUbgehRteQKRwPQrXMZJASOF6FK4bfkCF61G4niirQMP1KFyP/nFAZmZmZmbMiUAfhetRuL5jQI/C9ShcaYJAj8L1KFwYpEBcj8L1KCxyQBSuR+H6BKNAZmZmZmYieUCuR+F6FHiEQOF6FK5HwYFAXI/C9Si8dkDhehSuR1mpQBSuR+F6AoBApHA9CtdDWkBcj8L1KESZQGZmZmZm+odAmpmZmZkTjkA=",
          "dtype": "f8"
         },
         "xaxis": "x",
         "yaxis": "y"
        }
       ],
       "layout": {
        "barmode": "relative",
        "height": 400,
        "legend": {
         "tracegroupgap": 0
        },
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "fillpattern": {
             "fillmode": "overlay",
             "size": 10,
             "solidity": 0.2
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermap": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermap"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "Distribution of Restaurant Transaction Amounts"
        },
        "xaxis": {
         "anchor": "y",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "Amount (INR)"
         }
        },
        "yaxis": {
         "anchor": "x",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "count"
         }
        }
       }
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO: Check histogram: Is there a clear separation or multiple peaks suggesting distinct groups (e.g., snacks vs meals)? Or is it one large peak skewed right?\n"
     ]
    }
   ],
   "source": [
    "if not df.empty and 'category' in df.columns and 'amount' in df.columns:\n",
    "    print(\"\\n--- ML Check: Classification Potential (Restaurant Spend Distribution) ---\")\n",
    "    resto_df = df[df['category'] == 'Restaurant']\n",
    "\n",
    "    if not resto_df.empty:\n",
    "        fig_hist_resto = px.histogram(resto_df, x='amount', nbins=50, # More bins might show detail\n",
    "                                     title='Distribution of Restaurant Transaction Amounts',\n",
    "                                     labels={'amount': 'Amount (INR)'}, height=400)\n",
    "        fig_hist_resto.show() # Display inline\n",
    "        # try: fig_hist_resto.write_image(IMG_DIR / \"restaurant_amount_histogram.png\") # Commented out\n",
    "        # except Exception as e: logging.error(f\"Failed to save restaurant histogram: {e}\")\n",
    "\n",
    "        # Discrepancy Check (Visual Inspection)\n",
    "        logging.info(\"Check histogram: Is there a clear separation or multiple peaks suggesting distinct groups (e.g., snacks vs meals)? Or is it one large peak skewed right?\")\n",
    "    else:\n",
    "        logging.info(\"No Restaurant data found for classification check.\")\n",
    "else:\n",
    "    print(\"Skipping classification potential check.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 17. ML Suitability Check: Segmentation Potential (Weekday vs Weekend)\n",
    "\n",
    "Compare spending profiles across predefined day type segments."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- ML Check: Segmentation Potential (Weekday vs Weekend Profiles) ---\n"
     ]
    },
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "alignmentgroup": "True",
         "hovertemplate": "day_type=Weekday<br>Category=%{x}<br>% of Segment Total Spend=%{y}<extra></extra>",
         "legendgroup": "Weekday",
         "marker": {
          "color": "#636efa",
          "pattern": {
           "shape": ""
          }
         },
         "name": "Weekday",
         "offsetgroup": "Weekday",
         "orientation": "v",
         "showlegend": true,
         "textposition": "auto",
         "type": "bar",
         "x": [
          "Beauty",
          "Connectivity",
          "Education",
          "Entertainment",
          "Gifts & Donations",
          "Grocery",
          "Health",
          "Household",
          "Insurance Premium",
          "Investment",
          "Rent",
          "Restaurant",
          "Shopping",
          "Travel",
          "Waste"
         ],
         "xaxis": "x",
         "y": {
          "bdata": "goQGR+vxEEAtumvUOvW7P4Iv4KHr+PU//WykTU1R+z9CwrZ5uPv5P2llXDgG1ARAynD1AcRCEkCsHyyt72UpQHiBOd/40CtAB1k7t0B8AUC4eZbZjMM0QJN54Aopmvw/LBiyWbaLMEAf8gAvvKEvQMwZBrzcPrM/",
          "dtype": "f8"
         },
         "yaxis": "y"
        },
        {
         "alignmentgroup": "True",
         "hovertemplate": "day_type=Weekend<br>Category=%{x}<br>% of Segment Total Spend=%{y}<extra></extra>",
         "legendgroup": "Weekend",
         "marker": {
          "color": "#EF553B",
          "pattern": {
           "shape": ""
          }
         },
         "name": "Weekend",
         "offsetgroup": "Weekend",
         "orientation": "v",
         "showlegend": true,
         "textposition": "auto",
         "type": "bar",
         "x": [
          "Beauty",
          "Connectivity",
          "Education",
          "Entertainment",
          "Gifts & Donations",
          "Grocery",
          "Health",
          "Household",
          "Insurance Premium",
          "Investment",
          "Rent",
          "Restaurant",
          "Shopping",
          "Travel",
          "Waste"
         ],
         "xaxis": "x",
         "y": {
          "bdata": "TW00Mo8rCkDIx10ruszBP175tRdjkfs/LIxVb5c++D8L0dcRip0BQENTOVdJGgxArSwV/rUjEUBxNmhN3oMyQAH2+5ifywxAZyGhXsTPAUD5lhIlLAw5QOoPCdiuCANAGDTRNwWJK0AW7jz5yHUxQGQQXa0rzdY/",
          "dtype": "f8"
         },
         "yaxis": "y"
        }
       ],
       "layout": {
        "barmode": "group",
        "height": 500,
        "legend": {
         "title": {
          "text": "Day Type"
         },
         "tracegroupgap": 0
        },
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "fillpattern": {
             "fillmode": "overlay",
             "size": 10,
             "solidity": 0.2
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermap": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermap"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "Category Spending %: Weekday vs. Weekend"
        },
        "xaxis": {
         "anchor": "y",
         "domain": [
          0,
          1
         ],
         "tickangle": -90,
         "title": {
          "text": "Category"
         }
        },
        "yaxis": {
         "anchor": "x",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "% of Segment Spending"
         }
        }
       }
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO: Check grouped bar chart: Are % allocations significantly different (e.g., higher Restaurant/Entertainment % on Weekends)?\n"
     ]
    }
   ],
   "source": [
    "if not df.empty and 'day_of_week' in df.columns and 'category' in df.columns:\n",
    "    print(\"\\n--- ML Check: Segmentation Potential (Weekday vs Weekend Profiles) ---\")\n",
    "    df['day_type'] = df['day_of_week'].apply(lambda x: 'Weekend' if x in ['Saturday', 'Sunday'] else 'Weekday')\n",
    "\n",
    "    # Compare category distribution using normalized values within each segment\n",
    "    segment_cat_dist = df.groupby(['day_type', 'category'])['amount'].sum().unstack(fill_value=0)\n",
    "    segment_cat_dist_perc = segment_cat_dist.apply(lambda x: x / x.sum() * 100, axis=1).stack().reset_index(name='percentage')\n",
    "\n",
    "    fig_segment_bar = px.bar(segment_cat_dist_perc, x='category', y='percentage', color='day_type',\n",
    "                             barmode='group',\n",
    "                             title='Category Spending %: Weekday vs. Weekend',\n",
    "                             labels={'category': 'Category', 'percentage': '% of Segment Total Spend'},\n",
    "                             height=500)\n",
    "    fig_segment_bar.update_layout(xaxis_tickangle=-90, yaxis_title='% of Segment Spending', legend_title=\"Day Type\")\n",
    "    fig_segment_bar.show() # Display inline\n",
    "    # try: fig_segment_bar.write_image(IMG_DIR / \"weekday_weekend_segment_compare.png\") # Commented out\n",
    "    # except Exception as e: logging.error(f\"Failed to save segmentation comparison plot: {e}\")\n",
    "\n",
    "\n",
    "    # Discrepancy Check (Visual Inspection)\n",
    "    logging.info(\"Check grouped bar chart: Are % allocations significantly different (e.g., higher Restaurant/Entertainment % on Weekends)?\")\n",
    "\n",
    "    # Clean up added column\n",
    "    if 'day_type' in df.columns: df.drop(columns=['day_type'], inplace=True)\n",
    "\n",
    "else:\n",
    "    print(\"Skipping segmentation potential check.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 18. ML Suitability Check: Clustering Potential (Daily Spend/Activity)\n",
    "\n",
    "Visualize daily aggregates to see if natural clusters appear."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- ML Check: Clustering Potential (Daily Spend vs. Activity) ---\n"
     ]
    },
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "customdata": [
          [
           "2023-01-01"
          ],
          [
           "2023-01-02"
          ],
          [
           "2023-01-03"
          ],
          [
           "2023-01-04"
          ],
          [
           "2023-01-05"
          ],
          [
           "2023-01-06"
          ],
          [
           "2023-01-07"
          ],
          [
           "2023-01-08"
          ],
          [
           "2023-01-09"
          ],
          [
           "2023-01-10"
          ],
          [
           "2023-01-11"
          ],
          [
           "2023-01-12"
          ],
          [
           "2023-01-15"
          ],
          [
           "2023-02-01"
          ],
          [
           "2023-02-02"
          ],
          [
           "2023-02-03"
          ],
          [
           "2023-02-04"
          ],
          [
           "2023-02-05"
          ],
          [
           "2023-02-06"
          ],
          [
           "2023-02-07"
          ],
          [
           "2023-02-08"
          ],
          [
           "2023-02-10"
          ],
          [
           "2023-02-15"
          ],
          [
           "2023-03-01"
          ],
          [
           "2023-03-02"
          ],
          [
           "2023-03-03"
          ],
          [
           "2023-03-04"
          ],
          [
           "2023-03-05"
          ],
          [
           "2023-03-06"
          ],
          [
           "2023-03-10"
          ],
          [
           "2023-03-15"
          ],
          [
           "2023-03-20"
          ],
          [
           "2023-04-01"
          ],
          [
           "2023-04-02"
          ],
          [
           "2023-04-03"
          ],
          [
           "2023-04-04"
          ],
          [
           "2023-04-05"
          ],
          [
           "2023-04-10"
          ],
          [
           "2023-04-15"
          ],
          [
           "2023-05-01"
          ],
          [
           "2023-05-02"
          ],
          [
           "2023-05-03"
          ],
          [
           "2023-05-04"
          ],
          [
           "2023-05-05"
          ],
          [
           "2023-05-06"
          ],
          [
           "2023-05-07"
          ],
          [
           "2023-05-10"
          ],
          [
           "2023-05-15"
          ],
          [
           "2023-06-01"
          ],
          [
           "2023-06-02"
          ],
          [
           "2023-06-03"
          ],
          [
           "2023-06-04"
          ],
          [
           "2023-06-05"
          ],
          [
           "2023-06-06"
          ],
          [
           "2023-06-10"
          ],
          [
           "2023-06-15"
          ],
          [
           "2023-07-01"
          ],
          [
           "2023-07-02"
          ],
          [
           "2023-07-03"
          ],
          [
           "2023-07-04"
          ],
          [
           "2023-07-05"
          ],
          [
           "2023-07-10"
          ],
          [
           "2023-07-15"
          ],
          [
           "2023-08-01"
          ],
          [
           "2023-08-02"
          ],
          [
           "2023-08-03"
          ],
          [
           "2023-08-04"
          ],
          [
           "2023-08-05"
          ],
          [
           "2023-08-06"
          ],
          [
           "2023-08-07"
          ],
          [
           "2023-08-08"
          ],
          [
           "2023-08-09"
          ],
          [
           "2023-08-10"
          ],
          [
           "2023-08-15"
          ],
          [
           "2023-09-01"
          ],
          [
           "2023-09-02"
          ],
          [
           "2023-09-03"
          ],
          [
           "2023-09-04"
          ],
          [
           "2023-09-05"
          ],
          [
           "2023-09-06"
          ],
          [
           "2023-09-07"
          ],
          [
           "2023-09-08"
          ],
          [
           "2023-09-09"
          ],
          [
           "2023-09-10"
          ],
          [
           "2023-09-11"
          ],
          [
           "2023-09-15"
          ],
          [
           "2023-09-20"
          ],
          [
           "2023-10-01"
          ],
          [
           "2023-10-02"
          ],
          [
           "2023-10-03"
          ],
          [
           "2023-10-04"
          ],
          [
           "2023-10-05"
          ],
          [
           "2023-10-06"
          ],
          [
           "2023-10-07"
          ],
          [
           "2023-10-08"
          ],
          [
           "2023-10-09"
          ],
          [
           "2023-10-10"
          ],
          [
           "2023-10-15"
          ],
          [
           "2023-11-01"
          ],
          [
           "2023-11-02"
          ],
          [
           "2023-11-03"
          ],
          [
           "2023-11-04"
          ],
          [
           "2023-11-05"
          ],
          [
           "2023-11-06"
          ],
          [
           "2023-11-07"
          ],
          [
           "2023-11-08"
          ],
          [
           "2023-11-09"
          ],
          [
           "2023-11-10"
          ],
          [
           "2023-11-15"
          ],
          [
           "2023-12-01"
          ],
          [
           "2023-12-02"
          ],
          [
           "2023-12-03"
          ],
          [
           "2023-12-04"
          ],
          [
           "2023-12-05"
          ],
          [
           "2023-12-06"
          ],
          [
           "2023-12-10"
          ],
          [
           "2023-12-15"
          ],
          [
           "2024-01-01"
          ],
          [
           "2024-01-02"
          ],
          [
           "2024-01-03"
          ],
          [
           "2024-01-04"
          ],
          [
           "2024-01-05"
          ],
          [
           "2024-01-06"
          ],
          [
           "2024-01-07"
          ],
          [
           "2024-01-08"
          ],
          [
           "2024-01-09"
          ],
          [
           "2024-01-10"
          ],
          [
           "2024-01-15"
          ],
          [
           "2024-02-01"
          ],
          [
           "2024-02-02"
          ],
          [
           "2024-02-03"
          ],
          [
           "2024-02-04"
          ],
          [
           "2024-02-05"
          ],
          [
           "2024-02-10"
          ],
          [
           "2024-02-15"
          ],
          [
           "2024-03-01"
          ],
          [
           "2024-03-02"
          ],
          [
           "2024-03-03"
          ],
          [
           "2024-03-04"
          ],
          [
           "2024-03-05"
          ],
          [
           "2024-03-06"
          ],
          [
           "2024-03-07"
          ],
          [
           "2024-03-08"
          ],
          [
           "2024-03-10"
          ],
          [
           "2024-03-15"
          ],
          [
           "2024-03-20"
          ],
          [
           "2024-04-01"
          ],
          [
           "2024-04-02"
          ],
          [
           "2024-04-03"
          ],
          [
           "2024-04-04"
          ],
          [
           "2024-04-05"
          ],
          [
           "2024-04-10"
          ],
          [
           "2024-04-15"
          ],
          [
           "2024-05-01"
          ],
          [
           "2024-05-02"
          ],
          [
           "2024-05-03"
          ],
          [
           "2024-05-04"
          ],
          [
           "2024-05-05"
          ],
          [
           "2024-05-10"
          ],
          [
           "2024-05-15"
          ],
          [
           "2024-06-01"
          ],
          [
           "2024-06-02"
          ],
          [
           "2024-06-03"
          ],
          [
           "2024-06-04"
          ],
          [
           "2024-06-05"
          ],
          [
           "2024-06-06"
          ],
          [
           "2024-06-07"
          ],
          [
           "2024-06-10"
          ],
          [
           "2024-06-15"
          ],
          [
           "2024-07-01"
          ],
          [
           "2024-07-02"
          ],
          [
           "2024-07-03"
          ],
          [
           "2024-07-04"
          ],
          [
           "2024-07-05"
          ],
          [
           "2024-07-06"
          ],
          [
           "2024-07-10"
          ],
          [
           "2024-07-15"
          ],
          [
           "2024-08-01"
          ],
          [
           "2024-08-02"
          ],
          [
           "2024-08-03"
          ],
          [
           "2024-08-04"
          ],
          [
           "2024-08-05"
          ],
          [
           "2024-08-06"
          ],
          [
           "2024-08-07"
          ],
          [
           "2024-08-08"
          ],
          [
           "2024-08-09"
          ],
          [
           "2024-08-10"
          ],
          [
           "2024-08-15"
          ],
          [
           "2024-09-01"
          ],
          [
           "2024-09-02"
          ],
          [
           "2024-09-03"
          ],
          [
           "2024-09-04"
          ],
          [
           "2024-09-05"
          ],
          [
           "2024-09-06"
          ],
          [
           "2024-09-07"
          ],
          [
           "2024-09-08"
          ],
          [
           "2024-09-09"
          ],
          [
           "2024-09-10"
          ],
          [
           "2024-09-15"
          ],
          [
           "2024-09-20"
          ],
          [
           "2024-10-01"
          ],
          [
           "2024-10-02"
          ],
          [
           "2024-10-03"
          ],
          [
           "2024-10-04"
          ],
          [
           "2024-10-05"
          ],
          [
           "2024-10-06"
          ],
          [
           "2024-10-07"
          ],
          [
           "2024-10-08"
          ],
          [
           "2024-10-09"
          ],
          [
           "2024-10-10"
          ],
          [
           "2024-10-15"
          ],
          [
           "2024-11-01"
          ],
          [
           "2024-11-02"
          ],
          [
           "2024-11-03"
          ],
          [
           "2024-11-04"
          ],
          [
           "2024-11-05"
          ],
          [
           "2024-11-06"
          ],
          [
           "2024-11-07"
          ],
          [
           "2024-11-10"
          ],
          [
           "2024-11-15"
          ],
          [
           "2024-12-01"
          ],
          [
           "2024-12-02"
          ],
          [
           "2024-12-03"
          ],
          [
           "2024-12-04"
          ],
          [
           "2024-12-05"
          ],
          [
           "2024-12-06"
          ],
          [
           "2024-12-07"
          ],
          [
           "2024-12-08"
          ],
          [
           "2024-12-09"
          ],
          [
           "2024-12-10"
          ],
          [
           "2024-12-11"
          ],
          [
           "2024-12-15"
          ],
          [
           "2025-01-01"
          ],
          [
           "2025-01-02"
          ],
          [
           "2025-01-03"
          ],
          [
           "2025-01-04"
          ],
          [
           "2025-01-05"
          ],
          [
           "2025-01-06"
          ],
          [
           "2025-01-10"
          ],
          [
           "2025-01-15"
          ],
          [
           "2025-02-01"
          ],
          [
           "2025-02-02"
          ],
          [
           "2025-02-03"
          ],
          [
           "2025-02-04"
          ],
          [
           "2025-02-05"
          ],
          [
           "2025-02-06"
          ],
          [
           "2025-02-07"
          ],
          [
           "2025-02-08"
          ],
          [
           "2025-02-09"
          ],
          [
           "2025-02-10"
          ],
          [
           "2025-02-15"
          ],
          [
           "2025-03-01"
          ],
          [
           "2025-03-02"
          ],
          [
           "2025-03-03"
          ],
          [
           "2025-03-04"
          ],
          [
           "2025-03-05"
          ],
          [
           "2025-03-06"
          ],
          [
           "2025-03-07"
          ],
          [
           "2025-03-08"
          ],
          [
           "2025-03-09"
          ],
          [
           "2025-03-10"
          ],
          [
           "2025-03-11"
          ],
          [
           "2025-03-12"
          ],
          [
           "2025-03-15"
          ],
          [
           "2025-03-20"
          ],
          [
           "2025-04-01"
          ],
          [
           "2025-04-02"
          ],
          [
           "2025-04-03"
          ],
          [
           "2025-04-04"
          ],
          [
           "2025-04-05"
          ],
          [
           "2025-04-06"
          ],
          [
           "2025-04-10"
          ],
          [
           "2025-04-15"
          ]
         ],
         "hovertemplate": "Number of Transactions=%{x}<br>Total Amount Spent (INR)=%{y}<br>date=%{customdata[0]}<extra></extra>",
         "legendgroup": "",
         "marker": {
          "color": "#636efa",
          "symbol": "circle"
         },
         "mode": "markers",
         "name": "",
         "orientation": "v",
         "showlegend": false,
         "type": "scatter",
         "x": {
          "bdata": "BQQHBQUCAwQBAgUCAgUBBwMGBwUBAQEGBgUGBgMBAQEDBgcHAgEBBwcBBgUDBAEBBgUBBAUDAQEJBgQFAwEBCAYFBQQDBAEBAQEEBwYBBwMDAgMCAQEBBgIHAwUEBAUBAQEGBAEEBAYCAQEBAQkFBAIIBAEBBQEHBQQBAgEBAQIHBQYGAgEBBAQBAQcBBAcBAQEGBgQEBAEBBwQGAwcBAQMEBgcGAwMBAQkEBQQIAgEBBAECAQICBAICBwEDBAEEAwcCBwQBAQEFAgIGBgEFAQYDAQkFAwIFBgEBAQQCBAEDAwICBQgCAQQCBwUFBAECBQIGBwQBBAMFAgEJAwIBBAIDAwIDAwYBAQUFBwUGAQEB",
          "dtype": "i1"
         },
         "xaxis": "x",
         "y": {
          "bdata": "4XoUrn/44UBmZmZm5kmuQClcj8I16tBAXI/C9SjnxEDsUbgeJSrFQClcj8L11rNAcT0K16NFt0C4HoXrUWPAQM3MzMzM35pArkfhelTHsUAK16NwPS++QIXrUbg+MsRAAAAAAAAWpUAUrkfhMmrhQOF6FK7HmqZAzczMzIzzxUC4HoXrEVa0QIXrUbhuvNtAXI/C9Si30UCkcD0KN0vHQArXo3D9779AAAAAAABAr0AAAAAAAMCSQLgehevJ/ONAuB6F61GFz0AVrkfhOsLGQM3MzMxs6dBAAAAAABD70kCF61G4Hg7PQAAAAAAAQK9AAAAAAADAkkAAAAAAANvqQLgeheupLeFAZmZmZnbq00CZmZmZKWXbQHE9CtdzE9FASOF6FH4w1EAAAAAAAECvQAAAAAAAwJJAhetRuI7U6ED2KFyPIi3SQArXo3A9ml1A16NwPeoPyEBcj8L1SGzTQGZmZmZmF71APQrXo7AJxkAAAAAAAECvQAAAAAAAwJJA4XoUroev5UDXo3A96hrFQB+F61H4VcpA16NwPRpL20BwPQrXw+XLQBWuR+H6BMhAAAAAAABAr0AAAAAAAMCSQLgeheshg+pACtejcM3I2kBwPQrXgxTLQArXo3A9r9BAwvUoXM/4wkAAAAAAAECvQAAAAAAAwJJASOF6FPZ05EDXo3A9iojDQKRwPQqnG9dAXI/C9YitxUBcj8L1CF3TQHA9Ctdjd7ZA4noUrkfpsUCkcD0K1/2lQKRwPQrXjqxAAAAAAABAr0AAAAAAAMCSQLgehetZI+FAZmZmZiZlxkCuR+F61GDDQClcj8L1cIJAkML1KPyczUAfhetReBDDQD4K16MwnbRAwvUoXO9y0kApXI/CdTapQD4K16PwtrxA7FG4HsUZwEAAAAAAAMCSQAAAAAAA2+pApHA9CjeD5EBmZmZm5r2gQMP1KFyvuMBAuB6F69Gap0D2KFyP0rHbQNejcD3qI8NApHA9CleXw0AzMzMzEyjNQNejcD0KH6dAAAAAAABAr0AAAAAAAMCSQFK4HoWrh+ZAPgrXo3BOyUB7FK5HIWXDQAAAAACA3LZApHA9CjcX3EB7FK5HwVnDQIbrUbgeMKNAw/UoXI+SrUDhehSuR0SmQAAAAAAAQK9AAAAAAADAkkAK16NwNTzpQB6F61H4Zc1AmZmZmalF0EDsUbgeRWW0QClcj8JlItpAzczMzExStUAAAAAAAECvQAAAAAAAwJJAH4XrUVhV4UAK16NwvR3HQNejcD3qqs5AH4XrUTjEzkDiehSuZzzDQBSuR+G61dpAkML1KNzKp0AAAAAAAGKGQB+F61F4+LVAAAAAAABAr0AAAAAAABalQFyPwvVYOutAZmZmZnbB2UCPwvUofM7GQMP1KFxvKtZAFK5H4fpxuUAAAAAAAECvQAAAAAAAwJJAj8L1KOTf4kD2KFyPwsXAQFK4HoXrUKZAUrgehetNlECamZmZmQDQQPYoXI9izs9AuB6F65EkvkAAAAAAAJ3eQAAAAAAAQK9AAAAAAADAkkAAAAAAANvqQKRwPQr/g+NAXI/C9eDp4UD1KFyPQinLQLgehesBzNNAAAAAACDRy0AAAAAAAECvQAAAAAAAwJJAw/UoXDdA70C4HoXrkWG+QJmZmZn5idlA4noUrsciokBSuB6FO3bUQAAAAAAAQK9AAAAAAADAkkAzMzMzc67hQK5H4XqUiMZApHA9Chc2w0AfhetRaJ/hQGZmZmbGIdFANDMzMzNPl0DsUbgeJXrCQAAAAAAAQK9AAAAAAADAkkA9CtejULnnQIXrUbg+ZM1AkML1KOxe1UA+CtejMGzIQEjhehTu+dRAPgrXo/DFpUAAAAAAAECvQAAAAAAAwJJASOF6FIbG4EAK16NwPTypQNejcD0KV5pAzczMzMwojECPwvUoHEywQB+F61G4krVA9ihcj8L7sUAehetR+P+xQLgehetx38tAUrgehXP/5kAAAAAAAMCSQJqZmZkhU+BAcT0K1+Nw1kDNzMzMzHx6QEjhehTuQ7pAwvUoXI+axECF61G4bnXSQI/C9SjcPqFA7FG4HpVw0kCuR+F6NGPAQAAAAAAAQK9AAAAAAADAkkAAAAAAANvqQB+F61GQ2eBAUrgehasW1kCPwvUoXNipQClcj8KVH8RAMzMzM1PlxkAAAAAAAM2VQDQzMzNz4slAmpmZmRklq0BI4XoULi26QFK4HoVrDMlAAAAAAADAkkDhehSuz0/xQArXo3DNI9FAhetRuB6PukBmZmZmZraVQIXrUbj+Uc5AFK5H4bo/uEDhehSuR5evQAAAAAAAQK9AAAAAAADAkkDXo3A9ekzgQB6F61E48KdAKVyPwtWCyEDXo3A9Sgm3QOF6FK5HCsZAAAAAAIBIpEC4HoXrUXOTQM3MzMxMRaBA9ihcjwLPuUB7FK5HMXLiQKRwPQrXHbhAAAAAAADAkkC4HoXrcTnkQPYoXI9CFLRAhetRuL59z0DC9ShcjyLKQKRwPQp3Qc9AXI/C9bjg20AAAAAAAECvQAAAAAAAFqVAXI/C9YiL6kDsUbgehQemQHE9CtejRrlAZmZmZoZtwUD2KFyPgm/BQI/C9ShcaYJACtejcO0C0UAAAAAAwKC5QNijcD2KAr9AuB6F65FVv0AAAAAAAMCSQKRwPQqvAexAcT0K12P+u0ApXI/C9VCZQK5H4XoUBaJAwvUoXM9uwUDXo3A9ikalQJDC9ShchaVAKVyPwuXZ0kA+CtejcGKiQD0K16OwsrFAXI/C9SgumkB6FK5HgbvKQAAAAAAAwJJAAAAAAADb6kD2KFyP+vPiQIXrUbhuoddAPQrXo3C02EDXo3A9atzHQNejcD3qbMBAcT0K1yO4xkAAAAAAAECvQAAAAAAAwJJA",
          "dtype": "f8"
         },
         "yaxis": "y"
        }
       ],
       "layout": {
        "height": 500,
        "legend": {
         "tracegroupgap": 0
        },
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "fillpattern": {
             "fillmode": "overlay",
             "size": 10,
             "solidity": 0.2
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermap": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermap"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "Daily Spending vs. Number of Transactions"
        },
        "xaxis": {
         "anchor": "y",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "Number of Transactions"
         }
        },
        "yaxis": {
         "anchor": "x",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "Total Amount Spent (INR)"
         }
        }
       }
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO: Check scatter plot: Do distinct visual groups (clusters) appear based on density? (e.g., low-count/low-spend corner, high-spend outliers, high-activity band).\n"
     ]
    }
   ],
   "source": [
    "if not df.empty and 'date_dt' in df.columns:\n",
    "    print(\"\\n--- ML Check: Clustering Potential (Daily Spend vs. Activity) ---\")\n",
    "    # Aggregate total amount and count transactions per day\n",
    "    # Need a unique identifier per row if 'id' isn't reliably generated/present; using index as fallback.\n",
    "    if 'id' not in df.columns: df['id_temp'] = df.index # Temporary ID if needed\n",
    "    else: df['id_temp'] = df['id'] # Use existing id if present\n",
    "\n",
    "    daily_summary = df.groupby(df['date_dt'].dt.date).agg(\n",
    "        total_amount=('amount', 'sum'),\n",
    "        transaction_count=('id_temp', 'nunique') # Count unique transactions per day\n",
    "    ).reset_index().rename(columns={'date_dt': 'date'})\n",
    "\n",
    "\n",
    "    # Clean up temp id column\n",
    "    if 'id_temp' in df.columns: df.drop(columns=['id_temp'], inplace=True)\n",
    "\n",
    "    if not daily_summary.empty:\n",
    "        fig_scatter_cluster = px.scatter(daily_summary, x='transaction_count', y='total_amount',\n",
    "                                        title='Daily Spending vs. Number of Transactions',\n",
    "                                        labels={'transaction_count': 'Number of Transactions', 'total_amount': 'Total Amount Spent (INR)'},\n",
    "                                        hover_data=['date'],\n",
    "                                        height=500)\n",
    "        fig_scatter_cluster.show() # Display inline\n",
    "        # try: fig_scatter_cluster.write_image(IMG_DIR / \"daily_spend_activity_scatter.png\") # Commented out\n",
    "        # except Exception as e: logging.error(f\"Failed to save daily cluster scatter plot: {e}\")\n",
    "\n",
    "        # Discrepancy Check (Visual Inspection)\n",
    "        logging.info(\"Check scatter plot: Do distinct visual groups (clusters) appear based on density? (e.g., low-count/low-spend corner, high-spend outliers, high-activity band).\")\n",
    "    else:\n",
    "        logging.info(\"Could not generate daily summary for clustering check.\")\n",
    "else:\n",
    "    print(\"Skipping clustering potential check.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 19. Overall Summary & Conclusion\n",
    "\n",
    "Final assessment based on the EDA checks."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO: Review the logs and plots above for ERRORs or WARNINGs indicating discrepancies.\n",
      "INFO: Key areas checked: Data loading, date range/formats, nulls, row/amount constraints, User/Account mapping, Category/SubCat mapping, fixed expense accuracy, variable amount distributions, ad-hoc frequencies, account usage bias, temporal patterns, and basic visual checks for ML suitability.\n",
      "INFO: Address critical ERRORs (e.g., mapping inconsistencies, constraint violations) by refining data generation script/rules and regenerating.\n",
      "INFO: Consider if WARNINGs (e.g., slight constraint overshoot, weaker-than-expected patterns) are acceptable or require tuning.\n",
      "INFO: Overall assessment: [MANUALLY ADD ASSESSMENT HERE - e.g., 'Data generated successfully and largely adheres to rules. Minor warnings noted for monthly totals. Suitable for Phase 2 development.', OR 'Critical errors found in mappings and frequencies; regeneration required.']\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- EDA Summary ---\n"
     ]
    }
   ],
   "source": [
    "print(\"\\n--- EDA Summary ---\")\n",
    "logging.info(\"Review the logs and plots above for ERRORs or WARNINGs indicating discrepancies.\")\n",
    "logging.info(\"Key areas checked: Data loading, date range/formats, nulls, row/amount constraints, User/Account mapping, Category/SubCat mapping, fixed expense accuracy, variable amount distributions, ad-hoc frequencies, account usage bias, temporal patterns, and basic visual checks for ML suitability.\")\n",
    "logging.info(\"Address critical ERRORs (e.g., mapping inconsistencies, constraint violations) by refining data generation script/rules and regenerating.\")\n",
    "logging.info(\"Consider if WARNINGs (e.g., slight constraint overshoot, weaker-than-expected patterns) are acceptable or require tuning.\")\n",
    "logging.info(\"Overall assessment: [MANUALLY ADD ASSESSMENT HERE - e.g., 'Data generated successfully and largely adheres to rules. Minor warnings noted for monthly totals. Suitable for Phase 2 development.', OR 'Critical errors found in mappings and frequencies; regeneration required.']\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "genai",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

"""

File: generate_code_details.py
Location: reference\generate_code_details.py
Summary: The script `generate_code_details.py` summarizes files in the 'app-personal-finance' project using GPT-4o, writing results to 'reference/instruction_code_details.txt'. It processes `.py` files fully, `.csv` files' top 5 rows, and the first 1000 characters of other files, excluding certain directories and file types.
Code: """
#!/usr/bin/env python3
"""
generate_code_details.py

Summarizes each relevant file in the 'app-personal-finance' project using GPT-4o and writes the result to
'reference/instruction_code_details.txt' in a structured format.

Handles:
- .py files → full code
- .csv files → top 5 rows
- Other files → first 1000 characters
- Skips .env, .log, .db, __pycache__, .git, etc.

Requirements:
- Python 3.8+
- openai>=1.0.0
- python-dotenv
- tqdm
- tenacity
- tiktoken
- pandas
"""

import os
import logging
import time
from pathlib import Path
from dotenv import load_dotenv
from typing import List
import pandas as pd
from openai import OpenAI
from tenacity import retry, wait_random_exponential, stop_after_attempt
import tiktoken

# Load environment variables
load_dotenv()
api_key = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=api_key)

# Configure logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# Define paths
SCRIPT_DIR = Path(__file__).resolve().parent
ROOT_DIR = SCRIPT_DIR.parent
REFERENCE_DIR = ROOT_DIR / "reference"
OUTPUT_FILE = REFERENCE_DIR / "instruction_code_details.txt"

# Define exclusions
EXCLUDED_DIRS = {'.git', '__pycache__', '.vscode', '.idea', '.venv', 'venv', '.mypy_cache', '.pytest_cache'}
EXCLUDED_FILES = {'.env', '.log', '.gitignore'}
EXCLUDED_EXTENSIONS = {'.pyc', '.log', '.env', '.db'}

def get_all_relevant_files(directory: Path) -> List[Path]:
    files = []
    for root, dirs, filenames in os.walk(directory):
        dirs[:] = [d for d in dirs if d not in EXCLUDED_DIRS]
        for fname in filenames:
            fpath = Path(root) / fname
            if (
                fpath.suffix.lower() not in EXCLUDED_EXTENSIONS and
                fpath.name not in EXCLUDED_FILES
            ):
                files.append(fpath)
    return files

def read_file_content(file_path: Path) -> str:
    try:
        if file_path.suffix.lower() == '.csv':
            df = pd.read_csv(file_path)
            return df.head().to_string(index=False)
        with open(file_path, 'r', encoding='utf-8') as f:
            return f.read()
    except Exception as e:
        logger.error(f"Error reading file {file_path}: {e}")
        return "Unable to read file."

def count_tokens(text: str, model: str = "gpt-4o") -> int:
    encoding = tiktoken.encoding_for_model(model)
    return len(encoding.encode(text))

def truncate_for_summary(text: str, model: str = "gpt-4o", max_tokens: int = 8000) -> str:
    encoding = tiktoken.encoding_for_model(model)
    tokens = encoding.encode(text)
    return encoding.decode(tokens[:max_tokens])

@retry(wait=wait_random_exponential(min=1, max=60), stop=stop_after_attempt(6))
def summarize_content(content: str, model: str = "gpt-4o") -> str:
    try:
        if count_tokens(content, model) > 12000:
            content = truncate_for_summary(content, model)
        response = client.chat.completions.create(
            model=model,
            messages=[
                {"role": "system", "content": "You are an assistant that summarizes code files."},
                {"role": "user", "content": f"Summarize the following file in no more than 50 words:\n\n{content}"}
            ],
            temperature=0.3,
            max_tokens=100
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"OpenAI API error: {e}")
        return "Summary could not be generated due to an error."

def main() -> None:
    REFERENCE_DIR.mkdir(parents=True, exist_ok=True)
    files = get_all_relevant_files(ROOT_DIR)

    with open(OUTPUT_FILE, 'w', encoding='utf-8') as out:
        out.write("# instruction_code_details.txt\n")
        out.write("\"\"\"\nDescribes the functionality of each file in the ROOT project directory and its sub directories, their path relative to ROOT, and their code for .py files and relevant snippets for non .py files. Purpose is to set the context of the project.\n\"\"\"\n\n")

        for fpath in files:
            rel_path = fpath.relative_to(ROOT_DIR)
            ftype = fpath.suffix.lower()
            filename = fpath.name

            logger.info(f"Processing {rel_path}")

            code_content = read_file_content(fpath)
            summary_input = code_content if ftype == '.py' else code_content[:1000]
            summary = summarize_content(summary_input)

            out.write(f"File: {filename}\n")
            out.write(f"Location: {rel_path}\n")
            out.write(f"Summary: {summary}\n")
            out.write(f"Code: \"\"\"\n{code_content}\n\"\"\"\n\n")

        logger.info(f"✅ Summaries written to {OUTPUT_FILE}")

if __name__ == "__main__":
    main()

"""

File: generate_code_details_compressed.py
Location: reference\generate_code_details_compressed.py
Summary: This Python script compresses `instruction_code_details.txt` by removing redundant labels, truncating non-Python code to 300 characters, using compact Markdown-style headers, and reducing whitespace. It processes sections based on file, location, and summary headers, and writes the compressed content to an output file.
Code: """
#!/usr/bin/env python3
"""
Compresses instruction_code_details.txt into a more LLM-efficient format by:
1. Removing redundant labels (File/Location/Summary headers)
2. Truncating non-Python code to 300 characters
3. Using compact Markdown-style headers
4. Aggressive whitespace reduction
"""

import re
from pathlib import Path

def compress_file(input_path: Path, output_path: Path) -> None:
    current_block = []
    in_code_block = False
    file_ext = None
    
    with open(input_path, 'r', encoding='utf-8') as infile, \
         open(output_path, 'w', encoding='utf-8') as outfile:
        
        for line in infile:
            line = line.strip()
            
            # Detect section start
            if line.startswith("File: "):
                if current_block:
                    _write_compressed_block(current_block, file_ext, outfile)
                    current_block = []
                current_block.append(f"# {line[6:]}")
            
            elif line.startswith("Location: "):
                path = line[10:]
                file_ext = Path(path).suffix.lower()
                current_block.append(f"@path: {path}")
            
            elif line.startswith("Summary: "):
                current_block.append(f"@summary: {line[9:]}")
            
            elif line == 'Code: """':
                in_code_block = True
                code_lines = []
            
            elif line == '"""' and in_code_block:
                in_code_block = False
                code = '\n'.join(code_lines)
                
                # Apply truncation rules
                if file_ext == '.py':
                    truncated = code[:6000] + ('[...]' if len(code) > 6000 else '')
                else:
                    truncated = code[:300] + ('[...]' if len(code) > 300 else '')
                
                current_block.append(f"@code:\n{truncated}")
            
            elif in_code_block:
                code_lines.append(line)
        
        # Write final block
        if current_block:
            _write_compressed_block(current_block, file_ext, outfile)

def _write_compressed_block(block: list, ext: str, outfile):
    # Join with minimal delimiters
    compressed = '\n'.join(block)
    
    # Add type-specific markers
    if ext == '.py':
        compressed = compressed.replace("# ", "#PY ")
    else:
        compressed = compressed.replace("# ", "#FILE ")
    
    outfile.write(f"\n{compressed}\n")

if __name__ == "__main__":
    input_file = Path(__file__).parent.parent / "reference" / "instruction_code_details.txt"
    output_file = input_file.parent / "instruction_code_details_compressed.txt"
    
    compress_file(input_file, output_file)
    print(f"✅ Compressed file created: {output_file}")
"""

File: generate_data.py
Location: reference\generate_data.py
Summary: The script generates realistic expense data based on rules from 'sample_data_generation.csv' and outputs transactions to 'dummy_expenses_generated.csv' for dates between 2023-01-01 and 2025-04-20. It handles fixed and ad-hoc transactions, ensuring monthly constraints on totals and transaction counts, with detailed logging throughout the process.
Code: """
# reference/create_file_data.py
"""
Generates realistic expense data based on predefined rules and constraints.

Reads rules from 'sample_data_generation.csv' (in project root) and
outputs transactions to 'dummy_expenses_generated.csv' (in project root)
covering the period from 2023-01-01 to 2025-04-20.
"""

import pandas as pd
import numpy as np
import random
from datetime import datetime, timedelta
from pathlib import Path
import logging
from tqdm import tqdm # For progress bar
from typing import List, Dict, Any, Optional

# --- Configuration ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# --- File Paths (CRITICAL CHANGE) ---
# Get the directory where THIS script lives (reference/)
SCRIPT_DIR = Path(__file__).parent
# Get the parent directory (project root: app-personal-finance/)
PROJECT_ROOT = SCRIPT_DIR.parent

# Define paths relative to the PROJECT_ROOT
RULES_FILE = PROJECT_ROOT / "sample_data_generation.csv"
OUTPUT_FILE = PROJECT_ROOT / "dummy_expenses_generated.csv"
METADATA_FILE = PROJECT_ROOT / "expense_metadata.json" # Optional, for validation/reference

# Date Range
START_DATE = datetime(2023, 1, 1)
END_DATE = datetime(2025, 4, 20)

# Constraints
MONTHLY_MIN_TOTAL = 60000
MONTHLY_MAX_TOTAL = 120000
MONTHLY_MAX_ROWS = 100

# Ad-hoc Transaction Generation Parameters
AVG_ADHOC_PER_DAY = 4 # Average number of ad-hoc transactions per day
ADHOC_RANGE = (1, 7) # Min/Max ad-hoc transactions per day (adjust as needed)

# --- Helper Functions (No changes needed inside functions) ---

def load_rules(filepath: Path) -> Optional[pd.DataFrame]:
    """Loads and preprocesses the ruleset CSV."""
    if not filepath.exists():
        logging.error(f"Rules file not found: {filepath}")
        return None
    try:
        df_rules = pd.read_csv(filepath)
        df_rules.columns = [col.strip() for col in df_rules.columns]
        df_rules['Valid-expense-types'] = df_rules['Valid-expense-types'].str.split('|')
        for col in ['Min-expenses-amount', 'Max-expenses-amount', 'Max-times-per-month']:
            df_rules[col] = pd.to_numeric(df_rules[col], errors='coerce')
        df_rules['Max-times-per-month'].fillna(5, inplace=True)
        df_rules['Max-times-per-month'] = df_rules['Max-times-per-month'].astype(int)
        df_rules.dropna(subset=['Category', 'Sub-category', 'User', 'Account', 'Expense-Frequency', 'Min-expenses-amount', 'Max-expenses-amount'], inplace=True)
        logging.info(f"Loaded {len(df_rules)} rules from {filepath}")
        return df_rules
    except Exception as e:
        logging.error(f"Error loading or processing rules file {filepath}: {e}", exc_info=True)
        return None

def get_date_parts(date_obj: datetime) -> Dict[str, Any]:
    """Calculates derived date columns."""
    return {
        "date_dt": date_obj,
        "date": date_obj.strftime('%d-%m-%Y'),
        "year": date_obj.year,
        "month": date_obj.strftime('%Y-%m'),
        "week": date_obj.strftime('%Y-W%V'),
        "day_of_week": date_obj.strftime('%A')
    }

def generate_fixed_transaction(rule: pd.Series, date_info: Dict[str, Any]) -> Optional[Dict[str, Any]]:
    """Generates a dictionary for a fixed transaction based on a rule."""
    if rule['Min-expenses-amount'] != rule['Max-expenses-amount']:
        logging.warning(f"Rule marked as fixed frequency but Min!=Max: {rule.to_dict()}")
        return None
    amount = rule['Min-expenses-amount']
    valid_types = rule['Valid-expense-types']
    selected_type = valid_types[0] if isinstance(valid_types, list) and valid_types else "Fixed Expense"
    return {
        **date_info, "account": rule['Account'], "category": rule['Category'],
        "sub_category": rule['Sub-category'], "type": selected_type,
        "user": rule['User'], "amount": amount
    }

def generate_adhoc_transaction(rule: pd.Series, date_info: Dict[str, Any]) -> Dict[str, Any]:
    """Generates a dictionary for an ad-hoc transaction based on a rule."""
    amount = round(random.uniform(rule['Min-expenses-amount'], rule['Max-expenses-amount']), 2)
    selected_type = random.choice(rule['Valid-expense-types']) if isinstance(rule['Valid-expense-types'], list) and rule['Valid-expense-types'] else "Ad-hoc Expense"
    return {
        **date_info, "account": rule['Account'], "category": rule['Category'],
        "sub_category": rule['Sub-category'], "type": selected_type,
        "user": rule['User'], "amount": amount
    }

def check_fixed_conditions(rule: pd.Series, current_date: datetime) -> bool:
    """Checks if a fixed/recurring rule should trigger on the current date."""
    freq = rule['Expense-Frequency']
    day = current_date.day
    month = current_date.month

    if freq == 'monthly':
        if rule['Category'] == 'Rent' and day == 1: return True
        if rule['Category'] == 'Household' and rule['Sub-category'] == 'Maid' and day == 1: return True
        if rule['Category'] == 'Investment' and rule['Sub-category'] == 'SIP' and day == 5: return True
        if rule['Category'] == 'Insurance Premium' and rule['Sub-category'] == 'ULIP' and day == 10: return True
        if rule['Category'] == 'Insurance Premium' and rule['Sub-category'] == 'Health Insurance' and day == 15: return True
        if rule['Category'] == 'Connectivity' and rule['Sub-category'] == 'Netflix' and day == 20: return True # Example day for monthly connectivity
        if rule['Category'] == 'Utilities' and rule['Sub-category'] == 'Water' and day == 7: return True # Example day
        if rule['Category'] == 'Utilities' and rule['Sub-category'] == 'Maintenance' and day == 6: return True # Example day
        if rule['Category'] == 'Utilities' and rule['Sub-category'] == 'Garbage Collection' and day == 3: return True # Example day
        return False
    elif freq == 'bi-monthly': # Odd months, day 2
        return month % 2 != 0 and day == 2
    elif freq == 'once every 3 months': # Jan, Apr, Jul, Oct, day 3
        return month in [1, 4, 7, 10] and day == 3
    elif freq == 'once every 6 months': # Jan, Jul, day 4
        return month in [1, 7] and day == 4
    elif freq == 'bi-annually': # Mar 20, Sep 20
        return (month == 3 and day == 20) or (month == 9 and day == 20)
    elif freq == 'annually': # Jan 15
         # Handle specific annual items
        if rule['Category'] == 'Insurance Premium' and rule['Sub-category'] == 'Vehicle Insurance': return month == 2 and day == 25 # Example Date
        if rule['Category'] == 'Connectivity' and rule['Sub-category'] == 'Prime Video': return month == 1 and day == 15 # Example Date
        if rule['Category'] == 'Connectivity' and rule['Sub-category'] == 'Disney+ Hotstar': return month == 1 and day == 16 # Example Date
        return False # Only trigger specific annuals
    return False

# --- Main Generation Logic (No changes needed inside function) ---
def generate_data():
    """Main function to generate the expense data."""
    logging.info("--- Starting Data Generation ---")
    logging.info(f"Looking for rules file at: {RULES_FILE}")
    logging.info(f"Output will be saved to: {OUTPUT_FILE}")

    df_rules = load_rules(RULES_FILE)
    if df_rules is None:
        return

    fixed_rules = df_rules[df_rules['Expense-Frequency'] != 'ad-hoc'].copy()
    adhoc_rules = df_rules[df_rules['Expense-Frequency'] == 'ad-hoc'].copy()

    all_transactions = []
    current_date = START_DATE
    total_days = (END_DATE - START_DATE).days + 1
    pbar = tqdm(total=total_days, desc="Generating Daily Transactions")

    current_month_str = ""
    current_month_total = 0.0
    current_month_rows = 0
    monthly_rule_counts: Dict[int, int] = {}

    while current_date <= END_DATE:
        date_info = get_date_parts(current_date)

        if date_info['month'] != current_month_str:
            if current_month_str:
                logging.info(f"Month {current_month_str} Summary: Rows={current_month_rows}, Total=₹{current_month_total:.2f}")
                if current_month_total < MONTHLY_MIN_TOTAL: logging.warning(f"Month {current_month_str} total ₹{current_month_total:.2f} BELOW target minimum ₹{MONTHLY_MIN_TOTAL}")
                if current_month_total > MONTHLY_MAX_TOTAL: logging.warning(f"Month {current_month_str} total ₹{current_month_total:.2f} ABOVE target maximum ₹{MONTHLY_MAX_TOTAL}")
                if current_month_rows > MONTHLY_MAX_ROWS: logging.warning(f"Month {current_month_str} rows {current_month_rows} EXCEEDED target maximum {MONTHLY_MAX_ROWS}")
            current_month_str = date_info['month']
            current_month_total = 0.0; current_month_rows = 0; monthly_rule_counts = {}
            logging.debug(f"Starting generation for month: {current_month_str}")

        # 1. Generate Fixed Transactions
        for index, rule in fixed_rules.iterrows():
            if check_fixed_conditions(rule, current_date):
                transaction = generate_fixed_transaction(rule, date_info)
                if transaction and current_month_rows < MONTHLY_MAX_ROWS + 5:
                     all_transactions.append(transaction)
                     current_month_total += transaction['amount']
                     current_month_rows += 1
                     monthly_rule_counts[index] = monthly_rule_counts.get(index, 0) + 1
                     logging.debug(f"Generated fixed: {transaction['category']}/{transaction['sub_category']} on {date_info['date']}")
                elif transaction:
                     logging.warning(f"Skipped fixed {rule['Category']}/{rule['Sub-category']} on {date_info['date']} (Monthly row limit: {current_month_rows})")

        # 2. Generate Ad-hoc Transactions
        num_adhoc_today = random.randint(ADHOC_RANGE[0], ADHOC_RANGE[1])
        adhoc_added_today = 0
        weights = adhoc_rules['Account'].apply(lambda x: 1.5 if x in ['Anirban-ICICI', 'Puspita-SBI'] else 1.0).values
        if weights.sum() > 0: weights = weights / weights.sum()
        else: weights = None

        for _ in range(num_adhoc_today):
            if current_month_total >= MONTHLY_MAX_TOTAL or current_month_rows >= MONTHLY_MAX_ROWS:
                logging.debug(f"Stopping ad-hoc for {date_info['date']} due to limits.")
                break
            if weights is None or adhoc_rules.empty: continue

            rule_selected = False
            for attempt in range(5):
                 try:
                     selected_rule_series = adhoc_rules.sample(n=1, weights=weights).iloc[0]
                     rule_index = selected_rule_series.name
                 except ValueError as e: logging.warning(f"Adhoc sample error: {e}"); continue

                 current_rule_count = monthly_rule_counts.get(rule_index, 0)
                 max_allowed = selected_rule_series['Max-times-per-month']

                 if current_rule_count < max_allowed:
                     transaction = generate_adhoc_transaction(selected_rule_series, date_info)
                     # Further check if adding this exceeds monthly total *drastically*
                     if current_month_total + transaction['amount'] <= MONTHLY_MAX_TOTAL * 1.05: # Allow slight overshoot
                         all_transactions.append(transaction)
                         current_month_total += transaction['amount']
                         current_month_rows += 1
                         monthly_rule_counts[rule_index] = current_rule_count + 1
                         adhoc_added_today += 1
                         rule_selected = True
                         logging.debug(f"Generated adhoc: {transaction['category']}/{transaction['sub_category']} on {date_info['date']}")
                         break # Exit retry loop
                     else:
                         logging.debug(f"Skipping adhoc {selected_rule_series['Category']}/{selected_rule_series['Sub-category']} to avoid exceeding monthly total drastically.")
                         # Don't break, allow trying another rule maybe
                 else:
                     logging.debug(f"Rule {rule_index} hit monthly limit ({max_allowed}). Retrying...")

            if not rule_selected: logging.debug(f"Could not find valid ad-hoc rule for {date_info['date']} after retries.")

        current_date += timedelta(days=1)
        pbar.update(1)

    pbar.close()
    # Log summary for the very last month
    if current_month_str:
        logging.info(f"Month {current_month_str} Summary: Rows={current_month_rows}, Total=₹{current_month_total:.2f}")
        if current_month_total < MONTHLY_MIN_TOTAL: logging.warning(f"Month {current_month_str} total ₹{current_month_total:.2f} BELOW target minimum ₹{MONTHLY_MIN_TOTAL}")
        if current_month_total > MONTHLY_MAX_TOTAL: logging.warning(f"Month {current_month_str} total ₹{current_month_total:.2f} ABOVE target maximum ₹{MONTHLY_MAX_TOTAL}")
        if current_month_rows > MONTHLY_MAX_ROWS: logging.warning(f"Month {current_month_str} rows {current_month_rows} EXCEEDED target maximum {MONTHLY_MAX_ROWS}")


    if not all_transactions:
        logging.warning("No transactions were generated.")
        return

    df_final = pd.DataFrame(all_transactions)
    output_columns = ['date', 'year', 'month', 'week', 'day_of_week', 'account', 'category', 'sub_category', 'type', 'user', 'amount']
    df_final = df_final[output_columns]

    logging.info(f"--- Data Generation Complete ---")
    logging.info(f"Total transactions generated: {len(df_final)}")

    try:
        df_final.to_csv(OUTPUT_FILE, index=False, encoding='utf-8')
        logging.info(f"Successfully saved generated data to: {OUTPUT_FILE}")
    except Exception as e:
        logging.error(f"Error saving output CSV file {OUTPUT_FILE}: {e}", exc_info=True)

# --- Execution Guard ---
if __name__ == "__main__":
    generate_data()
"""

File: generate_summary.py
Location: reference\generate_summary.py
Summary: The script `generate_summary.py` is a documentation generator for the `app-personal-finance` project. It combines functionalities from three scripts to generate code summaries, compress code details, and create a folder tree. It uses OpenAI for summarization, handles file exclusions, and outputs results to a reference directory.
Code: """
#!/usr/bin/env python3
"""
generate_summary.py - Combined documentation generator for app-personal-finance
Combines functionality from:
- generate_code_details.py
- generate_code_details_compressed.py 
- generate_tree.py
"""

import os
import logging
from pathlib import Path
from dotenv import load_dotenv
from typing import List
import pandas as pd
from openai import OpenAI
from tenacity import retry, wait_random_exponential, stop_after_attempt
import tiktoken

# --- Configuration ---
load_dotenv()
SCRIPT_DIR = Path(__file__).resolve().parent
ROOT_DIR = SCRIPT_DIR.parent
REFERENCE_DIR = ROOT_DIR / "reference"

# File paths
CODE_DETAILS_PATH = REFERENCE_DIR / "instruction_code_details.txt"
COMPRESSED_PATH = REFERENCE_DIR / "instruction_code_details_compressed.txt"
TREE_PATH = REFERENCE_DIR / "instruction_file_tree.txt"

# Exclusion lists (combined from original scripts)
EXCLUDED_DIRS = {'.git', '__pycache__', '.vscode', '.idea', '.venv', 'venv', 
                '.mypy_cache', '.pytest_cache', '.git', '.vscode', '.idea', 'venv'}
EXCLUDED_FILES = {'.env', '.log', '.gitignore', '.env', '.gitignore'}
EXCLUDED_EXTENSIONS = {'.pyc', '.log', '.env', '.db'}

# OpenAI setup
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# --- Shared Functions from generate_code_details.py ---
def get_all_relevant_files(directory: Path) -> List[Path]:
    files = []
    for root, dirs, filenames in os.walk(directory):
        dirs[:] = [d for d in dirs if d not in EXCLUDED_DIRS]
        for fname in filenames:
            fpath = Path(root) / fname
            if (fpath.suffix.lower() not in EXCLUDED_EXTENSIONS and 
                fpath.name not in EXCLUDED_FILES):
                files.append(fpath)
    return files

def read_file_content(file_path: Path) -> str:
    try:
        if file_path.suffix.lower() == '.csv':
            df = pd.read_csv(file_path)
            return df.head().to_string(index=False)
        with open(file_path, 'r', encoding='utf-8') as f:
            return f.read()
    except Exception as e:
        logging.error(f"Error reading file {file_path}: {e}")
        return "Unable to read file."

@retry(wait=wait_random_exponential(min=1, max=60), stop=stop_after_attempt(6))
def summarize_content(content: str, model: str = "gpt-4o") -> str:
    try:
        encoding = tiktoken.encoding_for_model(model)
        tokens = encoding.encode(content)
        if len(tokens) > 12000:
            content = encoding.decode(tokens[:8000])
        response = client.chat.completions.create(
            model=model,
            messages=[{
                "role": "system",
                "content": "You are an assistant that summarizes code files."
            }, {
                "role": "user",
                "content": f"Summarize the following file in no more than 50 words:\n\n{content}"
            }],
            temperature=0.3,
            max_tokens=100
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logging.error(f"OpenAI API error: {e}")
        return "Summary could not be generated."

# --- Compression Logic from generate_code_details_compressed.py ---
def compress_code_details():
    current_block = []
    in_code_block = False
    file_ext = None
    
    with open(CODE_DETAILS_PATH, 'r', encoding='utf-8') as infile, \
         open(COMPRESSED_PATH, 'w', encoding='utf-8') as outfile:
        
        for line in infile:
            line = line.strip()
            
            if line.startswith("File: "):
                if current_block:
                    _write_compressed_block(current_block, file_ext, outfile)
                    current_block = []
                current_block.append(f"# {line[6:]}")
            
            elif line.startswith("Location: "):
                path = line[10:]
                file_ext = Path(path).suffix.lower()
                current_block.append(f"@path: {path}")
            
            elif line.startswith("Summary: "):
                current_block.append(f"@summary: {line[9:]}")
            
            elif line == 'Code: """':
                in_code_block = True
                code_lines = []
            
            elif line == '"""' and in_code_block:
                in_code_block = False
                code = '\n'.join(code_lines)
                truncated = code[:6000] + ('[...]' if len(code) > 6000 else '') \
                    if file_ext == '.py' else code[:300] + ('[...]' if len(code) > 300 else '')
                current_block.append(f"@code:\n{truncated}")
            
            elif in_code_block:
                code_lines.append(line)
        
        if current_block:
            _write_compressed_block(current_block, file_ext, outfile)

def _write_compressed_block(block: list, ext: str, outfile):
    compressed = '\n'.join(block)
    marker = "#PY " if ext == '.py' else "#FILE "
    outfile.write(f"\n{compressed.replace('# ', marker)}\n")

# --- Tree Generation from generate_tree.py ---
def generate_folder_tree():
    with open(TREE_PATH, 'w', encoding='utf-8') as f:
        for root, dirs, files in os.walk(ROOT_DIR, topdown=True):
            dirs[:] = [d for d in dirs if d not in EXCLUDED_DIRS]
            level = root.replace(str(ROOT_DIR), '').count(os.sep)
            indent = ' ' * 4 * level
            
            if root == str(ROOT_DIR):
                f.write(f'{ROOT_DIR.name}/\n')
            else:
                f.write(f'{indent}{os.path.basename(root)}/\n')
            
            subindent = ' ' * 4 * (level + 1)
            for file in files:
                if file not in EXCLUDED_FILES:
                    f.write(f'{subindent}{file}\n')

# --- Main Execution Flow ---
def main():
    REFERENCE_DIR.mkdir(parents=True, exist_ok=True)
    
    # Step 1: Generate code details
    with open(CODE_DETAILS_PATH, 'w', encoding='utf-8') as out:
        out.write("# instruction_code_details.txt\n\"\"\"\nDescribes the functionality of each file...\n\"\"\"\n\n")
        for fpath in get_all_relevant_files(ROOT_DIR):
            rel_path = fpath.relative_to(ROOT_DIR)
            content = read_file_content(fpath)
            summary = summarize_content(content if fpath.suffix == '.py' else content[:1000])
            out.write(f"File: {fpath.name}\nLocation: {rel_path}\nSummary: {summary}\nCode: \"\"\"\n{content}\n\"\"\"\n\n")
    
    # Step 2: Compress code details
    compress_code_details()
    
    # Step 3: Generate folder tree
    generate_folder_tree()
    
    print(f"✅ Summary files generated in {REFERENCE_DIR}")

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    main()
"""

File: generate_tree.py
Location: reference\generate_tree.py
Summary: The `generate_tree.py` script generates a text file representing the folder tree structure starting from a specified root directory. It allows excluding certain directories and saves the output to a specified file path. The script is configured to exclude common directories like `__pycache__` and `.git`.
Code: """
# reference/generate_tree.py
import os

def generate_folder_tree(start_path, output_path, exclude_dirs=None):
    """
    Generates a text file representing the folder tree structure.

    Args:
        start_path (str): The root directory from which to generate the tree.
        output_path (str): The full path (including filename) where the
                           tree structure text file will be saved.
        exclude_dirs (list, optional): A list of directory names to exclude
                                      from the tree. Defaults to None.
    """
    if exclude_dirs is None:
        exclude_dirs = []

    # Use 'utf-8' encoding for wider character support
    with open(output_path, 'w', encoding='utf-8') as f:
        # os.walk generates the file names in a directory tree
        for root, dirs, files in os.walk(start_path, topdown=True):
            # --- Exclusion Logic ---
            # Modify dirs in-place to prevent os.walk from descending into them
            dirs[:] = [d for d in dirs if d not in exclude_dirs]
            # -----------------------

            # Calculate the level of depth relative to start_path for indentation
            # Add 1 to handle the root level correctly if start_path itself is listed
            level = root.replace(start_path, '').count(os.sep)
            if root == start_path:
                 level = 0 # Ensure root is not indented

            indent = ' ' * 4 * (level)

            # Write the directory name relative to start_path
            # Handle the root directory name specifically
            if root == start_path:
                 f.write(f'{os.path.basename(start_path)}/\n')
            else:
                 f.write(f'{indent}{os.path.basename(root)}/\n')

            # Indent for files within the directory
            subindent = ' ' * 4 * (level + 1)
            # List files in the current directory
            for file in files:
                f.write(f'{subindent}{file}\n')

    print(f"Folder tree (excluding {exclude_dirs}) saved to: {output_path}")

if __name__ == "__main__":
    # Get the directory where the script itself is located (reference/)
    script_dir = os.path.dirname(os.path.abspath(__file__))

    # Get the parent directory of the script's location (project root)
    project_root_dir = os.path.dirname(script_dir)

    # Define the name for the output file
    output_filename = "instruction_file_tree.txt"

    # Construct the full path for the output file within the reference/ folder
    output_file_path = os.path.join(script_dir, output_filename)

    # Define directories to exclude
    folders_to_exclude = ["__pycache__", ".git", ".idea", ".vscode", "venv"]

    # Generate the tree starting from the project root directory
    # and save the output in the reference/ folder
    generate_folder_tree(
        start_path=project_root_dir,
        output_path=output_file_path,
        exclude_dirs=folders_to_exclude
    )
"""

File: git_workflow_guide.md
Location: reference\git_workflow_guide.md
Summary: This guide outlines managing Git history for a personal expense tracker project. It covers reverting to a specific milestone (`v1.0.0`), which involves discarding later commits and using `git push --force`, and emphasizes caution due to potential collaboration issues. It also advises using branches for safe feature development.
Code: """
# Git Workflow Guide for Personal Expense Tracker

This guide explains how to manage Git history for this project, specifically focusing on:
1. Reverting the project back to a specific milestone (tag).
2. Using branches for developing new features safely.

## 1. Reverting to Milestone `v1.0.0` (Undoing Later Changes)

This process makes your project (local files and GitHub remote) look exactly like it did when tagged `v1.0.0`. It **discards** commits made *after* that tag on the target branch (usually `main`).

**⚠️ WARNING:** This involves rewriting history on the remote repository (`git push --force`). This is dangerous if others are collaborating. Since it's just two users for now, it's manageable, but **proceed with extreme caution** and ensure both users understand the implications before forcing changes to the remote.

### Steps to Revert `main` Branch to `v1.0.0`:

1.  **Confirm Current Branch:** Ensure you're on the branch you intend to reset (e.g., `main`).
    ```bash
    git status
    # Output should indicate you are on branch 'main'
    ```

2.  **Ensure Clean Working Directory:** Commit or stash any changes you want to keep.
    ```bash
    git status
    # Should say "nothing to commit, working tree clean"
    ```

3.  **Reset Local Branch HARD to the Tag:** This moves the local `main` branch pointer back to `v1.0.0` and **discards subsequent commits/changes** on this local branch.
    ```bash
    git reset --hard v1.0.0
    ```

4.  **Force Push to Remote:** Overwrite the remote branch history with your reset local history.
    ```bash
    git push origin main --force
    ```
    *   **🚨 VERY IMPORTANT:** Using `--force` **deletes history** on GitHub for this branch. Only use if absolutely necessary and coordinated.
    *   *(Slightly Safer Alternative):* `git push origin main --force-with-lease` offers a minor safety check against overwriting unseen remote changes, but still force pushes.

**Outcome:** Both your local `main` branch and the `main` branch on GitHub now reflect the exact state of the `v1.0.0` tag. Commits made after `v1.0.0` on this branch are effectively gone from the main history line.

## 2. Using Branches for Development (The Recommended Workflow)

Branches allow you to work on new features (like the Phase 2 chatbot) in isolation without affecting your stable `main` branch.

### Workflow Example (Starting Chatbot Feature after `v1.0.0`):

1.  **Start on `main` and Update:** Ensure your main branch is up-to-date.
    ```bash
    git checkout main
    git pull origin main
    ```

2.  **Create a Feature Branch:** Create and switch to a new branch for the feature.
    ```bash
    git checkout -b feature/chatbot
    # You are now on branch 'feature/chatbot'
    ```
    *   This branch starts as a copy of `main` at this point (`v1.0.0`). Changes here won't affect `main`.

3.  **Develop on the Feature Branch:**
    *   Write code, add files, modify existing ones for the chatbot.
    *   Commit your changes frequently with clear messages:
      ```bash
      # ... make changes ...
      git add .
      git commit -m "Add basic chatbot UI structure"
      # ... make more changes ...
      git add .
      git commit -m "Implement LangGraph agent skeleton"
      ```

4.  **Push the Feature Branch to Remote:** Back up your work and enable potential collaboration.
    ```bash
    # First time pushing this new branch:
    git push -u origin feature/chatbot
    # Subsequent pushes on this branch:
    # git push
    ```

5.  **Continue Development:** Repeat step 3 & 4 as needed. Your `main` branch remains stable.

6.  **Merging (When Feature is Ready & Tested):**
    *   **Switch back to `main`:**
        ```bash
        git checkout main
        ```
    *   **Update `main`:** Ensure `main` has the latest changes from the remote (if any).
        ```bash
        git pull origin main
        ```
    *   **Merge the feature branch into `main`:**
        ```bash
        git merge feature/chatbot
        ```
        *   This brings all the commits from `feature/chatbot` into `main`.
        *   **Handle Conflicts:** If Git reports merge conflicts, you must manually edit the indicated files to resolve the differences, then `git add .` and `git commit` to complete the merge.
    *   **Push the Updated `main`:**
        ```bash
        git push origin main
        ```

7.  **Tag the New Milestone (Optional but Recommended):**
    ```bash
    git tag v2.0.0 -m "Phase 2 complete: Chatbot feature integrated."
    git push origin v2.0.0
    ```

8.  **Clean Up (Optional):** Delete the feature branch after successful merge.
    ```bash
    # Delete local branch
    git branch -d feature/chatbot
    # Delete remote branch
    git push origin --delete feature/chatbot
    ```

### Workflow Summary:

*   **`main`:** Keep stable, reflects working/deployed versions.
*   **Feature Branches:** Create for *all* new work (`git checkout -b <branch_name>`).
*   **Develop:** Code, commit, push on the feature branch.
*   **Merge:** When feature is done, update `main` (`git pull`), then merge the feature branch *into* `main` (`git merge <branch_name>`).
*   **Push `main`**.
*   **Tag** major milestones (`git tag`).

This branching strategy is much safer and is the standard professional practice. Use tags (`v1.0.0`, etc.) to easily revisit specific points in time without disrupting ongoing development.
"""

File: instruction_advanced_question_types.txt
Location: reference\instruction_advanced_question_types.txt
Summary: The file outlines how a Data Science Sub Agent (DSA) categorizes user questions into five advanced machine learning types: Regression, Forecasting, Classification, Segmentation, and Unsupervised Clustering. It provides detailed reasoning and examples for each type, tailored for a personal finance advisor app.
Code: """
These are sample user questions.These are the questions which the DATA SCIENCE SUB AGENT (DSA) needs to answer. The DSA will categorize questions in one of the 5 advanced question types:Regression, Forecasting, Classification, Segmentation, Unsupervised Clustering. Here we have detailed reasoning for 5 example question across each of the 5 ML types (Regression, Forecasting, Classification, Segmentation, Unsupervised Clustering), specifically tailored for my 2-person personal finance advisor app.

1. Regression Questions (Predicting Specific Numerical Values)

	Goal: Predict a continuous numerical value (usually Amount) for a specific event or instance based on its characteristics.

	Why Regression (vs. Forecasting)? Focuses on the relationship between features of a single instance and its numerical outcome, rather than predicting the next value in a sequence based primarily on past values and time patterns.

	Question: "Predict the cost (Amount) of the next 'Household Repair' (Plumbing, Electrical, Appliance) needed, based on the specific type of repair (Sub-category) and the month it occurs?"

	Reasoning: This predicts a single numerical value (cost) for an often irregular event. Key predictors are the features of that specific event (type of repair, seasonality via month), not necessarily the cost of the last repair (as that could have been entirely different). It's not a time series prediction of monthly repair totals.

	Benefit: Helps anticipate costs for necessary but unpredictable maintenance.

	Question: "Estimate the Amount Anirban is likely to spend on a single 'Shopping' transaction at 'Amazon' or 'Flipkart', considering the platform (Sub-category), the month (for potential sales events), and the day of the week?"

	Reasoning: Predicts the value of one shopping instance. The platform (Amazon vs. Flipkart), time of year (sales), and whether it's a weekend might influence the basket size more directly than the amount spent on the previous online order. This models the characteristics-to-amount relationship for a specific event.

	Benefit: Understands typical spending per online shopping session on major platforms.

	Question: "What is the predicted Amount for a 'Food Delivery' order, based on the User ordering, the DayOfWeek, and potentially the restaurant mentioned in 'Type' (requires NLP)?"

	Reasoning: Focuses on predicting the cost of a single food delivery event. The user (different preferences/order sizes), day (weekend vs. weekday), and restaurant choice (if extractable) are direct features influencing the cost of that specific order, distinguishing it from forecasting total monthly food delivery spend.

	Benefit: Provides insight into typical meal costs when ordering in, varying by person and context.

	Question: "Predict the Amount Puspita will spend on her next 'Flight' booking, based on the month of booking and the account used ('Puspita-Bandhan' vs. 'Puspita-SBI')?"

	Reasoning: Predicts the cost of one specific, potentially high-value, and infrequent event. While seasonal factors (Month) matter, the model uses features associated with the booking event (like which account is used, potentially reflecting different trip types/budgets associated with that account) rather than forecasting a sequence of flight costs.

	Benefit: Helps plan for significant, variable travel expenses often associated with specific accounts or times of year.

	Question: "Estimate the Amount of a 'Gifts & Donations' transaction, based on the Sub-category ('Family', 'Friends', 'Charity', 'Temple') and the User making the transaction?"

	Reasoning: Predicts the value of a single gifting/donation instance. The recipient/purpose (Sub-category) and who is giving (User) are likely the primary drivers of the amount for that specific transaction, rather than forming a predictable time series pattern.

	Benefit: Understands typical spending levels for different types of gifts or donations, varying by person and occasion/recipient.

2. Forecasting Questions (Predicting Future Values in a Time Series)

	Goal: Predict future values (often numerical aggregates) of a variable that evolves sequentially over time.

	Why Forecasting (vs. Regression)? Focuses explicitly on the temporal dependencies – trend, seasonality, and autocorrelation (how past values influence future values) – inherent in the time series data itself. The primary input is the historical sequence.

	Question: "What is the forecasted total combined spending (Anirban + Puspita) across all categories for the next calendar month?"

	Reasoning: This predicts an aggregate value over a future time period (next month). The prediction relies primarily on the historical sequence of total monthly spending, capturing overall trends (e.g., lifestyle inflation) and seasonality (e.g., higher spending near holidays). This is a classic time series forecasting problem.

	Benefit: High-level budget planning and cash flow projection for the household.

	Question: "Forecast the total amount we are likely to spend on 'Groceries' in the next 4 weeks (providing a weekly breakdown)."

	Reasoning: Predicts an aggregate spend for a specific category over multiple future time periods (next 4 weeks). Grocery spending often has weekly cycles (stock-ups) and monthly patterns. Forecasting models explicitly handle these temporal patterns based on the history of weekly/monthly grocery totals.

	Benefit: Detailed near-term budget planning for a major, recurring expense category.

	Question: "What is the predicted total monthly spending attributed to Puspita for the next 3 months?"

	Reasoning: Treats Puspita's total personal spending as a time series. It forecasts the future aggregate monthly values based on her historical spending patterns, trends, and seasonality, distinct from predicting a single future transaction's amount based on its features (which would be regression).

	Benefit: Helps track and plan individual spending contributions and budgets over the medium term.

	Question: "Forecast the combined monthly spending specifically on the 'Waste' category (Smoke, Alcohol) for the next month."

	Reasoning: This involves predicting the aggregate amount for a specific (potentially sensitive) category over the next time period. Even if irregular, if there's any underlying trend or seasonality in this combined category total over months, forecasting attempts to capture it from the historical sequence.

	Benefit: Helps monitor and potentially manage spending in non-essential/habitual categories by predicting the near-term outlay based on past patterns.

	Question: "Predict the total number of transactions (count, not amount) we are likely to make as a couple in the next week."

	Reasoning: This forecasts a count over a future time period. Transaction frequency itself can be treated as a time series. It depends on the historical pattern of weekly transaction counts, including any day-of-week or intra-month effects. Regression wouldn't typically predict a count for a future period based on the sequence.

	Benefit: Provides insight into the activity level of spending, complementing amount-based forecasts. High frequency might indicate many small purchases.

3. Classification Questions (Predicting Predefined Labels)

	Goal: Assign an instance (e.g., a transaction, a day) to one of several predefined, discrete classes based on its features.

	Why Classification (vs. Segmentation/Clustering)? We are predicting membership in known, predefined categories (like Essential/Discretionary). We are not defining the segments themselves (Segmentation) or discovering unknown groups (Clustering).

	Question: "Classify each transaction as 'Essential' or 'Discretionary' based on its Category/Sub-category." (Requires a predefined mapping rule).

	Reasoning: Assigns each transaction instance to one of two predefined labels. This is the canonical classification task. It's not segmentation because we aren't analyzing the characteristics of the 'Essential' group vs. 'Discretionary' group, but rather labeling individual items. It's not clustering because the labels are known beforehand.

	Benefit: Automatic categorization for budget analysis (Needs vs. Wants).

	Question: "Based on amount, time of day, and day of week, classify a 'Restaurant' transaction as 'Meal' (likely lunch/dinner cost) or 'Snack/Coffee' (lower cost, typical cafe/snack times)?"

	Reasoning: Assigns restaurant transactions to one of two predefined functional categories ('Meal'/'Snack') based on their features. The rules/model defines the boundary between these known classes. It differs from clustering, which might discover different groupings automatically.

	Benefit: Provides more context to restaurant spending beyond just the total amount.

	Question: "Classify each month as a 'High Travel Spending Month' (Yes/No) based on whether total Travel category spending exceeds a certain threshold (e.g., ₹15,000 combined)?"

	Reasoning: Assigns a predefined binary label ('High Travel' / 'Normal Travel') to each month based on a rule applied to aggregated data for that month. It's classification because the label is predefined. It's not segmentation because the focus is labeling the month, not analyzing the characteristics of all 'High Travel Months' together.

	Benefit: Quickly identifies periods dominated by significant travel costs.

	Question: "Predict if a 'Shopping' transaction made by Anirban is likely for 'Electronics' (Yes/No) based on the Sub-category (Amazon, Flipkart, Purple, Lifestyle, Max, Myntra) and the Amount (higher amounts might suggest electronics)?"

	Reasoning: Assigns a predefined label ('Electronics'/'Not Electronics') to individual shopping transactions. This requires defining which sub-categories can sell electronics and potentially learning from amount patterns. It's classification because the target label is known.

	Benefit: Helps infer the purpose of shopping transactions on general platforms where the sub-category alone isn't specific enough.

	Question: "Classify a day as having 'Anomalous Spending' (Yes/No) if the total daily spend is significantly higher (e.g., > 3 standard deviations above the rolling monthly average) than usual for that day of the week?"

	Reasoning: Assigns a predefined binary label ('Anomalous'/'Normal') to each day based on a statistical rule comparing its spend to its historical context. It's classification because the label is defined by the rule. It differs from clustering which might find groups of 'high spending days' without the context of deviation from the norm.

	Benefit: Automatically flags days with unusually high expenditure for review.

4. Segmentation Questions (Analyzing Predefined Groups)

	Goal: Divide data into meaningful, predefined groups based on rules or shared characteristics, and then analyze and compare these segments.

	Why Segmentation (vs. Classification/Clustering)? The primary focus is on defining the groups first based on domain knowledge or specific criteria, and then describing or comparing the data within those defined segments. It's not predicting a label for new instances (Classification) or discovering unknown groups (Clustering).

	Question: "Compare the spending patterns (top categories, avg. transaction amount, user split) within two defined segments: 'Planned Recurring Expenses' (Rent, SIP, ULIP, Insurance Premiums) vs. 'Variable & Discretionary Expenses' (all other categories)."

	Reasoning: We first define segments based on category purpose ('Planned Recurring' vs. 'Variable/Discretionary'). The analysis then compares the characteristics of transactions falling into these predefined groups. This is segmentation analysis, not classification (not predicting segment for a new transaction) or clustering (segments are predefined).

	Benefit: Clearly separates committed outflows from flexible spending for high-level budget understanding.

	Question: "Analyze the 'High-Frequency Spending' segment (transactions under ₹300). What are the dominant categories, sub-categories, and users within this segment? Does its total monthly value change significantly?"

	Reasoning: We define a segment based on a rule (Amount < 300). The analysis then describes the composition (categories, users) and tracks the aggregate behavior (total value over time) of this specific, predefined segment.

	Benefit: Highlights where small, frequent purchases are occurring, often an area for potential budget leaks ("death by a thousand cuts").

	Question: "Segment monthly spending into 'Pay Week 1', 'Week 2', 'Week 3', 'Week 4+'. How does the distribution of spending across categories (e.g., % on Grocery vs. % on Entertainment) differ between these predefined intra-month time segments?"

	Reasoning: Segments are defined based on the week of the month (assuming a monthly pay cycle context). The analysis then compares the category breakdown across these predefined time-based segments.

	Benefit: Reveals spending patterns tied to pay cycles (e.g., more discretionary spending early in the month, bills later).

	Question: "Create user-based segments ('Anirban's Spending' vs. 'Puspita's Spending'). What are the key differences in their top 5 spending categories, average transaction values, and preferred accounts within their respective segments?"

	Reasoning: Segments are simply defined by the User field. The analysis then performs a comparative characterization between these two predefined segments.

	Benefit: Directly compares the financial habits and priorities of both individuals based on their tracked expenses.

	Question: "Define a 'Travel Mode Segment' (Flight, Train, Cab/Commute, Other Travel). What is the average cost, frequency, and associated user/account for transactions within each of these predefined travel sub-segments?"

	Reasoning: Segments are defined by grouping specific travel Sub-category values. The analysis then describes the typical financial characteristics associated with each defined travel mode.

	Benefit: Provides a clear cost and usage comparison between different forms of travel used by the couple.

5. Unsupervised Clustering Questions (Discovering Unknown Groups)

	Goal: Allow an algorithm to automatically discover natural groupings (clusters) within the data based on similarity across features, without using predefined labels.

	Why Clustering (vs. Classification/Segmentation)? The key is the discovery of groups. We don't know the optimal or 'correct' groupings beforehand. We want the algorithm to reveal structures or archetypes based purely on the data patterns, unlike classification (predicting known labels) or segmentation (analyzing predefined groups).

	Question: "Cluster our days based on the combination of total amount spent and the number of transactions that day. What kind of 'daily activity' clusters emerge (e.g., 'Low Spend/Low Activity', 'High Spend/Low Activity (single big purchase?)', 'Moderate Spend/High Activity (many small purchases?)')?"

	Reasoning: We don't predefine what makes a 'type' of day. We feed features (total daily amount, total daily transaction count) into a clustering algorithm (like K-Means) and let it find groups of days that are mathematically similar based on these two dimensions. We then interpret the resulting clusters.

	Benefit: Discovers data-driven daily spending styles beyond simple high/low thresholds.

	Question: "Based on the vector of monthly spending across all major categories, can we cluster the months? Do distinct 'financial character' months emerge automatically (e.g., months focused heavily on Investment, months dominated by Travel, 'balanced' months)?"

	Reasoning: We represent each month by its spending profile across categories (a vector of numbers). Clustering groups months with similar spending distributions, regardless of the absolute total spend. This might reveal patterns like "Holiday Prep Month" or "Saving Drive Month" without us defining those labels first.

	Benefit: Identifies seasonality or periods defined by shifting financial priorities across the board, discovered from the data itself.

	Question: "Cluster individual 'Grocery' transactions based on Amount, Store/Sub-category, and TimeOfDay (if available). What natural groupings of grocery runs are discovered (e.g., weekday morning top-ups at Local Store, large weekend BigBasket orders, late-night Zepto snacks)?"

	Reasoning: Aims to find inherent patterns within grocery shopping without pre-labeling runs as 'Stock-up' or 'Top-up'. The algorithm groups similar grocery transaction events based on cost, place, and potentially time.

	Benefit: May reveal more nuanced grocery shopping habits or contexts than simple rule-based classification.

	Question: "Can we cluster weeks based on the proportion of spending allocated to Needs (e.g., Rent, Grocery, Utilities) vs. Wants (e.g., Restaurant, Shopping, Entertainment)? Do weeks with distinct Needs/Wants balance ratios emerge?"

	Reasoning: We calculate features (proportion of spend on Needs, proportion on Wants) for each week and ask the clustering algorithm to group weeks with similar proportions, discovering different types of weekly budget allocations automatically.

	Benefit: Finds weeks characterized by different financial discipline levels or priorities based on the needs/wants balance, identified by the algorithm.

	Question: "Cluster Anirban's 'Shopping' transactions based on Amount and Platform/Sub-category. Are there distinct clusters representing, perhaps, 'Small Amazon Buys', 'Large Electronics Purchases (Flipkart/Amazon)', 'Clothing Hauls (Myntra/Lifestyle/Max)' that the data naturally separates?"

	Reasoning: Applies clustering specifically to Anirban's shopping data using amount and store type as features. The goal is to see if the algorithm discovers groupings that align with intuitive shopping purposes without us predefining them.

	Benefit: Data-driven identification of distinct shopping behavior types for a specific user, potentially revealing patterns not immediately obvious.
"""

File: instruction_code_details.txt
Location: reference\instruction_code_details.txt
Summary: The script `create_clean_csv.py` processes 'expenses.csv' by normalizing column names, reconstructing missing 'date' entries using 'year', 'month', and 'day_of_week', and formatting dates. It fills in missing dates, drops unreconstructed entries, and saves the cleaned data back to the CSV file.
Code: """
# instruction_code_details.txt
"""
Describes the functionality of each file...
"""

File: create_clean_csv.py
Location: create_clean_csv.py
Summary: The script processes 'expenses.csv' by normalizing column names and reconstructing missing 'date' entries using 'year', 'month', and 'day_of_week'. It applies a function to fill in missing dates, drops unreconstructed entries, formats dates, and saves the cleaned data back to the CSV file.
Code: """
# clean_expenses_csv.py
"""
This script reads 'data/expenses.csv', reconstructs missing 'date' entries using 'year', 'month', and 'day_of_week',
and writes the cleaned data back to 'data/expenses.csv'.
"""

import pandas as pd
import calendar
from datetime import datetime
from pathlib import Path

# Define paths
ROOT_DIR = Path(__file__).parent
DATA_DIR = ROOT_DIR / "data"
CSV_PATH = DATA_DIR / "expenses.csv"

# Load CSV
df = pd.read_csv(CSV_PATH)

# Normalize column names
df.columns = (
    df.columns
    .str.strip()
    .str.lower()
    .str.replace("-", "_")
    .str.replace(" ", "_")
)

# Check if 'date' column exists; if not, create it
if 'date' not in df.columns:
    df['date'] = pd.NaT

# Convert 'date' column to datetime
df['date'] = pd.to_datetime(df['date'], errors='coerce')

# Identify rows with missing 'date' values
missing_date_mask = df['date'].isnull()

# Function to reconstruct date
def reconstruct_date(row):
    try:
        year = int(row['year'])
        month_str = str(row['month'])
        if '-' in month_str:
            month = int(month_str.split('-')[1])
        else:
            month = int(month_str)
        day_name = row['day_of_week']
        # Get all days in the month
        month_calendar = calendar.monthcalendar(year, month)
        # Find the first occurrence of the specified day_of_week
        for week in month_calendar:
            for i, day in enumerate(week):
                if day != 0 and calendar.day_name[i] == day_name:
                    return datetime(year, month, day)
    except Exception as e:
        pass
    return pd.NaT

# Apply reconstruction to missing dates
df.loc[missing_date_mask, 'date'] = df[missing_date_mask].apply(reconstruct_date, axis=1)

# Check if any 'date' entries are still missing
still_missing = df['date'].isnull().sum()
if still_missing > 0:
    print(f"⚠️ Warning: {still_missing} 'date' entries could not be reconstructed and will be dropped.")
    df = df.dropna(subset=['date'])

# Format 'date' as string
df['date'] = df['date'].dt.strftime('%Y-%m-%d')

# Write cleaned data back to CSV
df.to_csv(CSV_PATH, index=False)

print(f"\n✅ 'expenses.csv' has been cleaned and updated at: {CSV_PATH.resolve()}")
print(f"📊 Total records written: {len(df)}")

"""

File: create_db.py
Location: create_db.py
Summary: The script processes 'data/expenses.csv' by reconstructing missing 'date' entries using 'year', 'month', and 'day_of_week', adds UUIDs, and saves the data to 'data/expenses.db'. It ensures necessary columns exist, handles missing data, and writes the processed data to an SQLite database.
Code: """
# create_db.py
"""
This script reads 'data/expenses.csv', reconstructs missing 'date' entries using 'year', 'month', and 'day_of_week',
adds UUIDs, and saves the result into 'data/expenses.db'.
"""

import sqlite3
import pandas as pd
import uuid
from pathlib import Path
import calendar
from datetime import datetime

# Define paths
ROOT_DIR = Path(__file__).parent
DATA_DIR = ROOT_DIR / "data"
CSV_PATH = DATA_DIR / "expenses.csv"
DB_PATH = DATA_DIR / "expenses.db"

# Ensure data directory exists
DATA_DIR.mkdir(parents=True, exist_ok=True)

# Load CSV
df = pd.read_csv(CSV_PATH)

# Normalize column names
df.columns = (
    df.columns
    .str.strip()
    .str.lower()
    .str.replace("-", "_")
    .str.replace(" ", "_")
)

# Check if 'date' column exists; if not, create it
if 'date' not in df.columns:
    df['date'] = pd.NaT

# Convert 'date' column to datetime
df['date'] = pd.to_datetime(df['date'], errors='coerce')

# Identify rows with missing 'date' values
missing_date_mask = df['date'].isnull()

# Function to reconstruct date
def reconstruct_date(row):
    year = int(row['year'])
    month = int(row['month'].split('-')[1]) if isinstance(row['month'], str) and '-' in row['month'] else int(row['month'])
    day_name = row['day_of_week']
    # Get all days in the month
    month_calendar = calendar.monthcalendar(year, month)
    # Find the first occurrence of the specified day_of_week
    for week in month_calendar:
        for i, day in enumerate(week):
            if day != 0 and calendar.day_name[i] == day_name:
                return datetime(year, month, day)
    return pd.NaT

# Apply reconstruction to missing dates
df.loc[missing_date_mask, 'date'] = df[missing_date_mask].apply(reconstruct_date, axis=1)

# Check if any 'date' entries are still missing
still_missing = df['date'].isnull().sum()
if still_missing > 0:
    print(f"⚠️ Warning: {still_missing} 'date' entries could not be reconstructed and will be dropped.")
    df = df.dropna(subset=['date'])

# Generate derived date columns
df['month'] = df['date'].dt.to_period('M').astype(str)
df['week'] = df['date'].dt.strftime('%G-W%V')  # ISO week format
df['day_of_week'] = df['date'].dt.day_name()

# Format 'date' as string
df['date'] = df['date'].dt.strftime('%Y-%m-%d')

# Add UUID as primary key
df['id'] = [str(uuid.uuid4()) for _ in range(len(df))]

# Final schema validation
required_columns = {
    'date', 'account', 'category', 'sub_category', 'type',
    'user', 'amount', 'month', 'week', 'day_of_week'
}
missing_cols = required_columns - set(df.columns)
if missing_cols:
    raise ValueError(f"❌ Missing required column(s) after processing: {missing_cols}")

# Write to SQLite database
with sqlite3.connect(DB_PATH) as conn:
    df.to_sql("expenses", conn, if_exists="replace", index=False)

print(f"\n✅ Database successfully created at: {DB_PATH.resolve()}")
print(f"📊 Total records written: {len(df)}")

"""

File: db_utils.py
Location: db_utils.py
Summary: The `db_utils.py` file provides utility functions for managing an SQLite database of expenses. It includes functions to establish a database connection, fetch all expenses, fetch expenses by ID, insert new expenses, update existing expenses, delete expenses, and fetch the last N expenses. Logging is used for error and info reporting.
Code: """
# db_utils.py
import sqlite3
import pandas as pd
from uuid import uuid4
from pathlib import Path
import logging
from typing import Optional, Dict, Any, List

# Setup basic logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# ✅ Updated database path to ROOT/data/expenses.db
DB_PATH = Path(__file__).parent / "data" / "expenses.db"

def get_connection() -> Optional[sqlite3.Connection]:
    """
    Establishes a connection to the SQLite database.

    Returns:
        Optional[sqlite3.Connection]: A connection object or None if connection fails.
    """
    try:
        conn = sqlite3.connect(DB_PATH, check_same_thread=False)
        conn.row_factory = sqlite3.Row  # Return rows as dictionary-like objects
        logging.debug(f"Database connection established at {DB_PATH.resolve()}")
        return conn
    except sqlite3.Error as e:
        logging.error(f"Database connection error: {e}")
        return None

def fetch_all_expenses() -> pd.DataFrame:
    conn = get_connection()
    if conn is None: return pd.DataFrame()
    try:
        df = pd.read_sql("SELECT * FROM expenses ORDER BY date DESC", conn)
        df['date'] = pd.to_datetime(df['date'], errors='coerce')
        logging.info(f"Fetched {len(df)} expenses.")
        return df
    except (sqlite3.Error, pd.errors.DatabaseError) as e:
        logging.error(f"Error fetching all expenses: {e}")
        return pd.DataFrame()
    finally:
        if conn: conn.close()

def fetch_expense_by_id(expense_id: str) -> Optional[Dict[str, Any]]:
    conn = get_connection()
    if conn is None: return None
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM expenses WHERE id = ?", (expense_id,))
        record = cursor.fetchone()
        logging.debug(f"Fetched expense for ID {expense_id}: {'Found' if record else 'Not Found'}")
        return dict(record) if record else None
    except sqlite3.Error as e:
        logging.error(f"Error fetching expense by ID {expense_id}: {e}")
        return None
    finally:
        if conn: conn.close()

def insert_expense(data: Dict[str, Any]) -> bool:
    """
    Inserts a new expense record into the database.

    Args:
        data (Dict[str, Any]): Dictionary containing expense details.

    Returns:
        bool: True if insertion was successful, False otherwise.
    """
    conn = get_connection()
    if conn is None:
        return False

    required_fields = ['date', 'year', 'month', 'week', 'day_of_week',
                       'account', 'category', 'sub_category', 'type',
                       'user', 'amount']
    
    if not all(field in data for field in required_fields):
        logging.error(f"Missing required fields for inserting expense. Got: {list(data.keys())}")
        return False

    sql = """
    INSERT INTO expenses (
        id, date, year, month, week, day_of_week,
        account, category, sub_category, type, user, amount
    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    """

    try:
        cursor = conn.cursor()
        new_id = str(uuid4())
        cursor.execute(sql, (
            new_id,
            data['date'],
            int(data['year']),
            data['month'],
            data['week'],
            data['day_of_week'],
            data['account'],
            data['category'],
            data['sub_category'],
            data['type'],
            data['user'],
            float(data['amount'])
        ))
        conn.commit()
        logging.info(f"✅ Expense inserted with ID: {new_id}")
        return True
    except (sqlite3.Error, ValueError) as e:
        logging.error(f"Error inserting expense: {e}")
        conn.rollback()
        return False
    finally:
        if conn:
            conn.close()


def update_expense(expense_id: str, data: Dict[str, Any]) -> bool:
    conn = get_connection()
    if conn is None: return False

    required_fields = ['date', 'account', 'category', 'sub_category', 'type', 'user', 'amount']
    if not all(field in data for field in required_fields):
        logging.error(f"Missing required fields for updating expense ID {expense_id}. Got: {data.keys()}")
        return False

    sql = """
    UPDATE expenses
    SET date = ?, account = ?, category = ?, sub_category = ?, type = ?, user = ?, amount = ?
    WHERE id = ?
    """
    try:
        cursor = conn.cursor()
        cursor.execute(sql, (
            data['date'], data['account'], data['category'], data['sub_category'],
            data['type'], data['user'], float(data['amount']), expense_id
        ))
        conn.commit()
        if cursor.rowcount == 0:
            logging.warning(f"No expense found with ID {expense_id} to update.")
            return False
        logging.info(f"Expense {expense_id} updated successfully.")
        return True
    except (sqlite3.Error, ValueError) as e:
        logging.error(f"Error updating expense {expense_id}: {e}")
        conn.rollback()
        return False
    finally:
        if conn: conn.close()

def delete_expense(expense_id: str) -> bool:
    conn = get_connection()
    if conn is None: return False

    sql = "DELETE FROM expenses WHERE id = ?"
    try:
        cursor = conn.cursor()
        cursor.execute(sql, (expense_id,))
        conn.commit()
        if cursor.rowcount == 0:
            logging.warning(f"No expense found with ID {expense_id} to delete.")
            return False
        logging.info(f"Expense {expense_id} deleted successfully.")
        return True
    except sqlite3.Error as e:
        logging.error(f"Error deleting expense {expense_id}: {e}")
        conn.rollback()
        return False
    finally:
        if conn: conn.close()

def fetch_last_expenses(n: int = 10) -> pd.DataFrame:
    conn = get_connection()
    if conn is None: return pd.DataFrame()
    try:
        df = pd.read_sql(f"SELECT * FROM expenses ORDER BY date DESC, rowid DESC LIMIT ?", conn, params=(n,))
        df['date'] = pd.to_datetime(df['date'], errors='coerce')
        logging.info(f"Fetched last {len(df)} expenses (requested {n}).")
        return df
    except (sqlite3.Error, pd.errors.DatabaseError) as e:
        logging.error(f"Error fetching last {n} expenses: {e}")
        return pd.DataFrame()
    finally:
        if conn: conn.close()

"""

File: dummy_expenses.csv
Location: dummy_expenses.csv
Summary: The file logs financial transactions for Anirban on January 1, 2025, detailing expenses on rent, shopping, household, and groceries, with amounts ranging from ₹230 to ₹30,000 across different accounts (ICICI and SBI).
Code: """
      Date       Account  Category     Sub-category                             Type    User  Amount
2025-01-01 Anirban-ICICI      Rent       House Rent     Monthly House Rent - January Anirban   30000
2025-01-01   Anirban-SBI  Shopping           Meesho           Meesho Find - Clothing Anirban    7740
2025-01-01   Anirban-SBI  Shopping        Lifestyle          Lifestyle Store - Books Anirban    5870
2025-01-01 Anirban-ICICI Household Electricity Bill Electricity Bill related expense Anirban    1570
2025-01-01   Anirban-SBI   Grocery            Zepto   Zepto Quick Order - Quick Need Anirban     230
"""

File: expenses.csv
Location: expenses.csv
Summary: The file is a financial transaction log detailing expenses on January 1, 2023, by Anirban and Puspita. It includes categories like rent, household, grocery, and restaurant, with specific sub-categories, payment types, and amounts for each transaction.
Code: """
      date  year   month     week day_of_week       account   category     sub_category                       type    user   amount
01-01-2023  2023 2023-01 2023-W52      Sunday Anirban-ICICI       Rent       House Rent Monthly House Rent Payment Anirban 30000.00
01-01-2023  2023 2023-01 2023-W52      Sunday   Puspita-SBI  Household             Maid        Monthly Maid Salary Puspita  2500.00
01-01-2023  2023 2023-01 2023-W52      Sunday Anirban-ICICI    Grocery            Other         Meat/Fish Purchase Anirban   534.04
01-01-2023  2023 2023-01 2023-W52      Sunday   Puspita-SBI    Grocery Flipkart Grocery         FK Quick Groceries Puspita  2921.10
01-01-2023  2023 2023-01 2023-W52      Sunday Anirban-ICICI Restaurant         Takeaway               Lunch Parcel Anirban   848.85
"""

File: expenses_sample.csv
Location: expenses_sample.csv
Summary: The file is a financial transaction record detailing expenses on January 1, 2023. It includes payments for house rent, maid salary, groceries, and a restaurant takeaway, categorized by account, type, user, and amount, involving Anirban and Puspita.
Code: """
      date  year   month     week day_of_week       account   category     sub_category                       type    user   amount
01-01-2023  2023 2023-01 2023-W52      Sunday Anirban-ICICI       Rent       House Rent Monthly House Rent Payment Anirban 30000.00
01-01-2023  2023 2023-01 2023-W52      Sunday   Puspita-SBI  Household             Maid        Monthly Maid Salary Puspita  2500.00
01-01-2023  2023 2023-01 2023-W52      Sunday Anirban-ICICI    Grocery            Other         Meat/Fish Purchase Anirban   534.04
01-01-2023  2023 2023-01 2023-W52      Sunday   Puspita-SBI    Grocery Flipkart Grocery         FK Quick Groceries Puspita  2921.10
01-01-2023  2023 2023-01 2023-W52      Sunday Anirban-ICICI Restaurant         Takeaway               Lunch Parcel Anirban   848.85
"""

File: expense_metadata.json
Location: expense_metadata.json
Summary: The file outlines a transaction record structure, including a date format and account names for Anirban and Puspita. It categorizes expenses into Investment, Rent, Travel, Restaurant, Insurance Premium, Household, Connectivity, and Waste, listing specific items under each category.
Code: """
{
    "Date": "Date of the transaction (format: YYYY-MM-DD)",
    "Account": [
        "Anirban-SBI",
        "Anirban-ICICI",
        "Puspita-SBI",
        "Puspita-Bandhan"
    ],
	"categories": {
        "Investment": ["SIP", "Mutual Funds", "Stocks", "FD/RD"],
        "Rent": ["House Rent"],
        "Travel": ["Day Trip", "Vacation", "Commute", "Cab", "Train", "Flight", "Hotel/Stay", "Parking Fee"],
        "Restaurant": ["Dine-in", "Takeaway", "Food Delivery", "Snacks", "Cafe", "Drinks"],
        "Insurance Premium": ["Life Insurance", "ULIP", "Health Insurance", "Vehicle Insurance"],
        "Household": [
            "Electricity Bill", "Plumbing", "Electrical Repairs", "Appliance Repair", "Cleaning",
            "Pest Control", "Bike Maintenance", "Car Maintenance",
            "Furniture", "Kitchen Tools", "Ironing", "Maid"
        ],
        "Connectivity": ["Airtel WiFi", "Jio Recharge", "Airtel Mobile", "Netflix", "Prime Video", "Disney+ Hotstar"],
        "Waste": ["Smoke", "Alcohol"],
        "Grocery": ["BigBasket", "Amazon", "Flipkart Grocery", "Zepto", "Local Store", "Other"],
        "Beauty": ["Nykaa", "Meesho", "Purplle", "Salon", "Makeup", "Skincare", "Salon"],
        "Shopping": ["Amazon", "Flipkart", "Meesho", "Nykaa", "Purple", "Lifestyle", "Max", "Myntra"],
        "Health": ["Doctor Visit", "Medicines", "Lab Test", "Health Checkup"],
        "Utilities": ["Electricity", "Water", "Gas Cylinder", "Maintenance", "Garbage Collection"],
        "Gifts & Donations": ["Family", "Friends", "Charity", "Temple"],
        "Entertainment": ["Movies", "Concerts", "Games"],
        "Education": ["Online Courses", "Books", "Workshops"]
	},
    "User": {
        "Anirban-SBI": "Anirban",
        "Anirban-ICICI": "Anirban",
        "Puspita-SBI": "Puspita",
        "Puspita-Bandhan": "Puspita"
    },
    "Type": "Free text input describing the nature or name of the transaction (e.g., 'Family dinner', 'Cab to airport')",
    "Amount": "INR value of the transaction"
}
"""

File: main.py
Location: main.py
Summary: The `main.py` file is a Streamlit application for a Personal Expense Tracker. It configures the page, loads custom CSS, and sets up a sidebar for navigation between "Add Expenses," "Reports," and "Visualizations" tabs. It also manages data backup for the SQLite database and handles page rendering based on user selection.
Code: """
# main.py
"""
Main Streamlit application file for the Personal Expense Tracker.
Handles page navigation and calls rendering functions for each tab.
"""
import streamlit as st
from tabs import add_expense, reports, visuals
from style_utils import load_css
import os # Import os for file path checking
import logging # Ensure logging is imported if used within main

# --- Page Configuration ---
st.set_page_config(
    layout="wide",
    page_title="Personal Expense Tracker",
    page_icon="💰"
)

# --- Load CSS ---
load_css() # Load custom styles first

# --- Add Application Header Banner ---
st.title("My Personal Finance App")
# --- End Application Header Banner ---

# --- Sidebar Navigation ---
st.sidebar.title("Navigation")
page = st.sidebar.radio(
    "Go to",
    ["Add Expenses", "Reports", "Visualizations"],
    label_visibility="collapsed",
    key="main_nav"
)

st.sidebar.markdown("---")

# --- Sidebar Data Management ---
st.sidebar.header("Data Management")
DB_FILE = "expenses.db"
if os.path.exists(DB_FILE):
    try:
        with open(DB_FILE, "rb") as fp:
            st.sidebar.download_button(
                label="Download Data Backup (.db)",
                data=fp,
                file_name="expenses_backup.db",
                mime="application/octet-stream",
                help="Download the entire SQLite database file."
            )
    except OSError as e:
        st.sidebar.error(f"Error reading database file: {e}")
        logging.error(f"Error reading DB for backup: {e}") # Log error
else:
    st.sidebar.warning("Database file not found for backup.")

# --- Page Rendering ---
if page == "Add Expenses":
    add_expense.render()
elif page == "Reports":
    reports.render()
elif page == "Visualizations":
    visuals.render()
else:
    st.error("Invalid page selected.")
"""

File: requirements-v2.0.txt
Location: requirements-v2.0.txt
Summary: The file lists various Python packages organized by categories: Core Application, Database, GenAI & Embeddings, LangChain & LangGraph, Data Science, ML and DL, Data Visualization, Python, and Utilities & Helpers. It includes specific versions for some packages, such as numpy, SQLAlchemy, and openai, among others.
Code: """
# Core Application
streamlit
pandas
numpy==2.1.3
python-dateutil
python-dotenv==1.0.1
SQLAlchemy==2.0.39
requests

# Database
aiosqlite==0.21.0         # async SQLite support
faiss-cpu==1.10.0         # vector search
SQLAlchemy==2.0.39

# GenAI & Embeddings
openai==1.68.2
cohere==5.14.0
sentence-transformers==4.0.2
huggingface-hub==0.30.1
transformers
tiktoken==0.9.0
tokenizers==0.21.1

# LangChain & LangGraph
langchain
langchain-cohere
langchain-community
langchain-core
langchain-milvus
langchain-ollama
langchain-openai
langchain-text-splitters
langchainhub
langfuse
langgraph
langgraph-api
langgraph-checkpoint
langgraph-cli
langgraph-prebuilt
langgraph-sdk
langsmith

# Data Science, ML and DL
scikit-learn==1.6.1
scipy==1.15.2
statsmodels==0.14.4
keras==3.9.2
xgboost==3.0.0
joblib==1.4.2
torch

# Data Visualization
matplotlib==3.10.1
plotly
seaborn==0.13.2

# Python
six==1.17.0
pydantic-settings==2.8.1
pydantic

# Utilities & Helpers
black==25.1.0
cloudpickle==3.1.1
click==8.1.8
pypdf
openpyxl==3.1.5
tqdm

# Web Frameworks & Scraping
Flask==3.1.0
fastapi==0.115.11
uvicorn
beautifulsoup4
boto3==1.36.26
botocore==1.36.26
Jinja2==3.1.6

"""

File: requirements.txt
Location: requirements.txt
Summary: I'm sorry, I can't access the file. Please provide the code or a description of its contents for a summary.
Code: """
Unable to read file.
"""

File: sample_data_generation.csv
Location: sample_data_generation.csv
Summary: The file outlines Anirban's investment categories, sub-categories, accounts, and expense details. It includes SIP, Mutual Funds, Stocks, and FD/RD with specified monthly expense frequencies, minimum and maximum expense amounts, and valid expense types, such as SIP investments, MF purchases, and stock trades.
Code: """
  Category Sub-category    User       Account Expense-Frequency  Min-expenses-amount  Max-expenses-amount  Max-times-per-month                                                                              Valid-expense-types
Investment          SIP Anirban Anirban-ICICI           monthly                 3000                 3000                    1                                                                           Monthly SIP Investment
Investment Mutual Funds Anirban   Anirban-SBI           monthly                 1000                15000                    2                 MF Purchase - Lumpsum|MF Purchase - Topup|Equity Fund Investment|Debt Fund Topup
Investment       Stocks Anirban   Anirban-SBI           monthly                 1000                20000                    2 Stock Purchase - Tata Motors|Stock Purchase - HDFC Bank|Stock Purchase - Reliance|Intraday Trade
Investment        FD/RD Anirban   Anirban-SBI           monthly                 5000                25000                    1                                                  New Fixed Deposit|Recurring Deposit Installment
      Rent   House Rent Anirban Anirban-ICICI           monthly                30000                30000                    1                                                                       Monthly House Rent Payment
"""

File: styles.css
Location: styles.css
Summary: The "styles.css" file defines a reverted light theme using CSS variables. It imports the "Roboto" font and sets colors for backgrounds, text, accents, borders, and success messages. The theme features a white primary background, dark text, blue accents, and subtle rounded corners, maintaining a clean and modern aesthetic.
Code: """
/* styles.css - Reverted Light Theme */

/* --- Base Font --- */
@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap');

/* --- Light Theme Variables --- */
:root {
    --primary-bg-color: #FFFFFF;       /* White main background */
    --secondary-bg-color: #F8F9FA;   /* Very light grey for sidebar, tables */
    --widget-bg-color: #FFFFFF;      /* Widget background (White) */
    --text-color: #212529;           /* Dark text color */
    --subtle-text-color: #6C757D;    /* Grey for less important text */
    --accent-color: #007BFF;         /* Standard Blue for buttons, highlights */
    --accent-hover-color: #0056b3;   /* Darker blue on hover */
    --border-color: #DEE2E6;         /* Light grey border */
    --border-focus-color: #80BDFF;   /* Lighter blue for focus rings */
    --border-radius: 4px;            /* Subtle rounded corners */
    --font-family: 'Roboto', sans-serif;

    --success-color: #198754;        /* Bootstrap Green */
    --warning-color: #FFC107;        /* Bootstrap Yellow */
    --error-color: #DC3545;          /* Bootstrap Red */
    --success-bg-color: #D1E7DD;
    --warning-bg-color: #FFF3CD;
    --error-bg-color: #F8D7DA;
}

/* --- General Styles --- */
body {
    color: var(--text-color);
    background-color: var(--primary-bg-color);
    font-family: var(--font-family);
    font-size: 14px;
}

h1, h2, h3, h4, h5, h6 { color: var(--text-color); font-weight: 500; }
h3 { margin-top: 1.8rem; margin-bottom: 0.8rem; padding-bottom: 0.4rem; border-bottom: 1px solid var(--border-color); font-weight: 600; }
a { color: var(--accent-color); text-decoration: none; }
a:hover { color: var(--accent-hover-color); text-decoration: underline; }
hr { border-top: 1px solid var(--border-color); margin-top: 1.5rem; margin-bottom: 1.5rem; }

/* --- Main Content Area --- */
.main .block-container {
    padding-top: 2rem; padding-bottom: 2rem; padding-left: 2.5rem; padding-right: 2.5rem;
}

/* --- Sidebar --- */
[data-testid="stSidebar"] { background-color: var(--secondary-bg-color); border-right: 1px solid var(--border-color); }
[data-testid="stSidebar"] h1, [data-testid="stSidebar"] h2, [data-testid="stSidebar"] h3 { color: var(--text-color); font-weight: 600; }
[data-testid="stSidebar"] .stRadio > label { color: var(--text-color); display: block; padding: 0.5rem 0.8rem; margin-bottom: 0.2rem; border-radius: var(--border-radius); transition: background-color 0.2s ease, color 0.2s ease; font-weight: 400; }
[data-testid="stSidebar"] .stRadio > label:hover { background-color: #E9ECEF; color: var(--accent-color); }
[data-testid="stSidebar"] .stRadio [type="radio"]:checked + div > label { color: var(--accent-color); font-weight: 600; background-color: #E9ECEF; }


/* --- Widgets --- General Appearance (Light Theme) --- */

/* Buttons */
.stButton > button { background-color: var(--accent-color); color: #FFFFFF; border: 1px solid var(--accent-color); padding: 0.4rem 1rem; border-radius: var(--border-radius); font-weight: 400; transition: background-color 0.2s ease, border-color 0.2s ease; }
.stButton > button:hover { background-color: var(--accent-hover-color); border-color: var(--accent-hover-color); color: #FFFFFF; }
.stButton > button:focus { outline: none; box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25); }

/* Text Input, Number Input, Date Input (Single rule for all) */
.stTextInput input,
.stNumberInput input,
.stDateInput input {
    background-color: var(--widget-bg-color); /* Should be #FFFFFF */
    color: var(--text-color); /* Should be dark */
    border: 1px solid var(--border-color); /* Should be light grey */
    border-radius: var(--border-radius);
    padding: 0.4rem 0.7rem;
    transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    width: 100%;
    box-sizing: border-box;
    font-size: 1em;
}
.stTextInput input:focus,
.stNumberInput input:focus,
.stDateInput input:focus {
    border-color: var(--border-focus-color); /* Light blue focus */
    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    outline: none;
}
/* Style the container for DateInput for consistency */
[data-testid="stDateInput"] > div:first-child {
     background-color: var(--widget-bg-color);
     border: 1px solid var(--border-color);
     border-radius: var(--border-radius);
     overflow: hidden;
}
[data-testid="stDateInput"] > div:first-child:has(input:focus) {
    border-color: var(--border-focus-color);
    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
}

/* Selectbox, Multiselect (Single rule for all) */
.stSelectbox > div[data-baseweb="select"],
.stMultiSelect > div[role="listbox"] {
    background-color: var(--widget-bg-color) !important; /* White background */
    border: 1px solid var(--border-color) !important; /* Light grey border */
    border-radius: var(--border-radius) !important;
    color: var(--text-color) !important; /* Dark text */
    overflow: hidden !important;
}
.stMultiSelect input { /* Text typed into multiselect */
    color: var(--text-color) !important;
    background-color: transparent !important;
}
/* Focus state for Selectbox/Multiselect */
.stSelectbox > div[aria-expanded="true"],
.stMultiSelect > div[aria-expanded="true"] {
    border-color: var(--border-focus-color) !important; /* Light blue focus */
    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25) !important;
}

/* Multiselect Tags (Default Appearance) */
.stMultiSelect [data-baseweb="tag"] {
    border-radius: 3px !important;
    padding-left: 0.5rem !important;
    padding-right: 0.5rem !important;
    font-weight: 400 !important;
    /* Let Streamlit/BaseWeb handle default tag colors */
}

/* Dropdown menu styling */
div[data-baseweb="popover"] > div[data-baseweb="menu"] { background-color: var(--primary-bg-color); border: 1px solid var(--border-color); border-radius: var(--border-radius); box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15); overflow: hidden; }
div[data-baseweb="popover"] ul li { color: var(--text-color); padding: 0.4rem 1rem; }
div[data-baseweb="popover"] ul li:hover { background-color: var(--secondary-bg-color); }
div[data-baseweb="popover"] ul li[aria-selected="true"] { background-color: var(--accent-color); color: #FFFFFF; }

/* Radio Buttons / Checkbox (Keep simple) */
.stRadio > label { color: var(--text-color); padding-bottom: 0.2rem; }
.stCheckbox > label { color: var(--text-color); }


/* --- Forms & Expanders (Subtle styling) --- */
[data-testid="stForm"] {
    padding: 1.5rem;
    border: 1px solid var(--border-color); /* Just a border */
    border-radius: var(--border-radius);
    margin-bottom: 1.5rem;
    overflow: hidden;
}
[data-testid="stExpander"] {
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius);
    margin-bottom: 1rem;
    overflow: hidden;
}
[data-testid="stExpander"] summary { font-weight: 500; padding: 0.6rem 1rem; color: var(--text-color); border-bottom: 1px solid var(--border-color); }
[data-testid="stExpander"] summary:hover { color: var(--accent-color); }
[data-testid="stExpander"] div[role="button"] svg { fill: var(--text-color); }
[data-testid="stExpander"] .streamlit-expanderContent { padding: 1rem 1rem 1rem 1rem; background-color: var(--primary-bg-color); }

/* Labels WITHIN Form/Expander (Use default text color) */
[data-testid="stForm"] label,
[data-testid="stExpander"] label {
    color: var(--text-color);
    font-weight: 500;
    display: block;
    margin-bottom: 0.25rem;
}

/* --- Dataframe / Table --- */
/* ... (Dataframe styles remain the same) ... */
.stDataFrame { border: 1px solid var(--border-color); border-radius: var(--border-radius); overflow: hidden; }
.stDataFrame > div { border-radius: inherit; overflow: hidden; }
.stDataFrame thead th { background-color: var(--secondary-bg-color); color: var(--text-color); font-weight: 600; border-bottom: 2px solid var(--border-color); text-align: left; padding: 0.6rem 0.8rem; }
.stDataFrame thead th:first-child { border-top-left-radius: var(--border-radius); }
.stDataFrame thead th:last-child { border-top-right-radius: var(--border-radius); }
.stDataFrame tbody tr:nth-child(even) { background-color: var(--secondary-bg-color); }
.stDataFrame tbody tr:nth-child(odd) { background-color: var(--primary-bg-color); }
.stDataFrame tbody td { color: var(--text-color); border-bottom: none; padding: 0.5rem 0.8rem; border-right: 1px solid var(--border-color); }
.stDataFrame tbody td:last-child { border-right: none; }
.stDataFrame tbody tr:last-child td:first-child { border-bottom-left-radius: var(--border-radius); }
.stDataFrame tbody tr:last-child td:last-child { border-bottom-right-radius: var(--border-radius); }
.stDataFrame tbody tr:hover td { background-color: #E9ECEF; }


/* --- Alerts / Messages --- */
/* ... (Alert styles remain the same) ... */
[data-testid="stAlert"] { border-radius: var(--border-radius); border: 1px solid transparent; padding: 0.8rem 1rem; }
[data-testid="stAlert"][data-baseweb="notification-positive"] { background-color: var(--success-bg-color); border-color: var(--success-color); color: #0f5132; }
[data-testid="stAlert"][data-baseweb="notification-warning"] { background-color: var(--warning-bg-color); border-color: var(--warning-color); color: #664d03; }
[data-testid="stAlert"][data-baseweb="notification-negative"] { background-color: var(--error-bg-color); border-color: var(--error-color); color: #842029; }

/* --- Sidebar Download Button Style --- */
/* ... (Sidebar download button style remains the same) ... */
[data-testid="stSidebar"] .stDownloadButton > button { background-color: var(--error-color); border-color: var(--error-color); color: #FFFFFF; }
[data-testid="stSidebar"] .stDownloadButton > button:hover { background-color: #C82333; border-color: #BD2130; color: #FFFFFF; }
[data-testid="stSidebar"] .stDownloadButton > button:focus { box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.5); outline: none; }

/* --- Application Header Banner Style --- */
/* --- Application Header Banner Style --- */
.main h1 {
    background-color: #495057;
    color: #FFFFFF;
    padding: 0.8rem 2.5rem;
    /* MODIFIED: Removed negative top margin, adjusted horizontal/bottom margin */
    margin: 0 -2.5rem 1.5rem -2.5rem;
    text-align: center;
    border-radius: 0;
    font-size: 1.75rem;
    font-weight: 500;
    border-bottom: none;
}

/* --- Main Content Area --- */
.main .block-container {
    /* MODIFIED: Increased top padding significantly */
    padding-top: 5rem; /* Adjust this value as needed (e.g., 4rem, 5rem, 6rem) */
    padding-bottom: 2rem;
    padding-left: 2.5rem;
    padding-right: 2.5rem;
}

/* ... (rest of styles) ... */
"""

File: style_utils.py
Location: style_utils.py
Summary: The `style_utils.py` file defines a function `load_css` that loads and injects CSS into a Streamlit app from a specified file path, defaulting to "styles.css". It checks for the file's existence and logs warnings or errors if the file is missing or cannot be read.
Code: """
# style_utils.py
import streamlit as st
import logging # For logging errors
import os # For checking file existence

def load_css(file_path: str = "styles.css"):
    """
    Loads CSS from a file and injects it into the Streamlit app.

    Args:
        file_path (str): The path to the CSS file. Defaults to "styles.css".
    """
    if not os.path.exists(file_path):
        logging.warning(f"CSS file not found at {file_path}. Skipping CSS load.")
        return # Exit gracefully if file doesn't exist

    try:
        with open(file_path, "r", encoding='utf-8') as f: # Specify encoding
            css = f.read()
            st.markdown(f"<style>{css}</style>", unsafe_allow_html=True)
            logging.debug(f"Successfully loaded CSS from {file_path}")
    except OSError as e:
        logging.error(f"Error reading CSS file {file_path}: {e}")
    except Exception as e:
        logging.error(f"An unexpected error occurred while loading CSS: {e}")
"""

File: test_openai.py
Location: test_openai.py
Summary: The file initializes an OpenAI client using an API key from the environment, creates a chat completion using the "gpt-3.5-turbo" model, and prints the assistant's reply to a user's "Hello!" message.
Code: """
import os
from openai import OpenAI

# Initialize the OpenAI client with your API key
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# Create a chat completion
response = client.chat.completions.create(
    model="gpt-3.5-turbo",  # or "gpt-4" if you have access
    messages=[
        {"role": "system", "content": "You are a helpful assistant."},
        {"role": "user", "content": "Hello!"},
    ]
)

# Print the assistant's reply
print(response.choices[0].message.content)

"""

File: expenses.csv
Location: data\expenses.csv
Summary: The file is a financial transaction record detailing expenses on January 1, 2023. It includes transactions for rent, household, grocery, and restaurant categories, with amounts ranging from ₹534.04 to ₹30,000. The users involved are Anirban and Puspita, with payments made from ICICI and SBI accounts.
Code: """
      date  year   month     week day_of_week       account   category     sub_category                       type    user   amount
2023-01-01  2023 2023-01 2023-W52      Sunday Anirban-ICICI       Rent       House Rent Monthly House Rent Payment Anirban 30000.00
2023-01-01  2023 2023-01 2023-W52      Sunday   Puspita-SBI  Household             Maid        Monthly Maid Salary Puspita  2500.00
2023-01-01  2023 2023-01 2023-W52      Sunday Anirban-ICICI    Grocery            Other         Meat/Fish Purchase Anirban   534.04
2023-01-01  2023 2023-01 2023-W52      Sunday   Puspita-SBI    Grocery Flipkart Grocery         FK Quick Groceries Puspita  2921.10
2023-01-01  2023 2023-01 2023-W52      Sunday Anirban-ICICI Restaurant         Takeaway               Lunch Parcel Anirban   848.85
"""

File: agentic_ds_app_prep.txt
Location: reference\agentic_ds_app_prep.txt
Summary: The file outlines a step for implementing agentic AI, focusing on generating additional data similar to a sample CSV from January 1, 2023, to April 20, 2025. It specifies important data columns such as date, account, category, transaction type, user, and amount, with detailed guidelines for each.
Code: """
## THINGS TO DO BEFORE AGENTIC AI IMPLEMENTATION

STEP 1: GENERATE MORE DATA
 - Generate more data, similar to the sample dummy_expenses.csv, from 2023.01.01 - 2025.04.20 (current date). Important considerations for data generation:
	- SUPER IMPORTANT: columns: 
	1. date: dd-mm-yyyy	
	2. year: yyyy	
	3. month: yyyy-mm	
	4. week: 2021-W01 to latest, 2025-xxx	
	5. day_of_week: {Monday, Tuesday,... Sunday} according to date, refer calendar
	6. account: "Account": [
        "Anirban-SBI",
        "Anirban-ICICI",
        "Puspita-SBI",
        "Puspita-Bandhan"
    ],	
	7. category: refer below and metadata
	8. sub_category: refer below and metadata	
	9. type: "Free text input describing the nature or name of the transaction (e.g., 'Family dinner', 'Cab to airport')",
	10. user:	 "User": {
        "Anirban-SBI": "Anirban",
        "Anirban-ICICI": "Anirban",
        "Puspita-SBI": "Puspita",
        "Puspita-Bandhan": "Puspita"
    },
	11. amount:"INR value of the transaction, max 50000"

	- IMPORTANT: Generate data accoording to day to day expenditure values in Bangalore, India for all categories to mimic real world scenario
	- Each month cannot have total spend amount more than inr 120000 and less than 60000
	- Each month cannot have more than 100 rows
	- Total rows -less than 2500 
	- IMPORTANT: Spends MUST adhere to the category-subcategory mapping:
		categories = {
    "Investment": ["SIP", "Mutual Funds", "Stocks", "FD/RD"],
    "Rent": ["House Rent"],
    "Travel": ["Day Trip", "Vacation", "Commute", "Cab", "Train", "Flight", "Hotel/Stay", "Parking Fee"],
    "Restaurant": ["Dine-in", "Takeaway", "Food Delivery", "Snacks", "Cafe", "Drinks"],
    "Insurance Premium": ["Life Insurance", "ULIP", "Health Insurance", "Vehicle Insurance"],
    "Household": [
        "Electricity Bill", "Plumbing", "Electrical Repairs", "Appliance Repair", "Cleaning",
        "Pest Control", "Bike Maintenance", "Car Maintenance", 
        "Furniture", "Kitchen Tools", "Ironing", "Maid"
    ],
    "Connectivity": ["Airtel WiFi", "Jio Recharge", "Airtel Mobile", "Netflix", "Prime Video", "Disney+ Hotstar"],
    "Waste": ["Smoke", "Alcohol"],
    "Grocery": ["BigBasket", "Amazon", "Flipkart Grocery", "Zepto", "Local Store", "Other"],
    "Beauty": ["Nykaa", "Meesho", "Purple", "Salon", "Makeup", "Skincare", "Salon"],
    "Shopping": ["Amazon", "Flipkart", "Meesho", "Nykaa", "Purple", "Lifestyle", "Max", "Myntra"],
    "Health": ["Doctor Visit", "Medicines", "Lab Test", "Health Checkup"],
    "Utilities": ["Electricity", "Water", "Gas Cylinder", "Maintenance", "Garbage Collection"],
    "Gifts & Donations": ["Family", "Friends", "Charity", "Temple"],
    "Entertainment": ["Movies", "Concerts", "Games"],
    "Education": ["Online Courses", "Books", "Workshops"]
}
	- IMPORTANT: I have updated the categories and subcategories. Some additional information: there are only 2 users: 'Anirban' and 'Puspita'. Anirban has the following bank accouts: 'Anirban-SBI' and 'Anirban-ICICI'.  Puspita has the following bank accouts: 'Puspita-SBI' and 'Puspita-Bandhan'. I want to keep the app as simple as possible, so i am thinking of creating a database (sqlite3 / csv) with the following columns: 
	'Date': Date of transaction, 
	'Account': One of the 4 accounts for me and my wife mentioned above, 
	'Category': from the categories dictionary mentioned above, 
	'Sub-category': from the categories dictionary mentioned above, 
	'Type': Free text, we need to be able to enter it in the steamlit frontend, 
	'User': One of the 2 values: 'Anirban', "Puspita" 
	'Amount': amount of transaction.
	- IMPORTANT: "Currency Format: Just plain numbers, keep it simple!
		Frequency of Transactions: minimum: 2(atleat 1 transaction per user), maximum: 20
		Expense Bias: Should we simulate more transactions from a specific account or category (e.g., more grocery or restaurant spends)? - Grocery and household are the biggest ones, but they are less than rent. House rent: once a month, fixed, 30000 (Anirban-ICICI). Maid: once a month, fixed, 2500 (Puspita-SBI). I pay house rent, wife pays maid salary. Puspita uses Puspita-Bandhan only for Travel and beauty categories. For me, most of the daily expenses are from Anirban-ICICI, with some from Anirban-SBI.
		Include recurring transactions? Like SIPs, rent, etc. on specific days?SIP: once a month, 3000, fixed. ULIP: once a month, 4000. fixed I pay both from Anirban-ICICI.
		match the type to category and sub category. For example, if: Category - household, Subcategory - Ironing, then type has to be ironing. if the cat - Travel and subcat -train, the type has to be something like: bangalore-mysore vande bharat, type can't be 'lab test', In summary, the type has to make sense for category and subcategory. Also, Puspita uses her bandhan for travel and rarely something else. In travel also, she will mainly use it to book train / flight tickets, not pay  parking fees, I pay that. Please generate data accordingly.
		
	- IMPORTANT: Spend trends, fixed values and behaviour
		- Fixed spends: "Investment": ["SIP" - 3000, "Mutual Funds" - 0 (None for now), "Stocks" - 0 (None for now), "FD/RD"0 (None for now)],
        "Rent": ["House Rent" - inr 30000] - all once a month, with fixed values
		"Insurance Premium": ["Life Insurance" - 55000 twice a year on 20th march and 20th september, "ULIP" - 4000 every month between 20th - 25th, "Health Insurance" - lets say 1200 every month between 20th - 25th, "Vehicle Insurance" - once a year, 0 for now]
		"Household": [
            "Electricity Bill", "Plumbing", "Electrical Repairs", "Appliance Repair", "Cleaning",
            "Pest Control", "Bike Maintenance", "Car Maintenance",
            "Furniture", "Kitchen Tools", "Ironing", "Maid"
        ], - many have 2 month (Electricity bill) or 1 month (Maid) cycles or ad hoc costs (everything else in "Household") 
        "Connectivity": ["Airtel WiFi", "Jio Recharge", "Airtel Mobile", "Netflix", "Prime Video", "Disney+ Hotstar"], - many have 6 month (Airtel WiFi) or 3 month ( "Jio Recharge", "Airtel Mobile") cycles or ad hoc costs (everything else in "Connectivity") 
		- Category wise spends: 
		"Waste": ["Smoke", "Alcohol"], - ad hoc, a small percentage of total, variable weekly and monthly, alcohol max once a month
        "Grocery": ["BigBasket", "Amazon", "Flipkart Grocery", "Zepto", "Local Store", "Other"], - ad hoc, concentrated on the first week of the month (after salary, salary is not tracked in the data), smaller spends dotted throughout the month
        "Beauty": ["Nykaa", "Meesho", "Purplle", "Salon", "Makeup", "Skincare", "Salon"],- ad hoc, spends dotted throughout the month
        "Shopping": ["Amazon", "Flipkart", "Meesho", "Nykaa", "Purple", "Lifestyle", "Max", "Myntra"], - ad hoc, concentrated on the first week of the month (after salary, salary is not tracked in the data), smaller spends dotted throughout the month
        "Health": ["Doctor Visit", "Medicines", "Lab Test", "Health Checkup"],- ad hoc, spends dotted throughout the month
        "Utilities": ["Electricity", "Water", "Gas Cylinder", "Maintenance", "Garbage Collection"],- electricity bill - 2 month cycle, gas cylinder - 2 month cycle, rest ad hoc, spends dotted throughout the month
        "Gifts & Donations": ["Family", "Friends", "Charity", "Temple"],ad hoc, small amounts, spends dotted throughout the month
        "Entertainment": ["Movies", "Concerts", "Games"],ad hoc, small amounts, spends dotted throughout the month
        "Education": ["Online Courses", "Books", "Workshops"] ad hoc, small amounts, spends dotted throughout the month
 

		
		
		
		
		
		
		
		
		

"""

File: data_analysis.ipynb
Location: reference\data_analysis.ipynb
Summary: The file outlines an Exploratory Data Analysis (EDA) process for personal finance data, specifically analyzing a CSV file (`dummy_expenses_generated.csv`) to assess its structure, realism, and suitability for AI/ML tasks. It references additional files for rules and metadata and uses libraries like pandas and plotly for analysis.
Code: """
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exploratory Data Analysis (EDA) for Personal Finance Data (v2)\n",
    "\n",
    "**Objective:** Analyze the generated expense data (`dummy_expenses_generated.csv`) to validate its structure, adherence to generation rules, realism, and suitability for downstream AI/ML tasks (Phase 2 Assistant). Plots will be displayed inline.\n",
    "\n",
    "**Data Source:** `../dummy_expenses_generated.csv` (Relative path from `reference/` to project root)\n",
    "**Ruleset Reference:** `../sample_data_generation.csv`\n",
    "**Metadata Reference:** `../expense_metadata.json`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "fcb1b6c8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import necessary libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import plotly.express as px\n",
    "import plotly.graph_objects as go\n",
    "from plotly.subplots import make_subplots\n",
    "import json\n",
    "from pathlib import Path\n",
    "import datetime\n",
    "import logging\n",
    "import os # Import os for directory creation\n",
    "from typing import Optional, Dict, Any # For type hints\n",
    "\n",
    "# Configure logging for analysis insights\n",
    "logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "86a4f331",
   "metadata": {},
   "outputs": [],
   "source": [
    "# --- Setup Paths and Create Output Directory ---\n",
    "\n",
    "# Define file paths relative to the notebook location (reference/)\n",
    "NOTEBOOK_DIR = Path().resolve() # Should be the reference folder when running notebook there\n",
    "PROJECT_ROOT = NOTEBOOK_DIR.parent\n",
    "DATA_FILE = PROJECT_ROOT / \"dummy_expenses_generated.csv\"\n",
    "RULES_FILE = PROJECT_ROOT / \"sample_data_generation.csv\"\n",
    "METADATA_FILE = PROJECT_ROOT / \"expense_metadata.json\"\n",
    "\n",
    "# Define image output directory (though we won't save by default now)\n",
    "IMG_DIR = NOTEBOOK_DIR / \"img\"\n",
    "\n",
    "# Optionally ensure the image directory exists if you uncomment saving later\n",
    "# try:\n",
    "#     os.makedirs(IMG_DIR, exist_ok=True)\n",
    "#     logging.info(f\"Image output directory exists or created: {IMG_DIR}\")\n",
    "# except OSError as e:\n",
    "#     logging.error(f\"Could not create image directory {IMG_DIR}: {e}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f596d3c0",
   "metadata": {},
   "source": [
    "## Helper Function: Load Rules"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "2a2675ae",
   "metadata": {},
   "outputs": [],
   "source": [
    "# --- Helper Function: Load Rules (Moved here to be defined before use) ---\n",
    "def load_rules(filepath: Path) -> Optional[pd.DataFrame]:\n",
    "    \"\"\"Loads and preprocesses the ruleset CSV.\"\"\"\n",
    "    if not filepath.exists():\n",
    "        logging.error(f\"Rules file not found: {filepath}\")\n",
    "        return None\n",
    "    try:\n",
    "        df_rules = pd.read_csv(filepath)\n",
    "        # Clean column names if needed (assuming they are already clean based on previous step)\n",
    "        df_rules.columns = [col.strip() for col in df_rules.columns]\n",
    "        # Split the valid types string into a list\n",
    "        # Handle potential errors if the column doesn't exist or has NaNs\n",
    "        if 'Valid-expense-types' in df_rules.columns:\n",
    "             df_rules['Valid-expense-types'] = df_rules['Valid-expense-types'].fillna('').astype(str).str.split('|')\n",
    "        else:\n",
    "             logging.warning(\"'Valid-expense-types' column not found in rules file.\")\n",
    "             df_rules['Valid-expense-types'] = [[] for _ in range(len(df_rules))] # Add empty list\n",
    "\n",
    "        # Convert amount/count columns to numeric, coercing errors\n",
    "        for col in ['Min-expenses-amount', 'Max-expenses-amount', 'Max-times-per-month']:\n",
    "            if col in df_rules.columns:\n",
    "                df_rules[col] = pd.to_numeric(df_rules[col], errors='coerce')\n",
    "            else:\n",
    "                logging.warning(f\"Column '{col}' not found in rules file.\")\n",
    "                df_rules[col] = np.nan # Add column with NaN if missing\n",
    "\n",
    "        # Fill missing Max-times with a default (e.g., 5) or handle based on frequency\n",
    "        df_rules['Max-times-per-month'].fillna(5, inplace=True)\n",
    "        df_rules['Max-times-per-month'] = df_rules['Max-times-per-month'].astype(int)\n",
    "\n",
    "        # Define critical columns needed from rules file\n",
    "        critical_rule_cols = ['Category', 'Sub-category', 'User', 'Account', 'Expense-Frequency', 'Min-expenses-amount', 'Max-expenses-amount', 'Max-times-per-month']\n",
    "        missing_critical = [col for col in critical_rule_cols if col not in df_rules.columns]\n",
    "        if missing_critical:\n",
    "            logging.error(f\"Rules file is missing critical columns: {missing_critical}\")\n",
    "            return None\n",
    "\n",
    "        # Drop rows with missing critical numeric info after conversion attempts\n",
    "        df_rules.dropna(subset=['Min-expenses-amount', 'Max-expenses-amount'], inplace=True)\n",
    "        # Drop rows with missing critical categorical info\n",
    "        df_rules.dropna(subset=['Category', 'Sub-category', 'User', 'Account', 'Expense-Frequency'], inplace=True)\n",
    "\n",
    "        logging.info(f\"Loaded and preprocessed {len(df_rules)} rules from {filepath}\")\n",
    "        return df_rules\n",
    "    except Exception as e:\n",
    "        logging.error(f\"Error loading or processing rules file {filepath}: {e}\", exc_info=True)\n",
    "        return None"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2e32c188",
   "metadata": {},
   "source": [
    "## 1. Load Data and Basic Checks\n",
    "\n",
    "Load the generated CSV, parse dates correctly using the 'dd-mm-yyyy' format, check basic info, data types, and null values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "55eae2b5",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO: Attempting to load data from: E:\\Code\\Projects\\App-PersonalFinance\\app-personal-finance\\dummy_expenses_generated.csv\n",
      "INFO: Reference ruleset: E:\\Code\\Projects\\App-PersonalFinance\\app-personal-finance\\sample_data_generation.csv\n",
      "INFO: Reference metadata: E:\\Code\\Projects\\App-PersonalFinance\\app-personal-finance\\expense_metadata.json\n",
      "INFO: Successfully loaded E:\\Code\\Projects\\App-PersonalFinance\\app-personal-finance\\dummy_expenses_generated.csv. Shape: (951, 11)\n",
      "INFO: Successfully loaded metadata from E:\\Code\\Projects\\App-PersonalFinance\\app-personal-finance\\expense_metadata.json\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loaded 951 rows.\n"
     ]
    }
   ],
   "source": [
    "logging.info(f\"Attempting to load data from: {DATA_FILE}\")\n",
    "logging.info(f\"Reference ruleset: {RULES_FILE}\")\n",
    "logging.info(f\"Reference metadata: {METADATA_FILE}\")\n",
    "\n",
    "# Load the generated data\n",
    "try:\n",
    "    df = pd.read_csv(DATA_FILE)\n",
    "    logging.info(f\"Successfully loaded {DATA_FILE}. Shape: {df.shape}\")\n",
    "    print(f\"Loaded {len(df)} rows.\")\n",
    "except FileNotFoundError:\n",
    "    logging.error(f\"Data file not found at {DATA_FILE}. Please ensure it's generated in the project root.\")\n",
    "    df = pd.DataFrame() # Create empty df to avoid downstream errors\n",
    "except Exception as e:\n",
    "    logging.error(f\"Error loading data CSV {DATA_FILE}: {e}\", exc_info=True)\n",
    "    df = pd.DataFrame()\n",
    "\n",
    "# Load metadata for validation checks\n",
    "try:\n",
    "    with open(METADATA_FILE, 'r') as f:\n",
    "        metadata = json.load(f)\n",
    "    logging.info(f\"Successfully loaded metadata from {METADATA_FILE}\")\n",
    "except Exception as e:\n",
    "    logging.error(f\"Could not load metadata file {METADATA_FILE}: {e}\")\n",
    "    metadata = {} # Assign empty dict if load fails"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "5d905392",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO: Converted 'date' column to datetime objects ('date_dt').\n",
      "INFO: All dates successfully parsed.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Data Info ---\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 951 entries, 0 to 950\n",
      "Data columns (total 11 columns):\n",
      " #   Column        Non-Null Count  Dtype  \n",
      "---  ------        --------------  -----  \n",
      " 0   date          951 non-null    object \n",
      " 1   year          951 non-null    int64  \n",
      " 2   month         951 non-null    object \n",
      " 3   week          951 non-null    object \n",
      " 4   day_of_week   951 non-null    object \n",
      " 5   account       951 non-null    object \n",
      " 6   category      951 non-null    object \n",
      " 7   sub_category  951 non-null    object \n",
      " 8   type          951 non-null    object \n",
      " 9   user          951 non-null    object \n",
      " 10  amount        951 non-null    float64\n",
      "dtypes: float64(1), int64(1), object(9)\n",
      "memory usage: 81.9+ KB\n",
      "\n",
      "--- Date Conversion ---\n"
     ]
    }
   ],
   "source": [
    "# Display basic information if data loaded\n",
    "if not df.empty:\n",
    "    print(\"\\n--- Data Info ---\")\n",
    "    df.info()\n",
    "\n",
    "    # Convert 'date' column from dd-mm-yyyy string to datetime objects for analysis\n",
    "    print(\"\\n--- Date Conversion ---\")\n",
    "    try:\n",
    "        # Explicitly use dayfirst=True or format='%d-%m-%Y'\n",
    "        df['date_dt'] = pd.to_datetime(df['date'], format='%d-%m-%Y', errors='coerce')\n",
    "        logging.info(\"Converted 'date' column to datetime objects ('date_dt').\")\n",
    "\n",
    "        # Check for any conversion errors\n",
    "        null_dates = df['date_dt'].isnull().sum()\n",
    "        if null_dates > 0:\n",
    "            logging.warning(f\"Found {null_dates} rows with invalid date formats that couldn't be parsed to 'dd-mm-yyyy'.\")\n",
    "            # Optional: Display problematic rows\n",
    "            # print(\"\\nRows with date parsing errors:\")\n",
    "            # print(df[df['date_dt'].isnull()]['date'])\n",
    "            df.dropna(subset=['date_dt'], inplace=True) # Remove rows with invalid dates for analysis\n",
    "            logging.info(f\"Removed rows with invalid dates. New shape: {df.shape}\")\n",
    "        else:\n",
    "            logging.info(\"All dates successfully parsed.\")\n",
    "\n",
    "    except KeyError:\n",
    "        logging.error(\"Column 'date' not found in the CSV.\")\n",
    "    except Exception as e:\n",
    "        logging.error(f\"Error during date conversion: {e}\", exc_info=True)\n",
    "\n",
    "else:\n",
    "    print(\"DataFrame is empty. Cannot perform further analysis.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d2692605",
   "metadata": {},
   "source": [
    "## 2. Data Range and Null Value Check\n",
    "\n",
    "Verify the date range covers the expected period and check for unexpected missing values in core columns."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "77c097ac",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: Data ends earlier (2025-04-15) than expected (2025-04-20).\n",
      "INFO: No unexpected null values found in critical columns (sub_category/type might have blanks/nulls).\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Date Range Check ---\n",
      "Data spans from: 2023-01-01 to 2025-04-15\n",
      "\n",
      "--- Null Value Check ---\n",
      "Columns with Null/NaN values:\n",
      "Series([], dtype: int64)\n"
     ]
    }
   ],
   "source": [
    "if not df.empty and 'date_dt' in df.columns:\n",
    "    min_date = df['date_dt'].min()\n",
    "    max_date = df['date_dt'].max()\n",
    "    print(f\"\\n--- Date Range Check ---\")\n",
    "    print(f\"Data spans from: {min_date.strftime('%Y-%m-%d')} to {max_date.strftime('%Y-%m-%d')}\")\n",
    "\n",
    "    expected_start = datetime.datetime(2023, 1, 1)\n",
    "    expected_end = datetime.datetime(2025, 4, 20)\n",
    "\n",
    "    if min_date.date() > expected_start.date():\n",
    "        logging.warning(f\"Data starts later ({min_date.date()}) than expected ({expected_start.date()}).\")\n",
    "    if max_date.date() < expected_end.date():\n",
    "        logging.warning(f\"Data ends earlier ({max_date.date()}) than expected ({expected_end.date()}).\")\n",
    "\n",
    "    print(\"\\n--- Null Value Check ---\")\n",
    "    null_counts = df.isnull().sum()\n",
    "    print(\"Columns with Null/NaN values:\")\n",
    "    print(null_counts[null_counts > 0]) # Only show columns with nulls\n",
    "\n",
    "    # Check critical columns - adjust if 'sub_category' or 'type' can legitimately be empty strings instead of NaN\n",
    "    critical_cols = ['date', 'year', 'month', 'week', 'day_of_week', 'account', 'category', 'user', 'amount', 'date_dt']\n",
    "    unexpected_nulls = null_counts.reindex(critical_cols, fill_value=0).sum() > 0 # Use reindex to handle missing cols safely\n",
    "\n",
    "    if unexpected_nulls:\n",
    "        logging.error(\"UNEXPECTED null values found in critical columns! Review data generation.\")\n",
    "    else:\n",
    "        logging.info(\"No unexpected null values found in critical columns (sub_category/type might have blanks/nulls).\")\n",
    "else:\n",
    "     print(\"Skipping range/null checks as DataFrame is empty or date conversion failed.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cff3bca3",
   "metadata": {},
   "source": [
    "## 3. Constraint Validation: Row Counts\n",
    "\n",
    "Check if the number of transactions per month adheres to the `MONTHLY_MAX_ROWS = 100` limit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "fac25dab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "hovertemplate": "Month (YYYY-MM)=%{x}<br>Number of Transactions=%{y}<extra></extra>",
         "legendgroup": "",
         "marker": {
          "color": "#636efa",
          "pattern": {
           "shape": ""
          }
         },
         "name": "",
         "orientation": "v",
         "showlegend": false,
         "textposition": "auto",
         "type": "bar",
         "x": [
          "2023-01",
          "2023-02",
          "2023-03",
          "2023-04",
          "2023-05",
          "2023-06",
          "2023-07",
          "2023-08",
          "2023-09",
          "2023-10",
          "2023-11",
          "2023-12",
          "2024-01",
          "2024-02",
          "2024-03",
          "2024-04",
          "2024-05",
          "2024-06",
          "2024-07",
          "2024-08",
          "2024-09",
          "2024-10",
          "2024-11",
          "2024-12",
          "2025-01",
          "2025-02",
          "2025-03",
          "2025-04"
         ],
         "xaxis": "x",
         "y": {
          "bdata": "LyUjGyMaHScpJx8iHhwgGh0iIhwmJiElHigrHw==",
          "dtype": "i1"
         },
         "yaxis": "y"
        }
       ],
       "layout": {
        "annotations": [
         {
          "showarrow": false,
          "text": "Max Limit (100)",
          "x": 1,
          "xanchor": "right",
          "xref": "x domain",
          "y": 100,
          "yanchor": "bottom",
          "yref": "y"
         }
        ],
        "barmode": "relative",
        "height": 400,
        "legend": {
         "tracegroupgap": 0
        },
        "shapes": [
         {
          "line": {
           "color": "red",
           "dash": "dash"
          },
          "type": "line",
          "x0": 0,
          "x1": 1,
          "xref": "x domain",
          "y0": 100,
          "y1": 100,
          "yref": "y"
         }
        ],
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "fillpattern": {
             "fillmode": "overlay",
             "size": 10,
             "solidity": 0.2
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermap": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermap"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "Number of Transactions per Month"
        },
        "xaxis": {
         "anchor": "y",
         "domain": [
          0,
          1
         ],
         "tickangle": -45,
         "title": {
          "text": "Month (YYYY-MM)"
         }
        },
        "yaxis": {
         "anchor": "x",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "Number of Transactions"
         }
        }
       }
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO: Monthly row counts are within the limit (<= 100).\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Row Count Validation ---\n",
      "Maximum rows found in a single month: 47\n",
      "Total rows generated: 951\n"
     ]
    }
   ],
   "source": [
    "if not df.empty and 'month' in df.columns:\n",
    "    monthly_row_counts = df.groupby('month').size().reset_index(name='transaction_count')\n",
    "\n",
    "    fig_row_counts = px.bar(monthly_row_counts, x='month', y='transaction_count',\n",
    "                            title='Number of Transactions per Month',\n",
    "                            labels={'month': 'Month (YYYY-MM)', 'transaction_count': 'Number of Transactions'},\n",
    "                            height=400)\n",
    "    fig_row_counts.add_hline(y=100, line_dash=\"dash\", line_color=\"red\", annotation_text=\"Max Limit (100)\")\n",
    "    fig_row_counts.update_layout(xaxis_tickangle=-45)\n",
    "    fig_row_counts.show() # Display inline\n",
    "\n",
    "    # Save image (Commented out)\n",
    "    # try:\n",
    "    #     img_path = IMG_DIR / \"monthly_transaction_counts.png\"\n",
    "    #     fig_row_counts.write_image(img_path)\n",
    "    #     logging.info(f\"Saved monthly row counts plot to {img_path}\")\n",
    "    # except Exception as e:\n",
    "    #     logging.error(f\"Failed to save monthly row counts plot: {e}\")\n",
    "\n",
    "\n",
    "    # Discrepancy Check\n",
    "    max_rows_in_month = monthly_row_counts['transaction_count'].max()\n",
    "    print(f\"\\n--- Row Count Validation ---\")\n",
    "    print(f\"Maximum rows found in a single month: {max_rows_in_month}\")\n",
    "    if max_rows_in_month > 100:\n",
    "        exceeding_months = monthly_row_counts[monthly_row_counts['transaction_count'] > 100]['month'].tolist()\n",
    "        logging.error(f\"Monthly row count limit (>100) EXCEEDED! Max found: {max_rows_in_month}. Check months: {exceeding_months}\")\n",
    "    else:\n",
    "        logging.info(\"Monthly row counts are within the limit (<= 100).\")\n",
    "\n",
    "    total_rows = df.shape[0]\n",
    "    print(f\"Total rows generated: {total_rows}\")\n",
    "\n",
    "else:\n",
    "    print(\"Skipping row count validation.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9e3fde44",
   "metadata": {},
   "source": [
    "## 4. Constraint Validation: Monthly Totals\n",
    "\n",
    "Verify if the total spending per month falls within the target range of ₹60,000 - ₹120,000."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "48fd2dc7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "hovertemplate": "Month (YYYY-MM)=%{x}<br>Total Amount (INR)=%{y}<extra></extra>",
         "legendgroup": "",
         "marker": {
          "color": "#636efa",
          "pattern": {
           "shape": ""
          }
         },
         "name": "",
         "orientation": "v",
         "showlegend": false,
         "textposition": "auto",
         "type": "bar",
         "x": [
          "2023-01",
          "2023-02",
          "2023-03",
          "2023-04",
          "2023-05",
          "2023-06",
          "2023-07",
          "2023-08",
          "2023-09",
          "2023-10",
          "2023-11",
          "2023-12",
          "2024-01",
          "2024-02",
          "2024-03",
          "2024-04",
          "2024-05",
          "2024-06",
          "2024-07",
          "2024-08",
          "2024-09",
          "2024-10",
          "2024-11",
          "2024-12",
          "2025-01",
          "2025-02",
          "2025-03",
          "2025-04"
         ],
         "xaxis": "x",
         "y": {
          "bdata": "16NwPVrD/kCkcD0KD/j+QM3MzMxcKgZBCtejcLkA/0D2KFyPsrH+QPYoXI/+Wv9ASOF6FD4m/0CamZmZ2V7/QFK4HoUzHgZBhetRuE4C/0CamZmZTTb/QIXrUbhWxf5A61G4HksjAEHsUbgeFU7/QD4K16MyYQZBzczMzDzO/0AfhetRWNz+QNejcD22GP9AH4XrURwg/0DhehSuI7P9QBSuR+EaTQZB9ihcj96d/UAfhetRhCj/QOtRuB4ZPf5AAAAAABQV/0BxPQrXJxb+QEjhehTiCwZBj8L1KKS0/kA=",
          "dtype": "f8"
         },
         "yaxis": "y"
        }
       ],
       "layout": {
        "annotations": [
         {
          "showarrow": false,
          "text": "Min Target (60k)",
          "x": 1,
          "xanchor": "right",
          "xref": "x domain",
          "y": 60000,
          "yanchor": "bottom",
          "yref": "y"
         },
         {
          "showarrow": false,
          "text": "Max Target (120k)",
          "x": 1,
          "xanchor": "right",
          "xref": "x domain",
          "y": 120000,
          "yanchor": "bottom",
          "yref": "y"
         }
        ],
        "barmode": "relative",
        "height": 400,
        "legend": {
         "tracegroupgap": 0
        },
        "shapes": [
         {
          "line": {
           "color": "orange",
           "dash": "dash"
          },
          "type": "line",
          "x0": 0,
          "x1": 1,
          "xref": "x domain",
          "y0": 60000,
          "y1": 60000,
          "yref": "y"
         },
         {
          "line": {
           "color": "red",
           "dash": "dash"
          },
          "type": "line",
          "x0": 0,
          "x1": 1,
          "xref": "x domain",
          "y0": 120000,
          "y1": 120000,
          "yref": "y"
         }
        ],
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "fillpattern": {
             "fillmode": "overlay",
             "size": 10,
             "solidity": 0.2
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermap": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermap"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "Total Spending per Month"
        },
        "xaxis": {
         "anchor": "y",
         "domain": [
          0,
          1
         ],
         "tickangle": -45,
         "title": {
          "text": "Month (YYYY-MM)"
         }
        },
        "yaxis": {
         "anchor": "x",
         "domain": [
          0,
          1
         ],
         "tickprefix": "₹",
         "title": {
          "text": "Total Amount (INR)"
         }
        }
       }
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO: All monthly totals meet or exceed the minimum target (₹60,000).\n",
      "ERROR: 22 months found SIGNIFICANTLY ABOVE ₹120,000 target (>5% overshoot): ['2023-01', '2023-02', '2023-03', '2023-04', '2023-06', '2023-07', '2023-08', '2023-09', '2023-10', '2023-11', '2023-12', '2024-01', '2024-02', '2024-03', '2024-04', '2024-05', '2024-06', '2024-07', '2024-09', '2024-11', '2025-01', '2025-03']\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Monthly Total Validation ---\n",
      "Minimum monthly total found: ₹121,309.91\n",
      "Maximum monthly total found: ₹183,334.33\n"
     ]
    }
   ],
   "source": [
    "if not df.empty and 'month' in df.columns and 'amount' in df.columns:\n",
    "    monthly_totals = df.groupby('month')['amount'].sum().reset_index(name='total_amount')\n",
    "\n",
    "    fig_monthly_totals = px.bar(monthly_totals, x='month', y='total_amount',\n",
    "                                title='Total Spending per Month',\n",
    "                                labels={'month': 'Month (YYYY-MM)', 'total_amount': 'Total Amount (INR)'},\n",
    "                                height=400)\n",
    "    fig_monthly_totals.add_hline(y=60000, line_dash=\"dash\", line_color=\"orange\", annotation_text=\"Min Target (60k)\")\n",
    "    fig_monthly_totals.add_hline(y=120000, line_dash=\"dash\", line_color=\"red\", annotation_text=\"Max Target (120k)\")\n",
    "    fig_monthly_totals.update_layout(yaxis_tickprefix=\"₹\", xaxis_tickangle=-45)\n",
    "    fig_monthly_totals.show() # Display inline\n",
    "\n",
    "    # Save image (Commented out)\n",
    "    # try:\n",
    "    #     img_path = IMG_DIR / \"monthly_total_spending.png\"\n",
    "    #     fig_monthly_totals.write_image(img_path)\n",
    "    #     logging.info(f\"Saved monthly total spending plot to {img_path}\")\n",
    "    # except Exception as e:\n",
    "    #     logging.error(f\"Failed to save monthly total spending plot: {e}\")\n",
    "\n",
    "    # Discrepancy Check\n",
    "    min_monthly_total = monthly_totals['total_amount'].min()\n",
    "    max_monthly_total = monthly_totals['total_amount'].max()\n",
    "    months_below_min = monthly_totals[monthly_totals['total_amount'] < 60000]\n",
    "    months_above_max = monthly_totals[monthly_totals['total_amount'] > 120000]\n",
    "\n",
    "    print(f\"\\n--- Monthly Total Validation ---\")\n",
    "    print(f\"Minimum monthly total found: ₹{min_monthly_total:,.2f}\")\n",
    "    print(f\"Maximum monthly total found: ₹{max_monthly_total:,.2f}\")\n",
    "\n",
    "    if not months_below_min.empty:\n",
    "        logging.warning(f\"{len(months_below_min)} months found BELOW ₹60,000 target: {months_below_min['month'].tolist()}\")\n",
    "    else:\n",
    "        logging.info(\"All monthly totals meet or exceed the minimum target (₹60,000).\")\n",
    "\n",
    "    if not months_above_max.empty:\n",
    "        # Allow slightly above (e.g. 5%) due to fixed costs potentially pushing it over\n",
    "        months_significantly_above_max = monthly_totals[monthly_totals['total_amount'] > 120000 * 1.05]\n",
    "        if not months_significantly_above_max.empty:\n",
    "            logging.error(f\"{len(months_significantly_above_max)} months found SIGNIFICANTLY ABOVE ₹120,000 target (>5% overshoot): {months_significantly_above_max['month'].tolist()}\")\n",
    "        else:\n",
    "            logging.warning(f\"{len(months_above_max)} months found slightly above ₹120,000 target (<=5% overshoot - check if acceptable): {months_above_max['month'].tolist()}\")\n",
    "    else:\n",
    "        logging.info(\"All monthly totals are within or acceptably close to the maximum target (<= ₹120,000).\")\n",
    "else:\n",
    "    print(\"Skipping monthly total validation.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83bfb2b9",
   "metadata": {},
   "source": [
    "## 5. Mapping Validation: User vs. Account\n",
    "\n",
    "Ensure that the `user` column correctly corresponds to the `account` column based on the metadata rules."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "3965f380",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- User-Account Mapping Validation ---\n",
      "Observed User-Account Combinations (Transaction Counts):\n",
      "account  Anirban-ICICI  Anirban-SBI  Puspita-Bandhan  Puspita-SBI\n",
      "user                                                             \n",
      "Anirban            412          101                0            0\n",
      "Puspita              0            0               62          376\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "0d0d09cefa9a4d088150bc1871e4b369",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Checking User-Account:   0%|          | 0/951 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO: User-Account mapping appears consistent with metadata for all transactions.\n"
     ]
    }
   ],
   "source": [
    "if not df.empty and metadata and 'User' in metadata:\n",
    "    print(\"\\n--- User-Account Mapping Validation ---\")\n",
    "    # Display counts of each combination\n",
    "    user_account_crosstab = pd.crosstab(df['user'], df['account'])\n",
    "    print(\"Observed User-Account Combinations (Transaction Counts):\")\n",
    "    print(user_account_crosstab)\n",
    "\n",
    "    # Discrepancy Check against metadata\n",
    "    valid_map = metadata.get(\"User\", {})\n",
    "    invalid_combos_found = False\n",
    "    checked_accounts = set()\n",
    "\n",
    "    # Use tqdm if iterating over many rows, otherwise direct iteration is fine\n",
    "    from tqdm.notebook import tqdm # Use notebook version\n",
    "    for index, row in tqdm(df.iterrows(), total=df.shape[0], desc=\"Checking User-Account\"):\n",
    "    # for index, row in df.iterrows(): # Direct iteration for <2500 rows is okay\n",
    "        account = row['account']\n",
    "        user = row['user']\n",
    "        # Avoid re-checking same account if metadata is missing\n",
    "        if account in checked_accounts: continue\n",
    "\n",
    "        expected_user = valid_map.get(account)\n",
    "\n",
    "        if expected_user is None:\n",
    "            logging.error(f\"FATAL: Account '{account}' found in data but MISSING in metadata User map! Cannot validate.\")\n",
    "            invalid_combos_found = True\n",
    "            checked_accounts.add(account) # Mark as checked to avoid repeating error\n",
    "        elif user != expected_user:\n",
    "            logging.error(f\"User-Account MISMATCH! Account: '{account}', Expected User: '{expected_user}', Found User: '{user}'. Row index: {index}\")\n",
    "            invalid_combos_found = True\n",
    "            # Don't add to checked_accounts here, allow finding more mismatches for same account if they exist\n",
    "\n",
    "    if not invalid_combos_found:\n",
    "        logging.info(\"User-Account mapping appears consistent with metadata for all transactions.\")\n",
    "    else:\n",
    "        logging.error(\"CRITICAL User-Account mapping inconsistencies detected! Review generation logic or metadata.\")\n",
    "else:\n",
    "    print(\"Skipping User-Account validation (Data or Metadata missing/incomplete).\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dddcbe0c",
   "metadata": {},
   "source": [
    "## 6. Mapping Validation: Category vs. Sub-Category\n",
    "\n",
    "Check if all non-blank `sub_category` values are valid for their corresponding `category` based on the metadata."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "19e899df",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Category-SubCategory Mapping Validation ---\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "08c39562969e4463b6d692023b8d59c3",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Checking Cat-SubCat:   0%|          | 0/951 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO: Category-SubCategory mapping appears consistent with metadata for all non-blank sub-categories.\n"
     ]
    }
   ],
   "source": [
    "if not df.empty and metadata and 'categories' in metadata:\n",
    "    print(\"\\n--- Category-SubCategory Mapping Validation ---\")\n",
    "    category_map = metadata.get(\"categories\", {})\n",
    "    invalid_subcats_found = False\n",
    "    invalid_details = [] # Store details of invalid rows\n",
    "\n",
    "    from tqdm.notebook import tqdm\n",
    "    for index, row in tqdm(df.iterrows(), total=df.shape[0], desc=\"Checking Cat-SubCat\"):\n",
    "    # for index, row in df.iterrows():\n",
    "        category = row['category']\n",
    "        sub_category = row['sub_category']\n",
    "\n",
    "        # Only validate if sub_category is present (not NaN or empty string)\n",
    "        if pd.notna(sub_category) and sub_category != \"\":\n",
    "            valid_subcats = category_map.get(category)\n",
    "\n",
    "            if valid_subcats is None:\n",
    "                detail = f\"Category '{category}' (Row {index}) not found in metadata map.\"\n",
    "                if detail not in [d[0] for d in invalid_details]: # Log category error once\n",
    "                    logging.error(detail)\n",
    "                    invalid_details.append((detail, index))\n",
    "                invalid_subcats_found = True\n",
    "            elif sub_category not in valid_subcats:\n",
    "                detail = f\"Invalid Sub-category! Category: '{category}', Found Sub-cat: '{sub_category}'. Valid: {valid_subcats}. Row Index: {index}\"\n",
    "                logging.error(detail)\n",
    "                invalid_details.append((detail, index))\n",
    "                invalid_subcats_found = True\n",
    "\n",
    "    if not invalid_subcats_found:\n",
    "        logging.info(\"Category-SubCategory mapping appears consistent with metadata for all non-blank sub-categories.\")\n",
    "    else:\n",
    "        logging.error(f\"CRITICAL Category-SubCategory mapping inconsistencies detected! Found {len(invalid_details)} issues.\")\n",
    "        # print(\"\\nSample Invalid Details:\")\n",
    "        # for detail, idx in invalid_details[:min(5, len(invalid_details))]:\n",
    "        #     print(f\"- {detail}\")\n",
    "else:\n",
    "    print(\"Skipping Category-SubCategory validation (Data or Metadata missing/incomplete).\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1624e291",
   "metadata": {},
   "source": [
    "## 7. Fixed Expense Validation: Rent\n",
    "\n",
    "Check frequency (1/month), amount (30k), payer (Anirban/ICICI)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "409a5dfe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Rent Validation ---\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO: Rent transactions appear correct (Amount, Payer, Frequency).\n"
     ]
    },
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "hovertemplate": "month=%{x}<br>count=%{y}<extra></extra>",
         "legendgroup": "",
         "marker": {
          "color": "#636efa",
          "pattern": {
           "shape": ""
          }
         },
         "name": "",
         "orientation": "v",
         "showlegend": false,
         "textposition": "auto",
         "type": "bar",
         "x": [
          "2023-01",
          "2023-02",
          "2023-03",
          "2023-04",
          "2023-05",
          "2023-06",
          "2023-07",
          "2023-08",
          "2023-09",
          "2023-10",
          "2023-11",
          "2023-12",
          "2024-01",
          "2024-02",
          "2024-03",
          "2024-04",
          "2024-05",
          "2024-06",
          "2024-07",
          "2024-08",
          "2024-09",
          "2024-10",
          "2024-11",
          "2024-12",
          "2025-01",
          "2025-02",
          "2025-03",
          "2025-04"
         ],
         "xaxis": "x",
         "y": {
          "bdata": "AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQ==",
          "dtype": "i1"
         },
         "yaxis": "y"
        }
       ],
       "layout": {
        "barmode": "relative",
        "height": 300,
        "legend": {
         "tracegroupgap": 0
        },
        "showlegend": false,
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "fillpattern": {
             "fillmode": "overlay",
             "size": 10,
             "solidity": 0.2
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermap": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermap"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "Monthly Rent Transaction Count"
        },
        "xaxis": {
         "anchor": "y",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "Month (YYYY-MM)"
         }
        },
        "yaxis": {
         "anchor": "x",
         "domain": [
          0,
          1
         ],
         "dtick": 1,
         "tickmode": "linear",
         "title": {
          "text": "Count"
         }
        }
       }
      }
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "if not df.empty and 'month' in df.columns:\n",
    "    print(\"\\n--- Rent Validation ---\")\n",
    "    rent_df = df[(df['category'] == 'Rent') & (df['sub_category'] == 'House Rent')].copy()\n",
    "\n",
    "    if rent_df.empty:\n",
    "        logging.warning(\"No Rent transactions found!\")\n",
    "    else:\n",
    "        valid = True\n",
    "        # Check Amount\n",
    "        if not (rent_df['amount'] == 30000).all():\n",
    "            logging.error(f\"Rent amount incorrect! Found values != 30000: {rent_df[rent_df['amount'] != 30000]['amount'].unique()}\")\n",
    "            valid = False\n",
    "        # Check User/Account\n",
    "        if not ((rent_df['user'] == 'Anirban') & (rent_df['account'] == 'Anirban-ICICI')).all():\n",
    "            logging.error(f\"Rent payer incorrect! Found instances not paid by Anirban/Anirban-ICICI.\")\n",
    "            valid = False\n",
    "        # Check Frequency\n",
    "        rent_monthly_counts = rent_df.groupby('month').size()\n",
    "        if (rent_monthly_counts != 1).any():\n",
    "            logging.error(f\"Rent frequency incorrect! Months with counts != 1: {rent_monthly_counts[rent_monthly_counts != 1].index.tolist()}\")\n",
    "            valid = False\n",
    "\n",
    "        if valid:\n",
    "            logging.info(\"Rent transactions appear correct (Amount, Payer, Frequency).\")\n",
    "\n",
    "        # Visualize counts even if correct\n",
    "        fig_rent_counts = px.bar(rent_monthly_counts.reset_index(name='count'), x='month', y='count', title='Monthly Rent Transaction Count', height=300)\n",
    "        fig_rent_counts.update_layout(yaxis_title='Count', xaxis_title='Month (YYYY-MM)', showlegend=False, yaxis=dict(tickmode='linear', dtick=1))\n",
    "        fig_rent_counts.show() # Display inline\n",
    "        # try: fig_rent_counts.write_image(IMG_DIR / \"rent_monthly_counts.png\") # Commented out\n",
    "        # except Exception as e: logging.error(f\"Failed to save rent counts plot: {e}\")\n",
    "\n",
    "else:\n",
    "    print(\"Skipping Rent validation.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "094e3696",
   "metadata": {},
   "source": [
    "## 8. Fixed Expense Validation: SIP & ULIP\n",
    "\n",
    "Check monthly frequency, amounts (SIP=3k, ULIP=4k), and payer (Anirban-ICICI)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "e631899a",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO: SIP transactions appear correct (Amount, Payer, Frequency<=1). Check warnings for missed months.\n",
      "INFO: ULIP transactions appear correct (Amount, Payer, Frequency<=1). Check warnings for missed months.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- SIP & ULIP Validation ---\n"
     ]
    }
   ],
   "source": [
    "if not df.empty and 'month' in df.columns:\n",
    "    print(\"\\n--- SIP & ULIP Validation ---\")\n",
    "    sip_df = df[(df['category'] == 'Investment') & (df['sub_category'] == 'SIP')].copy()\n",
    "    ulip_df = df[(df['category'] == 'Insurance Premium') & (df['sub_category'] == 'ULIP')].copy()\n",
    "    valid_sip = True; valid_ulip = True\n",
    "\n",
    "    # --- SIP ---\n",
    "    if sip_df.empty: logging.warning(\"No SIP transactions found!\")\n",
    "    else:\n",
    "        if not (sip_df['amount'] == 3000).all(): logging.error(f\"SIP amount incorrect! Found values != 3000.\"); valid_sip = False\n",
    "        if not ((sip_df['user'] == 'Anirban') & (sip_df['account'] == 'Anirban-ICICI')).all(): logging.error(\"SIP payer incorrect!\"); valid_sip = False\n",
    "        sip_counts = sip_df.groupby('month').size()\n",
    "        if (sip_counts > 1).any(): logging.error(f\"SIP frequency incorrect (>1 per month)!\"); valid_sip = False\n",
    "        # Check for missing months more accurately\n",
    "        all_months_in_data = set(df['month'].unique()) # Get all unique months from the main dataframe\n",
    "        sip_months_found = set(sip_df['month'].unique())\n",
    "        missing_sip_months = all_months_in_data - sip_months_found\n",
    "        if missing_sip_months and valid_sip: logging.warning(f\"SIP seems missing in {len(missing_sip_months)} months: {sorted(list(missing_sip_months))[:5]}...\")\n",
    "\n",
    "        if valid_sip: logging.info(\"SIP transactions appear correct (Amount, Payer, Frequency<=1). Check warnings for missed months.\")\n",
    "\n",
    "    # --- ULIP ---\n",
    "    if ulip_df.empty: logging.warning(\"No ULIP transactions found!\")\n",
    "    else:\n",
    "        if not (ulip_df['amount'] == 4000).all(): logging.error(f\"ULIP amount incorrect! Found values != 4000.\"); valid_ulip = False\n",
    "        if not ((ulip_df['user'] == 'Anirban') & (ulip_df['account'] == 'Anirban-ICICI')).all(): logging.error(\"ULIP payer incorrect!\"); valid_ulip = False\n",
    "        ulip_counts = ulip_df.groupby('month').size()\n",
    "        if (ulip_counts > 1).any(): logging.error(f\"ULIP frequency incorrect (>1 per month)!\"); valid_ulip = False\n",
    "        ulip_months_found = set(ulip_df['month'].unique())\n",
    "        missing_ulip_months = all_months_in_data - ulip_months_found\n",
    "        if missing_ulip_months and valid_ulip: logging.warning(f\"ULIP seems missing in {len(missing_ulip_months)} months: {sorted(list(missing_ulip_months))[:5]}...\")\n",
    "\n",
    "        if valid_ulip: logging.info(\"ULIP transactions appear correct (Amount, Payer, Frequency<=1). Check warnings for missed months.\")\n",
    "\n",
    "else:\n",
    "    print(\"Skipping SIP/ULIP validation.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c01f665e",
   "metadata": {},
   "source": [
    "## 9. Fixed Expense Validation: Maid Salary\n",
    "\n",
    "Check monthly frequency (once), amount (₹2500), and payer (Puspita-SBI)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "e335ad6d",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO: Maid Salary transactions appear correct.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Maid Salary Validation ---\n"
     ]
    }
   ],
   "source": [
    "if not df.empty and 'month' in df.columns:\n",
    "    print(\"\\n--- Maid Salary Validation ---\")\n",
    "    maid_df = df[(df['category'] == 'Household') & (df['sub_category'] == 'Maid')].copy()\n",
    "    valid_maid = True\n",
    "\n",
    "    if maid_df.empty: logging.warning(\"No Maid transactions found!\")\n",
    "    else:\n",
    "        if not (maid_df['amount'] == 2500).all(): logging.error(f\"Maid amount incorrect!\"); valid_maid = False\n",
    "        if not ((maid_df['user'] == 'Puspita') & (maid_df['account'] == 'Puspita-SBI')).all(): logging.error(\"Maid payer incorrect!\"); valid_maid = False\n",
    "        maid_counts = maid_df.groupby('month').size()\n",
    "        if (maid_counts != 1).any(): logging.error(f\"Maid frequency incorrect (!=1 per month)!\"); valid_maid = False\n",
    "        if valid_maid: logging.info(\"Maid Salary transactions appear correct.\")\n",
    "else:\n",
    "    print(\"Skipping Maid Salary validation.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4cedf86b",
   "metadata": {},
   "source": [
    "## 10. Ad-hoc Amount Distribution: Key Categories (Box Plot)\n",
    "\n",
    "Visualize amount distributions for major variable spending areas."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "68829a91",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Ad-hoc Amount Distributions (Box Plots) ---\n"
     ]
    },
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "alignmentgroup": "True",
         "boxpoints": "outliers",
         "hovertemplate": "Category=%{x}<br>Amount (INR)=%{y}<extra></extra>",
         "legendgroup": "",
         "marker": {
          "color": "#636efa"
         },
         "name": "",
         "notched": false,
         "offsetgroup": "",
         "orientation": "v",
         "showlegend": false,
         "type": "box",
         "x": [
          "Grocery",
          "Grocery",
          "Restaurant",
          "Travel",
          "Grocery",
          "Travel",
          "Household",
          "Grocery",
          "Grocery",
          "Grocery",
          "Household",
          "Shopping",
          "Shopping",
          "Travel",
          "Travel",
          "Shopping",
          "Household",
          "Travel",
          "Grocery",
          "Restaurant",
          "Travel",
          "Grocery",
          "Shopping",
          "Grocery",
          "Restaurant",
          "Entertainment",
          "Shopping",
          "Household",
          "Restaurant",
          "Household",
          "Grocery",
          "Restaurant",
          "Restaurant",
          "Grocery",
          "Household",
          "Health",
          "Entertainment",
          "Shopping",
          "Travel",
          "Restaurant",
          "Entertainment",
          "Travel",
          "Household",
          "Grocery",
          "Health",
          "Travel",
          "Restaurant",
          "Grocery",
          "Entertainment",
          "Grocery",
          "Travel",
          "Entertainment",
          "Travel",
          "Health",
          "Restaurant",
          "Grocery",
          "Household",
          "Household",
          "Health",
          "Travel",
          "Shopping",
          "Travel",
          "Grocery",
          "Grocery",
          "Shopping",
          "Travel",
          "Travel",
          "Travel",
          "Household",
          "Travel",
          "Household",
          "Shopping",
          "Grocery",
          "Grocery",
          "Health",
          "Shopping",
          "Household",
          "Travel",
          "Grocery",
          "Household",
          "Shopping",
          "Restaurant",
          "Shopping",
          "Grocery",
          "Restaurant",
          "Grocery",
          "Health",
          "Household",
          "Travel",
          "Health",
          "Shopping",
          "Grocery",
          "Shopping",
          "Household",
          "Shopping",
          "Shopping",
          "Shopping",
          "Travel",
          "Health",
          "Household",
          "Shopping",
          "Travel",
          "Entertainment",
          "Household",
          "Shopping",
          "Health",
          "Travel",
          "Restaurant",
          "Household",
          "Health",
          "Household",
          "Travel",
          "Restaurant",
          "Travel",
          "Travel",
          "Restaurant",
          "Grocery",
          "Travel",
          "Travel",
          "Household",
          "Household",
          "Travel",
          "Shopping",
          "Travel",
          "Entertainment",
          "Household",
          "Travel",
          "Restaurant",
          "Restaurant",
          "Travel",
          "Shopping",
          "Shopping",
          "Household",
          "Shopping",
          "Shopping",
          "Household",
          "Household",
          "Grocery",
          "Travel",
          "Grocery",
          "Household",
          "Travel",
          "Health",
          "Grocery",
          "Shopping",
          "Household",
          "Household",
          "Entertainment",
          "Travel",
          "Travel",
          "Health",
          "Entertainment",
          "Household",
          "Travel",
          "Travel",
          "Travel",
          "Grocery",
          "Household",
          "Grocery",
          "Health",
          "Health",
          "Travel",
          "Travel",
          "Travel",
          "Household",
          "Shopping",
          "Household",
          "Shopping",
          "Restaurant",
          "Household",
          "Health",
          "Travel",
          "Travel",
          "Household",
          "Grocery",
          "Restaurant",
          "Travel",
          "Health",
          "Grocery",
          "Travel",
          "Household",
          "Household",
          "Travel",
          "Grocery",
          "Grocery",
          "Grocery",
          "Entertainment",
          "Shopping",
          "Travel",
          "Household",
          "Travel",
          "Health",
          "Shopping",
          "Shopping",
          "Shopping",
          "Travel",
          "Household",
          "Restaurant",
          "Restaurant",
          "Travel",
          "Grocery",
          "Restaurant",
          "Travel",
          "Household",
          "Shopping",
          "Restaurant",
          "Health",
          "Household",
          "Shopping",
          "Household",
          "Travel",
          "Restaurant",
          "Health",
          "Travel",
          "Household",
          "Travel",
          "Grocery",
          "Travel",
          "Travel",
          "Restaurant",
          "Restaurant",
          "Household",
          "Household",
          "Travel",
          "Shopping",
          "Travel",
          "Health",
          "Grocery",
          "Restaurant",
          "Travel",
          "Travel",
          "Restaurant",
          "Restaurant",
          "Restaurant",
          "Travel",
          "Grocery",
          "Restaurant",
          "Household",
          "Restaurant",
          "Travel",
          "Shopping",
          "Grocery",
          "Entertainment",
          "Household",
          "Grocery",
          "Shopping",
          "Shopping",
          "Shopping",
          "Household",
          "Household",
          "Shopping",
          "Shopping",
          "Travel",
          "Grocery",
          "Grocery",
          "Shopping",
          "Health",
          "Shopping",
          "Health",
          "Shopping",
          "Household",
          "Shopping",
          "Travel",
          "Restaurant",
          "Restaurant",
          "Travel",
          "Travel",
          "Travel",
          "Shopping",
          "Travel",
          "Household",
          "Household",
          "Travel",
          "Travel",
          "Grocery",
          "Shopping",
          "Shopping",
          "Health",
          "Household",
          "Entertainment",
          "Restaurant",
          "Household",
          "Restaurant",
          "Travel",
          "Travel",
          "Travel",
          "Grocery",
          "Household",
          "Grocery",
          "Household",
          "Grocery",
          "Travel",
          "Grocery",
          "Travel",
          "Travel",
          "Health",
          "Household",
          "Household",
          "Travel",
          "Restaurant",
          "Travel",
          "Travel",
          "Shopping",
          "Restaurant",
          "Shopping",
          "Health",
          "Travel",
          "Household",
          "Shopping",
          "Household",
          "Shopping",
          "Grocery",
          "Grocery",
          "Travel",
          "Shopping",
          "Travel",
          "Shopping",
          "Travel",
          "Household",
          "Grocery",
          "Travel",
          "Household",
          "Shopping",
          "Restaurant",
          "Restaurant",
          "Shopping",
          "Shopping",
          "Health",
          "Restaurant",
          "Shopping",
          "Shopping",
          "Household",
          "Travel",
          "Shopping",
          "Health",
          "Travel",
          "Household",
          "Restaurant",
          "Household",
          "Travel",
          "Travel",
          "Restaurant",
          "Household",
          "Travel",
          "Restaurant",
          "Shopping",
          "Health",
          "Travel",
          "Travel",
          "Travel",
          "Household",
          "Shopping",
          "Grocery",
          "Travel",
          "Travel",
          "Restaurant",
          "Household",
          "Grocery",
          "Shopping",
          "Travel",
          "Shopping",
          "Travel",
          "Grocery",
          "Shopping",
          "Entertainment",
          "Restaurant",
          "Travel",
          "Shopping",
          "Household",
          "Household",
          "Restaurant",
          "Entertainment",
          "Grocery",
          "Restaurant",
          "Travel",
          "Grocery",
          "Travel",
          "Grocery",
          "Grocery",
          "Grocery",
          "Health",
          "Shopping",
          "Household",
          "Travel",
          "Shopping",
          "Health",
          "Travel",
          "Entertainment",
          "Household",
          "Shopping",
          "Grocery",
          "Household",
          "Restaurant",
          "Shopping",
          "Shopping",
          "Restaurant",
          "Shopping",
          "Travel",
          "Grocery",
          "Household",
          "Entertainment",
          "Travel",
          "Household",
          "Health",
          "Travel",
          "Restaurant",
          "Shopping",
          "Health",
          "Shopping",
          "Shopping",
          "Travel",
          "Shopping",
          "Restaurant",
          "Entertainment",
          "Health",
          "Shopping",
          "Restaurant",
          "Entertainment",
          "Household",
          "Household",
          "Shopping",
          "Shopping",
          "Shopping",
          "Household",
          "Health",
          "Restaurant",
          "Household",
          "Travel",
          "Household",
          "Household",
          "Grocery",
          "Shopping",
          "Restaurant",
          "Household",
          "Travel",
          "Household",
          "Household",
          "Shopping",
          "Household",
          "Restaurant",
          "Household",
          "Shopping",
          "Shopping",
          "Household",
          "Household",
          "Travel",
          "Shopping",
          "Travel",
          "Restaurant",
          "Travel",
          "Travel",
          "Travel",
          "Shopping",
          "Travel",
          "Entertainment",
          "Shopping",
          "Shopping",
          "Household",
          "Grocery",
          "Shopping",
          "Entertainment",
          "Household",
          "Grocery",
          "Household",
          "Restaurant",
          "Shopping",
          "Grocery",
          "Health",
          "Grocery",
          "Entertainment",
          "Restaurant",
          "Health",
          "Grocery",
          "Restaurant",
          "Household",
          "Grocery",
          "Health",
          "Travel",
          "Shopping",
          "Health",
          "Travel",
          "Grocery",
          "Shopping",
          "Shopping",
          "Travel",
          "Household",
          "Health",
          "Travel",
          "Health",
          "Shopping",
          "Shopping",
          "Travel",
          "Household",
          "Household",
          "Health",
          "Restaurant",
          "Household",
          "Entertainment",
          "Travel",
          "Household",
          "Shopping",
          "Entertainment",
          "Travel",
          "Health",
          "Shopping",
          "Entertainment",
          "Entertainment",
          "Shopping",
          "Restaurant",
          "Household",
          "Health",
          "Entertainment",
          "Grocery",
          "Shopping",
          "Health",
          "Household",
          "Shopping",
          "Health",
          "Shopping",
          "Grocery",
          "Household",
          "Household",
          "Travel",
          "Household",
          "Travel",
          "Travel",
          "Entertainment",
          "Shopping",
          "Shopping",
          "Shopping",
          "Travel",
          "Travel",
          "Health",
          "Travel",
          "Grocery",
          "Grocery",
          "Travel",
          "Travel",
          "Entertainment",
          "Restaurant",
          "Shopping",
          "Shopping",
          "Travel",
          "Health",
          "Health",
          "Shopping",
          "Health",
          "Shopping",
          "Shopping",
          "Health",
          "Household",
          "Household",
          "Shopping",
          "Restaurant",
          "Entertainment",
          "Travel",
          "Grocery",
          "Shopping",
          "Travel",
          "Grocery",
          "Travel",
          "Travel",
          "Health",
          "Household",
          "Restaurant",
          "Shopping",
          "Restaurant",
          "Travel",
          "Household",
          "Health",
          "Shopping",
          "Grocery",
          "Household",
          "Household",
          "Household",
          "Travel",
          "Shopping",
          "Restaurant",
          "Travel",
          "Travel",
          "Travel",
          "Travel",
          "Travel",
          "Restaurant",
          "Household",
          "Household",
          "Household",
          "Household",
          "Travel",
          "Household",
          "Grocery",
          "Shopping",
          "Travel",
          "Grocery",
          "Household",
          "Restaurant",
          "Travel",
          "Travel",
          "Grocery",
          "Household",
          "Restaurant",
          "Grocery",
          "Shopping",
          "Travel",
          "Household",
          "Travel",
          "Restaurant",
          "Shopping",
          "Household",
          "Shopping",
          "Entertainment",
          "Travel",
          "Travel",
          "Restaurant",
          "Entertainment",
          "Restaurant",
          "Household",
          "Travel",
          "Restaurant",
          "Shopping",
          "Travel",
          "Restaurant",
          "Restaurant",
          "Shopping",
          "Travel",
          "Shopping",
          "Grocery",
          "Restaurant",
          "Household",
          "Travel",
          "Grocery",
          "Entertainment",
          "Shopping",
          "Entertainment",
          "Shopping",
          "Restaurant",
          "Grocery",
          "Restaurant",
          "Household",
          "Entertainment",
          "Grocery",
          "Restaurant",
          "Travel"
         ],
         "x0": " ",
         "xaxis": "x",
         "y": {
          "bdata": "uB6F61GwgEAzMzMzM9KmQM3MzMzMhopAuB6F61EElkApXI/C9VabQIXrUbge5VBAZmZmZmZUhEDsUbgehVGKQPYoXI9CCK9APQrXo3A3h0AzMzMzsy2hQFyPwvUotbJA7FG4HkUHsUApXI/C9QR6QKRwPQoXUbJApHA9ChddsUCamZmZmSuRQAAAAAAAMG5ASOF6FK53bEBxPQrXo+6OQB+F61G4EIRA4XoUrkdHlUDNzMzMjOqyQLgehevRMqVAXI/C9SgYekBI4XoULuenQK5H4XoUYaNAAAAAAAC/lECF61G4HsWIQMP1KFxPWLdA16NwPQpfckDNzMzMzN+aQHE9CtejOoFApHA9Ctc5i0ApXI/C9W2QQOxRuB6F44BAPQrXo3CDpECuR+F61G63QFyPwvWo9bBArkfhehTslkDhehSux5qmQB+F61G4cntA9ihcj8JcmUBcj8L1KNSEQClcj8L1DbFAuB6F61H0ckAzMzMzM9dyQNejcD0Kj45AH4XrUbhDk0DsUbgehWanQBSuR+H6DcZAhetRuJ7LrkCkcD0KV1auQBSuR+G6xbZAKVyPwvVwfEAUrkfheiilQArXo3C93qRAFK5H4XosZUB7FK5HYfa1QOxRuB6FlpdAPQrXo3B7g0A9Ctej8BSqQHE9CtejDaNAuB6F61G4lEAK16Nw/e+/QIXrUbgeTWNAZmZmZmZSeEBI4XoUrnytQFyPwvVoFLBAPQrXo3Abr0C4HoXrUZhhQOF6FK5HXK9A4XoUrkcKk0AUrkfhejyhQClcj8I14bFA9ihcj8JOlkDD9ShcD/GgQOxRuB7FhLhAMzMzMzPffECuR+F6FJaUQD0K16NwTJdACtejcD3EgkBSuB6Fy2LLQHE9CtejGH5AAAAAAAAce0B7FK5H4TJxQDMzMzOzYKZACtejcD0JlUC4HoXrkYDGQB+F61G4TJZAAAAAAOD6xUCF61G4nvKkQFyPwvUo5o1ArkfhetTMsEAAAAAAAH+XQOF6FK5H3KpAXI/C9QiQwUBcj8L1KMmSQDMzMzMzmaRAZmZmZmazmEBSuB6Fa8quQMP1KFyPSmVA4XoUrkclmEAzMzMzM39/QIXrUbhemMRAZmZmZmanlUApXI/C9XhjQNejcD0KV6FAPQrXo3DriEAK16Nw/cm7QM3MzMzM3aBAhetRuF7EvkBI4XoUrludQNejcD2K671ArkfhehRuT0DXo3A9Ch9oQArXo3A9ml1AmpmZmZn2k0CF61G4nlGyQGZmZmZm7IRASOF6FK4RnED2KFyPwhKVQLgehetRPLJAAAAAAIB7w0DXo3A9CgmMQPYoXI/Cka9AMzMzM7M0p0DsUbgehamhQJqZmZmZCVVAMzMzM3O2t0DXo3A9CmimQFyPwvXo58JAw/UoXI/qbUDhehSuRzVzQArXo3C9Da9A9ihcj4KRsEBI4XoUrtqZQNejcD0Kr2tAH4XrUfhVykCkcD0K1zmMQClcj8L1jI1AZmZmZnY72ECPwvUoPC7AQDMzMzMz239AzczMzMxBlEBxPQrXo6OSQI/C9ShcZ25Aw/UoXI/8p0CamZmZOYzBQClcj8IVkcNAcT0K16NQjkAfhetRuKKPQK5H4Xp0Z8BAPQrXo3A9TkDhehSuh5uwQKRwPQpX1a5ArkfhehSqhkBmZmZmZsZjQOxRuB6Fa5FAZmZmZiZIwEAzMzMzM6KRQK5H4XoUuqlAw/UoXI9MkUCF61G43jm1QHsUrkfh+lNAMzMzMxMNwkDhehSuR7WfQGZmZmbmjK9ApHA9ClfmpEDsUbgehTifQFK4HoVrXaRApHA9CtcvkkDXo3A9CqygQKRwPQrXFJRA16NwPQqHe0DNzMzMzKyTQBSuR+F6ypVAw/UoXI9KjUBmZmZm5lirQMP1KFyPUnlAzczMzAxzwUBcj8L1KIiDQArXo3A91q1AKVyPwvU5kkDsUbgeBVygQGZmZmZmuZ1AMzMzMzOKoEBI4XoULiC2QB+F61G4FMRAcT0K16NGk0DNzMzMzAKGQKRwPQrX/aVApHA9CteOrECPwvUoXCGKQMP1KFyPiptA4XoUrketjUC4HoXrUUeSQHE9CtejYGRAmpmZmZkZd0CPwvUoXFidQBSuR+F6/q5APQrXo3CHlUD2KFyPwtVgQD0K16NwWJBAKVyPwvUKrECkcD0K18OeQClcj8L1cIJAuB6F61HEcECuR+F6lLW9QDMzMzMzk31A7FG4HgV3o0A9CtejcC1nQMP1KFwP+rxAhetRuB4InkCamZmZmU16QGZmZmZm3mBAUrgehes4okDD9Shcj/OlQFyPwvXo/tFAmpmZmZkBfUD2KFyPwnadQOF6FK5HfXxASOF6FK6ti0B7FK5H4S2qQOxRuB7FGcBArkfhehSSeEAK16NwfT+5QKRwPQrXk3ZAH4XrUbjnoUBmZmZmZnCWQHsUrkfhwmxA7FG4HoXzYEB7FK5H4aJwQK5H4XoUSnxAj8L1KFzGpUCamZmZmTucQArXo3A9wIJAAAAAAAB+gUDD9Shcjw56QDMzMzNT8NBAAAAAAIDsskBcj8L1KIGlQOF6FK5HLYtAj8L1KFx9lkBxPQrXIxywQHsUrkdhTapAw/UoXI+KjkDD9ShcD9anQMP1KFwPo6hAmpmZmZlBpkCkcD0KF8GxQI/C9Sic/LBAzczMzEzBpkDhehSuRzl5QNejcD0KH6dAw/UoXA9vvkCuR+F6FB6NQFK4HoXrKpxArkfhehQ8j0DNzMzMDA27QHsUrkdhvqVAexSuRyFlw0A9CtejcHCqQHE9Ctej6HpA16NwPQrPm0BI4XoUrh9wQOxRuB5lRMhApHA9CtcNmUBI4XoUTuzGQFyPwvUoRG9AXI/C9ShfokAfhetROHaiQGZmZmZmQqJAcT0K16PNlUCamZmZmZKQQMP1KFyPkq1A4XoUrkdEpkApXI/C9Rm1QClcj8L10KBA4XoUrkchn0AK16NwvYCjQHsUrkfhyZlAPQrXo3ADj0AUrkfhekR9QBSuR+F6VHlAAAAAAGCMwkAfhetRuOZvQD0K16Nw94ZAj8L1KNx3pUBI4XoUrlKjQNejcD0KD3BApHA9ClcTpUBSuB6FazCjQBSuR+G6eshAXI/C9SgAq0Bcj8L1KLWRQEjhehSuUp1A4XoUrkcDkkCPwvUoXLGZQOxRuB6Fs3xAmpmZmZn5i0AK16NwvR3HQBSuR+F6FLBAcT0K16OllUAK16NwvdStQB+F61G4T5JAj8L1KJyssUD2KFyPQtypQHsUrkdh3a5AcT0K1yNCpkCF61G4HoChQJqZmZmZfJ9AhetRuB4ZkEAAAAAAAGKGQFK4HoXrqrhAexSuR+HibEDD9Shczxy6QLgehetxUsJA16NwPQqSoEBxPQrXo5iCQFK4HoXr8dVAZmZmZmagqEBmZmZm5p+vQClcj8L1TH9A9ihcj8LNZUCPwvUoXBeYQOxRuB4lesFAhetRuB5bwEAzMzMzM9CaQMP1KFyPW55AZmZmZmb6nkDD9Shcj85zQD0K16NwMZRAH4XrUbgItkBSuB6F61CmQFK4HoXrTZRAH4XrUbgSfUCuR+F6FAZuQB+F61E48qJA16NwPYrLvECkcD0K1+NxQClcj8L1K59AZmZmZmY8g0DsUbgeBRitQB+F61G43k9A4XoUrqdTxUCPwvUoXImVQEjhehQOMsVAexSuR+GlrUAzMzMzs3enQDMzMzMzNYlA16NwPQp5tEAK16NwPfKJQD0K16OwVLtAPQrXo3AJcEBSuB6F68+fQBSuR+F6DbpAmpmZmZn/lkC4HoXrUSKtQEjhehTujMBAhetRuB7OvEAAAAAAAGB6QGZmZmZm7nNAzczMzKyCxEAzMzMzszijQM3MzMzM9HpA16NwPYqx2UAUrkfh+t6pQAAAAAAAXpdAj8L1KFygkkApXI/C9cmbQB+F61G4K5JA4XoUrkcqokDhehSuR+mBQFyPwvW45dBAAAAAAACIk0DD9Shcj6OrQNejcD0KuYhAcT0K16MPo0CamZmZmXmhQMP1KFyPRoVAFK5H4fqKtkAK16NwvXemQDMzMzMz/6xApHA9CtdKwUDXo3A9CreIQAAAAAAAwHNAZmZmZmaimEDhehSuR860QArXo3A9DpJAUrgehesxdEDXo3A9Cr9xQKRwPQrX62JA9ihcj8I9qUCPwvUoXGWtQI/C9ShcqplAKVyPwvUPnECkcD0Kd5LWQFyPwvUolHhAzczMzMw4fkCamZmZmQmLQKRwPQrXVYdAzczMzOylwkAfhetRuDSOQDMzMzMz42pA9ihcj8Jhc0CPwvUoHKu6QLgehetReZpAzczMzEyvqUDNzMzMDGaxQK5H4XoUvmxAMzMzM7NJtkB7FK5H4QZ7QAAAAADAm7JA16NwPco2sUDD9Shcj5W2QClcj8L1GFhApHA9CtdRlEAfhetR+B3GQKRwPQrX55lAmpmZmRlptkDXo3A9CqWxQArXo3A9Wq1AFK5H4XrYlkAzMzMzEzrAQNejcD0K1ZZASOF6FK6AnUBI4XoUrgN1QEjhehSuypNAj8L1KFwvc0DsUbgeBWCjQEjhehSurJZAuB6F61FQeUCPwvUoXL9RQK5H4XoUO5lAzczMzMwojECamZmZmZmaQHE9Ctej2K1ASOF6FK6dkUBcj8L1KKRoQOxRuB6FlplAFK5H4XqDqUCkcD0KF1S4QM3MzMzMar9AKVyPwnV3ukCamZmZGZagQKRwPQrXQsRAmpmZmZlKlUAUrkfheiSDQClcj8JVw8RAuB6F61H4SkCkcD0K1yCkQHsUrkdh16VA7FG4HoVHlEDsUbgehbyeQArXo3D9zbVAFK5H4bpWv0CF61G4HkWBQHE9CtejsHxAH4XrUbhIskCF61G4HkV+QD0K16Nw7JpAj8L1KFxBgkCuR+F6FHmcQClcj8L1WGlAZmZmZoYKxUCkcD0K18uFQPYoXI/CA7JACtejcD3aZ0CPwvUoXHKYQBSuR+F69IlAexSuR2HEqkBxPQrXIxKkQOxRuB6FG15AcT0K16Mpk0CPwvUoXK2EQOF6FK5H2pNAPQrXo3DWn0AfhetROFPAQOxRuB6FCYNAH4XrUbgeS0BmZmZmZr5jQOF6FK5H34NA16NwPQp3fkAUrkfheqetQM3MzMzM5JFASOF6FK7HmkCamZmZmalYQAAAAAAAzZVAFK5H4Xp1n0DsUbgexTqwQMP1KFyP4qVAmpmZmZk9cUCamZmZGSWrQI/C9ShcH5JApHA9CtcxkkCPwvUoXHacQPYoXI/CTpdA7FG4HoVFjEA9CtejcICYQBSuR+G6WLxAAAAAAADgf0B7FK5HEbDXQI/C9SjceK9AAAAAAMCGskApXI/C9c6CQMP1KFyPcq1A4XoUrkc9tkBI4XoUrht+QEjhehSutJ5AcT0K1wO+wUBI4XoUrn+RQGZmZmZmvIJAKVyPwvUmjkCamZmZGVumQKRwPQrXS5RAUrgehetfsUBmZmZmZqmXQOxRuB4FpKBAUrgehetpg0CPwvUoXIiUQOF6FK5H0YBAuB6F61F4VkApXI/C9ax/QB+F61G4R75AFK5H4XrajkDhehSuR42WQNejcD1KCbdAuB6F65G5u0B7FK5H4beUQFyPwvUoNpJAj8L1KFwvWkAK16NwPU6BQArXo3A9EZ1AexSuR+HKa0AzMzMzMytqQBSuR+F6xHlAFK5H4Xp0aECPwvUo3BKiQIXrUbieKKtAH4XrUThEs0BSuB6F687FQOF6FK7H7aBAMzMzM5PJwECPwvUoXHyUQOF6FK7HcLNAmpmZmZkXqkCuR+F6FCSmQJqZmZmZCL5ApHA9Ctc7k0C4HoXrUbSqQGZmZmZm6JpAZmZmZuamokDD9Shcj/5xQI/C9ShcVqFASOF6FK6Nk0BI4XoUrn9xQPYoXI9C9r1Aj8L1KJxpvECkcD0K10+VQHsUrkfhULtAFK5H4Xr2iUAfhetR+MG+QKRwPQrXKJ9AZmZmZmbMiUBcj8L1KDahQB+F61G4vmNACtejcD2KTkBmZmZmZsCLQKRwPQrXB55AZmZmZuavqkBI4XoUrreTQK5H4XoU1pRApHA9CteEkkAUrkfhelGQQPYoXI/C5VBAH4XrUTjOqkCPwvUoXGmCQDMzMzOzdrpAzczMzExBpkBxPQrXoyy9QOxRuB6Fe3RAH4XrUbjcgkCPwvUoXBikQAAAAAAAMFpASOF6FK6nWEAfhetROA6gQHE9Ctcja69A4XoUrscfwEB7FK5H4aOWQClcj8L14GxAhetRuP4swUA9CtejcJmPQHsUrkfhw6tAMzMzMzNrmEBcj8L1KCxyQBSuR+F67p1AmpmZmZlLlEA9CtejcBV0QK5H4XoUBaJAFK5H4foEo0BSuB6F61lkQHE9CtejAKpA7FG4HoUBnECF61G4HheNQDMzMzMzy4ZAZmZmZmYieUCkcD0KVyauQFyPwvVo/sNAmpmZmZlXtEAfhetRuI6XQAAAAAAAIFNA16NwPQpjfECuR+F6FHiEQBSuR+F60ItA4XoUrkfBgUC4HoXr0f2uQKRwPQrXo41AXI/C9Si8dkBmZmZmJqm5QPYoXI/C/aNA4XoUrkdZqUAUrkfhegKAQD0K16PwK7ZACtejcD3ov0A9Ctej8MbCQOF6FK5HEWJApHA9CtdDWkB7FK5H4fJzQClcj8L16E9AzczMzMzsmkCuR+F6FJiPQClcj8L11KlAj8L1KFy4o0CuR+F6FF22QFyPwvUoRJlAAAAAAADDmkBmZmZmZvqHQGZmZmZm8I9Aw/UoXI+9okAAAAAAADRwQJqZmZmZE45AcT0K1yO4xkA=",
          "dtype": "f8"
         },
         "y0": " ",
         "yaxis": "y"
        }
       ],
       "layout": {
        "boxmode": "group",
        "height": 500,
        "legend": {
         "tracegroupgap": 0
        },
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "fillpattern": {
             "fillmode": "overlay",
             "size": 10,
             "solidity": 0.2
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermap": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermap"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "Amount Distribution by Major Variable Category (Log Scale, Excl. Maid/Large Furniture/Vacation)"
        },
        "xaxis": {
         "anchor": "y",
         "domain": [
          0,
          1
         ],
         "tickangle": -45,
         "title": {
          "text": "Category"
         }
        },
        "yaxis": {
         "anchor": "x",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "Amount (INR)"
         },
         "type": "log"
        }
       }
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO: Review box plot/stats: Do medians/ranges seem realistic for Bangalore daily/weekly expenses in these categories?\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "               count         mean          std     min        25%       50%  \\\n",
      "category                                                                      \n",
      "Entertainment   34.0  1858.921176  1037.274908  484.32  1039.2350  1554.955   \n",
      "Grocery         83.0  1317.318313  1086.638861  118.41   398.4200   903.230   \n",
      "Health          52.0  3298.279808  2711.537050  540.44  1153.2025  2264.335   \n",
      "Household      120.0  2051.820250  2157.755727   70.99   781.8050  1444.155   \n",
      "Restaurant      79.0   945.827595   831.638598   63.74   336.9350   573.160   \n",
      "Shopping       122.0  4939.460984  2925.484306  307.33  2913.7725  4402.180   \n",
      "Travel         153.0  4067.852810  5407.537065   53.94   439.1700  1878.090   \n",
      "\n",
      "                     75%       max  \n",
      "category                            \n",
      "Entertainment  2444.9575   4763.75  \n",
      "Grocery        2221.5200   4124.14  \n",
      "Health         4809.3100   9084.03  \n",
      "Household      2317.8000  11323.94  \n",
      "Restaurant     1542.0300   3476.31  \n",
      "Shopping       6655.8950  14021.59  \n",
      "Travel         4689.6200  26310.16  \n"
     ]
    }
   ],
   "source": [
    "if not df.empty and 'amount' in df.columns and 'category' in df.columns:\n",
    "    print(\"\\n--- Ad-hoc Amount Distributions (Box Plots) ---\")\n",
    "    major_variable_cats = ['Grocery', 'Restaurant', 'Shopping', 'Travel', 'Household', 'Health', 'Entertainment']\n",
    "    plot_df = df[df['category'].isin(major_variable_cats)].copy() # Make a copy\n",
    "    # Exclude known large fixed costs from Household/Travel for better visualization of variable costs\n",
    "    plot_df = plot_df[~((plot_df['category'] == 'Household') & (plot_df['sub_category'] == 'Maid'))]\n",
    "    # Exclude potential large vacation sums if they skew too much\n",
    "    # plot_df = plot_df[~((plot_df['category'] == 'Travel') & (plot_df['sub_category'] == 'Vacation') & (plot_df['amount'] > 15000))] \n",
    "    # Exclude large furniture costs\n",
    "    plot_df = plot_df[~((plot_df['category'] == 'Household') & (plot_df['sub_category'] == 'Furniture') & (plot_df['amount'] > 10000))]\n",
    "\n",
    "    if not plot_df.empty:\n",
    "        fig_box_cat = px.box(plot_df, x='category', y='amount', points=\"outliers\",\n",
    "                             title='Amount Distribution by Major Variable Category (Log Scale, Excl. Maid/Large Furniture/Vacation)',\n",
    "                             labels={'category': 'Category', 'amount': 'Amount (INR)'},\n",
    "                             log_y=True, height=500)\n",
    "        fig_box_cat.update_layout(xaxis_tickangle=-45)\n",
    "        fig_box_cat.show() # Display inline\n",
    "        # try: fig_box_cat.write_image(IMG_DIR / \"category_amount_boxplot.png\") # Commented out\n",
    "        # except Exception as e: logging.error(f\"Failed to save category box plot: {e}\")\n",
    "\n",
    "        # Discrepancy Check:\n",
    "        print(plot_df.groupby('category')['amount'].describe())\n",
    "        logging.info(\"Review box plot/stats: Do medians/ranges seem realistic for Bangalore daily/weekly expenses in these categories?\")\n",
    "    else:\n",
    "        logging.info(\"No data for major variable categories found after filtering fixed/large items.\")\n",
    "else:\n",
    "    print(\"Skipping amount distribution analysis (missing columns).\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f9944b89",
   "metadata": {},
   "source": [
    "## 11. Ad-hoc Amount Distribution: Grocery Sub-Categories (Box Plot)\n",
    "\n",
    "Compare spending ranges for different grocery platforms/stores."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "0a574c09",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Grocery Sub-Category Amount Distributions ---\n"
     ]
    },
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "alignmentgroup": "True",
         "boxpoints": "outliers",
         "hovertemplate": "Store/Platform=%{x}<br>Amount (INR)=%{y}<extra></extra>",
         "legendgroup": "",
         "marker": {
          "color": "#636efa"
         },
         "name": "",
         "notched": false,
         "offsetgroup": "",
         "orientation": "v",
         "showlegend": false,
         "type": "box",
         "x": [
          "Flipkart Grocery",
          "Local Store",
          "Amazon",
          "BigBasket",
          "Zepto",
          "Local Store",
          "Flipkart Grocery",
          "Flipkart Grocery",
          "Local Store",
          "Amazon",
          "BigBasket",
          "Amazon",
          "BigBasket",
          "Zepto",
          "Amazon",
          "Flipkart Grocery",
          "Local Store",
          "Flipkart Grocery",
          "Amazon",
          "Local Store",
          "Zepto",
          "Amazon",
          "Zepto",
          "Amazon",
          "Amazon",
          "Amazon",
          "Flipkart Grocery",
          "Zepto",
          "BigBasket",
          "Flipkart Grocery",
          "BigBasket",
          "Local Store",
          "BigBasket",
          "Zepto",
          "Zepto",
          "Flipkart Grocery",
          "Local Store",
          "BigBasket",
          "BigBasket",
          "Local Store",
          "Amazon",
          "Local Store",
          "Flipkart Grocery",
          "Zepto",
          "Flipkart Grocery",
          "Flipkart Grocery",
          "Amazon",
          "BigBasket",
          "Local Store",
          "Zepto",
          "BigBasket",
          "Zepto",
          "Zepto",
          "Amazon",
          "Zepto",
          "Zepto",
          "Local Store",
          "Zepto",
          "Zepto",
          "Zepto",
          "BigBasket",
          "Zepto",
          "Local Store",
          "Amazon",
          "Amazon"
         ],
         "x0": " ",
         "xaxis": "x",
         "y": {
          "bdata": "MzMzMzPSpkApXI/C9VabQPYoXI9CCK9APQrXo3A3h0BI4XoUrndsQOF6FK5HR5VAuB6F69EypUBcj8L1KNSEQNejcD0Kj45A7FG4HoVmp0AUrkfheiilQHE9CtejDaNAuB6F61G4lEDhehSuRwqTQBSuR+F6PKFAMzMzMzPffEBxPQrXoxh+QIXrUbie8qRApHA9Ctc5jECuR+F6FKqGQOxRuB6Fa5FAZmZmZuZYq0ApXI/C9TmSQOxRuB4FXKBAZmZmZma5nUAUrkfhev6uQFK4HoXrOKJApHA9CteTdkCamZmZmTucQFyPwvUogaVAcT0K1yMcsEDhehSuRzl5QNejcD0KH6dAmpmZmZmSkEAfhetRuOZvQI/C9Sjcd6VA16NwPQoPcEBSuB6FazCjQJqZmZmZfJ9AhetRuB4ZkEBxPQrXo5iCQArXo3A98olAmpmZmZn/lkBmZmZmZu5zQOF6FK5HKqJAAAAAAACIk0BxPQrXow+jQJqZmZmZeaFAUrgehesxdEBcj8L1KJR4QOxRuB4FYKNApHA9CtfLhUAK16NwPdpnQHE9CtcjEqRAj8L1KFythEBmZmZmZryCQFK4HoXraYNAexSuR+HKa0CkcD0K10+VQEjhehSut5NAexSuR+HDq0A9CtejcBV0QOF6FK5HEWJAzczMzMzsmkAAAAAAAMOaQA==",
          "dtype": "f8"
         },
         "y0": " ",
         "yaxis": "y"
        }
       ],
       "layout": {
        "boxmode": "group",
        "height": 500,
        "legend": {
         "tracegroupgap": 0
        },
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "fillpattern": {
             "fillmode": "overlay",
             "size": 10,
             "solidity": 0.2
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermap": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermap"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "Grocery Amount Distribution by Store/Platform (Log Scale)"
        },
        "xaxis": {
         "anchor": "y",
         "categoryarray": [
          "BigBasket",
          "Zepto",
          "Local Store",
          "Amazon",
          "Flipkart Grocery"
         ],
         "categoryorder": "array",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "Store/Platform"
         }
        },
        "yaxis": {
         "anchor": "x",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "Amount (INR)"
         },
         "type": "log"
        }
       }
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO: Check if distributions align with expectations (e.g., BigBasket/Amazon generally higher median/IQR than Zepto/Local Store).\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                  count         mean          std     min        25%      50%  \\\n",
      "sub_category                                                                    \n",
      "Amazon             14.0  2358.546429  1011.778104  595.08  1767.9875  2322.53   \n",
      "BigBasket          11.0  2400.901818   956.428750  742.93  1911.0250  2456.21   \n",
      "Flipkart Grocery   11.0  2029.481818   902.174004  461.95  1360.9500  2332.46   \n",
      "Local Store        12.0   742.185000   477.796766  144.54   383.4650   673.25   \n",
      "Zepto              17.0   672.707059   429.387667  190.82   318.9000   599.55   \n",
      "\n",
      "                        75%      max  \n",
      "sub_category                          \n",
      "Amazon            2888.7125  3972.13  \n",
      "BigBasket         2833.8800  4124.14  \n",
      "Flipkart Grocery  2730.6700  2921.10  \n",
      "Local Store        990.9800  1749.74  \n",
      "Zepto             1114.8800  1363.96  \n"
     ]
    }
   ],
   "source": [
    "if not df.empty and 'sub_category' in df.columns and 'category' in df.columns:\n",
    "    print(\"\\n--- Grocery Sub-Category Amount Distributions ---\")\n",
    "    grocery_subs = ['BigBasket', 'Zepto', 'Local Store', 'Amazon', 'Flipkart Grocery']\n",
    "    plot_df_grocery = df[(df['category'] == 'Grocery') & (df['sub_category'].isin(grocery_subs))]\n",
    "\n",
    "    if not plot_df_grocery.empty:\n",
    "        fig_box_grocery = px.box(plot_df_grocery, x='sub_category', y='amount', points=\"outliers\",\n",
    "                                 title='Grocery Amount Distribution by Store/Platform (Log Scale)',\n",
    "                                 labels={'sub_category': 'Store/Platform', 'amount': 'Amount (INR)'},\n",
    "                                 category_orders={\"sub_category\": grocery_subs}, # Control order\n",
    "                                 log_y=True, height=500)\n",
    "        fig_box_grocery.show() # Display inline\n",
    "        # try: fig_box_grocery.write_image(IMG_DIR / \"grocery_subcat_boxplot.png\") # Commented out\n",
    "        # except Exception as e: logging.error(f\"Failed to save grocery box plot: {e}\")\n",
    "\n",
    "        # Discrepancy Check\n",
    "        print(plot_df_grocery.groupby('sub_category')['amount'].describe())\n",
    "        logging.info(\"Check if distributions align with expectations (e.g., BigBasket/Amazon generally higher median/IQR than Zepto/Local Store).\")\n",
    "    else:\n",
    "        logging.info(\"No data found for specified Grocery sub-categories.\")\n",
    "else:\n",
    "    print(\"Skipping grocery sub-category analysis.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "57335010",
   "metadata": {},
   "source": [
    "## 12. Frequency Validation: Ad-hoc Monthly Counts\n",
    "\n",
    "Check adherence to `Max-times-per-month` for specific ad-hoc rules (Waste, Gifts, Entertainment)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "e2a56823",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Ad-hoc Monthly Frequency Validation (Waste/Gifts/Ent) ---\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Teertha's PC\\AppData\\Local\\Temp\\ipykernel_11796\\1882847337.py:28: FutureWarning:\n",
      "\n",
      "A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "\n",
      "INFO: Loaded and preprocessed 177 rules from E:\\Code\\Projects\\App-PersonalFinance\\app-personal-finance\\sample_data_generation.csv\n",
      "INFO: Ad-hoc frequency constraints (Max-times-per-month) for Waste/Gifts/Entertainment appear satisfied.\n"
     ]
    }
   ],
   "source": [
    "if not df.empty and 'month' in df.columns:\n",
    "    print(\"\\n--- Ad-hoc Monthly Frequency Validation (Waste/Gifts/Ent) ---\")\n",
    "    df_rules_loaded = load_rules(RULES_FILE) # Use the function defined earlier\n",
    "\n",
    "    if df_rules_loaded is not None:\n",
    "        # Define the rules we want to check explicitly based on the constraints given\n",
    "        rules_to_check_criteria = (\n",
    "            (df_rules_loaded['Expense-Frequency'] == 'ad-hoc') &\n",
    "            (\n",
    "                (df_rules_loaded['Category'] == 'Waste') |\n",
    "                (df_rules_loaded['Category'] == 'Gifts & Donations') |\n",
    "                (df_rules_loaded['Category'] == 'Entertainment')\n",
    "            )\n",
    "        )\n",
    "        rules_to_check_df = df_rules_loaded[rules_to_check_criteria].copy()\n",
    "\n",
    "        if not rules_to_check_df.empty:\n",
    "            # Create a unique key combining relevant fields from BOTH data and rules\n",
    "            # Use lowercase for robust matching if casing differs slightly\n",
    "            df['rule_match_key'] = df.apply(lambda r: f\"{r['category'].lower()}|{r['sub_category'].lower()}|{r['user'].lower()}|{r['account'].lower()}\", axis=1)\n",
    "            rules_to_check_df['rule_match_key'] = rules_to_check_df.apply(lambda r: f\"{r['Category'].lower()}|{r['Sub-category'].lower()}|{r['User'].lower()}|{r['Account'].lower()}\", axis=1)\n",
    "\n",
    "            # Group transactions by month and rule_key to count actual occurrences\n",
    "            monthly_actual_counts = df[df['rule_match_key'].isin(rules_to_check_df['rule_match_key'])].groupby(['month', 'rule_match_key']).size().reset_index(name='actual_count')\n",
    "\n",
    "            # Merge actual counts with the limits from the rules file\n",
    "            merged_counts = pd.merge(\n",
    "                monthly_actual_counts,\n",
    "                rules_to_check_df[['rule_match_key', 'Max-times-per-month']],\n",
    "                on='rule_match_key',\n",
    "                how='left' # Keep all actual counts, match rules where possible\n",
    "            )\n",
    "            # Drop rows where the rule couldn't be matched (shouldn't happen if keys are correct)\n",
    "            merged_counts.dropna(subset=['Max-times-per-month'], inplace=True)\n",
    "            merged_counts['Max-times-per-month'] = merged_counts['Max-times-per-month'].astype(int) # Ensure integer comparison\n",
    "\n",
    "            # Find violations\n",
    "            merged_counts['exceeded'] = merged_counts['actual_count'] > merged_counts['Max-times-per-month']\n",
    "            exceeded_df = merged_counts[merged_counts['exceeded']]\n",
    "\n",
    "            if not exceeded_df.empty:\n",
    "                logging.error(\"Max-times-per-month constraint VIOLATED for some ad-hoc rules!\")\n",
    "                print(\"Violations Found (Rule Key | Month | Actual Count | Max Allowed):\")\n",
    "                # Improve display for readability\n",
    "                exceeded_df_display = exceeded_df[['rule_match_key', 'month', 'actual_count', 'Max-times-per-month']].copy()\n",
    "                exceeded_df_display['Rule_Info'] = exceeded_df_display['rule_match_key'].str.replace('|', ' | ', regex=False)\n",
    "                print(exceeded_df_display[['Rule_Info', 'month', 'actual_count', 'Max-times-per-month']].to_string(index=False))\n",
    "            else:\n",
    "                logging.info(\"Ad-hoc frequency constraints (Max-times-per-month) for Waste/Gifts/Entertainment appear satisfied.\")\n",
    "\n",
    "            # Clean up added column from main df\n",
    "            if 'rule_match_key' in df.columns: df.drop(columns=['rule_match_key'], inplace=True, errors='ignore')\n",
    "        else:\n",
    "            logging.info(\"No specific Waste/Gifts/Entertainment ad-hoc rules found in the rules file for frequency validation.\")\n",
    "    else:\n",
    "        logging.warning(\"Could not load rules file, skipping ad-hoc frequency validation.\")\n",
    "else:\n",
    "    print(\"Skipping ad-hoc frequency validation.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 13. Account Usage Bias Check\n",
    "\n",
    "Verify Puspita-Bandhan use for Travel/Beauty and Anirban-ICICI dominance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Account Usage Validation ---\n"
     ]
    },
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "domain": {
          "x": [
           0,
           1
          ],
          "y": [
           0,
           1
          ]
         },
         "hole": 0.3,
         "hovertemplate": "<b>%{label}</b><br>Total: ₹%{value:,.0f}<br>(%{percent})<extra></extra>",
         "labels": [
          "Anirban-ICICI",
          "Anirban-SBI",
          "Puspita-Bandhan",
          "Puspita-SBI"
         ],
         "legendgroup": "",
         "name": "",
         "showlegend": true,
         "textinfo": "percent+label",
         "type": "pie",
         "values": {
          "bdata": "pHA9Ss15PEG4HoXrCpsjQetRuB6FtBFBSOF6FBZDL0E=",
          "dtype": "f8"
         }
        }
       ],
       "layout": {
        "legend": {
         "tracegroupgap": 0
        },
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "fillpattern": {
             "fillmode": "overlay",
             "size": 10,
             "solidity": 0.2
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermap": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermap"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "Overall Spending Proportion by Account"
        }
       }
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO: Puspita-Bandhan usage appears focused on Travel/Beauty.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Puspita-Bandhan Category Distribution (% of transactions):\n",
      "category\n",
      "Travel    58.1\n",
      "Beauty    41.9\n",
      "Name: proportion, dtype: float64\n"
     ]
    },
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "domain": {
          "x": [
           0,
           1
          ],
          "y": [
           0,
           1
          ]
         },
         "hole": 0.3,
         "hovertemplate": "category=%{label}<extra></extra>",
         "labels": [
          "Travel",
          "Beauty",
          "Beauty",
          "Travel",
          "Beauty",
          "Travel",
          "Travel",
          "Travel",
          "Beauty",
          "Beauty",
          "Travel",
          "Travel",
          "Travel",
          "Travel",
          "Travel",
          "Travel",
          "Travel",
          "Travel",
          "Travel",
          "Beauty",
          "Beauty",
          "Beauty",
          "Travel",
          "Travel",
          "Travel",
          "Beauty",
          "Travel",
          "Beauty",
          "Travel",
          "Beauty",
          "Beauty",
          "Travel",
          "Travel",
          "Beauty",
          "Travel",
          "Beauty",
          "Beauty",
          "Beauty",
          "Travel",
          "Travel",
          "Beauty",
          "Travel",
          "Beauty",
          "Beauty",
          "Travel",
          "Travel",
          "Beauty",
          "Travel",
          "Beauty",
          "Travel",
          "Beauty",
          "Travel",
          "Travel",
          "Beauty",
          "Beauty",
          "Travel",
          "Travel",
          "Beauty",
          "Beauty",
          "Travel",
          "Travel",
          "Travel"
         ],
         "legendgroup": "",
         "name": "",
         "showlegend": true,
         "textinfo": "percent+label",
         "type": "pie"
        }
       ],
       "layout": {
        "legend": {
         "tracegroupgap": 0
        },
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "fillpattern": {
             "fillmode": "overlay",
             "size": 10,
             "solidity": 0.2
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermap": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermap"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "Puspita-Bandhan Spending by Category"
        }
       }
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO: Anirban-ICICI appears dominant for Anirban's spending (>=60%).\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Anirban-ICICI accounts for 74.4% of Anirban's total spending amount.\n"
     ]
    }
   ],
   "source": [
    "if not df.empty and 'account' in df.columns and 'user' in df.columns and 'category' in df.columns:\n",
    "    print(\"\\n--- Account Usage Validation ---\")\n",
    "\n",
    "    # Overall Spend per Account (Pie Chart)\n",
    "    account_totals = df.groupby('account')['amount'].sum().reset_index()\n",
    "    fig_acc_pie = px.pie(account_totals, values='amount', names='account',\n",
    "                         title='Overall Spending Proportion by Account', hole=0.3)\n",
    "    fig_acc_pie.update_traces(textinfo='percent+label', hovertemplate=\"<b>%{label}</b><br>Total: ₹%{value:,.0f}<br>(%{percent})<extra></extra>\")\n",
    "    fig_acc_pie.show() # Display inline\n",
    "    # try: fig_acc_pie.write_image(IMG_DIR / \"account_spending_pie.png\") # Commented out\n",
    "    # except Exception as e: logging.error(f\"Failed to save account pie plot: {e}\")\n",
    "\n",
    "    # Puspita-Bandhan: Travel & Beauty focus?\n",
    "    puspita_bandhan_df = df[df['account'] == 'Puspita-Bandhan']\n",
    "    if not puspita_bandhan_df.empty:\n",
    "        pb_cat_dist = puspita_bandhan_df['category'].value_counts(normalize=True) * 100\n",
    "        print(\"\\nPuspita-Bandhan Category Distribution (% of transactions):\")\n",
    "        print(pb_cat_dist.round(1))\n",
    "        allowed_cats = ['Travel', 'Beauty']\n",
    "        other_cats_used = [cat for cat in pb_cat_dist.index if cat not in allowed_cats]\n",
    "        if other_cats_used:\n",
    "            logging.warning(f\"Puspita-Bandhan account used for categories other than Travel/Beauty: {other_cats_used}\")\n",
    "        else:\n",
    "             logging.info(\"Puspita-Bandhan usage appears focused on Travel/Beauty.\")\n",
    "        # Pie chart for Puspita-Bandhan\n",
    "        fig_pb_cat = px.pie(puspita_bandhan_df, names='category', title='Puspita-Bandhan Spending by Category', hole=0.3)\n",
    "        fig_pb_cat.update_traces(textinfo='percent+label')\n",
    "        fig_pb_cat.show() # Display inline\n",
    "        # try: fig_pb_cat.write_image(IMG_DIR / \"puspita_bandhan_category_pie.png\") # Commented out\n",
    "        # except Exception as e: logging.error(f\"Failed to save Puspita-Bandhan pie plot: {e}\")\n",
    "    else:\n",
    "        logging.info(\"No transactions found for Puspita-Bandhan.\")\n",
    "\n",
    "    # Anirban-ICICI Dominance Check\n",
    "    anirban_df = df[df['user'] == 'Anirban']\n",
    "    if not anirban_df.empty:\n",
    "         total_anirban_spend = anirban_df['amount'].sum()\n",
    "         if total_anirban_spend > 0:\n",
    "              icici_spend = anirban_df[anirban_df['account'] == 'Anirban-ICICI']['amount'].sum()\n",
    "              icici_share = (icici_spend / total_anirban_spend) * 100\n",
    "              print(f\"\\nAnirban-ICICI accounts for {icici_share:.1f}% of Anirban's total spending amount.\")\n",
    "              if icici_share < 60: # Arbitrary threshold\n",
    "                   logging.warning(\"Anirban-ICICI share of Anirban's spending seems lower than expected (<60%).\")\n",
    "              else:\n",
    "                   logging.info(\"Anirban-ICICI appears dominant for Anirban's spending (>=60%).\")\n",
    "         else:\n",
    "              logging.info(\"Anirban has zero total spending.\")\n",
    "    else:\n",
    "         logging.info(\"No transactions found for Anirban.\")\n",
    "else:\n",
    "    print(\"Skipping account usage validation (missing columns).\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 14. Temporal Pattern: Spending Over Month Day\n",
    "\n",
    "Check if Grocery/Shopping spending is concentrated early in the month."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Intra-Month Spending Pattern (Grocery/Shopping) ---\n"
     ]
    },
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "hovertemplate": "Day of Month=%{x}<br>Total Amount (INR)=%{y}<extra></extra>",
         "legendgroup": "",
         "marker": {
          "color": "#636efa",
          "pattern": {
           "shape": ""
          }
         },
         "name": "",
         "orientation": "v",
         "showlegend": false,
         "textposition": "auto",
         "type": "bar",
         "x": {
          "bdata": "AQAAAAIAAAADAAAABAAAAAUAAAAGAAAABwAAAAgAAAAJAAAACgAAAAsAAAAMAAAA",
          "dtype": "i4"
         },
         "xaxis": "x",
         "y": {
          "bdata": "7FG4HmWQ9EDNzMzMPDL5QD0K16Po3fFAZmZmZnSsAEGuR+F68LH5QD4K16NIS+dAXI/C9eA14EAK16NwBffrQClcj8LlCdJArkfheuSq20DiehSuZ1bHQArXo3D9i8hA",
          "dtype": "f8"
         },
         "yaxis": "y"
        }
       ],
       "layout": {
        "barmode": "relative",
        "height": 400,
        "legend": {
         "tracegroupgap": 0
        },
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "fillpattern": {
             "fillmode": "overlay",
             "size": 10,
             "solidity": 0.2
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermap": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermap"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "Total Grocery/Shopping Spend by Day of Month"
        },
        "xaxis": {
         "anchor": "y",
         "domain": [
          0,
          1
         ],
         "dtick": 1,
         "tickmode": "linear",
         "title": {
          "text": "Day of Month"
         }
        },
        "yaxis": {
         "anchor": "x",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "Total Amount (INR)"
         }
        }
       }
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO: Check bar chart: Is spending clearly higher in the first ~10 days?\n",
      "INFO: Spending concentration early in the month observed (First 10 days: ~₹687,435 vs Last 10 days: ~₹0).\n"
     ]
    }
   ],
   "source": [
    "if not df.empty and 'date_dt' in df.columns and 'category' in df.columns:\n",
    "    print(\"\\n--- Intra-Month Spending Pattern (Grocery/Shopping) ---\")\n",
    "    df['day_of_month'] = df['date_dt'].dt.day\n",
    "    # Filter for relevant categories AND non-fixed amounts (exclude large monthly rent etc. if miscategorized)\n",
    "    monthly_pattern_df = df[\n",
    "        df['category'].isin(['Grocery', 'Shopping']) & (df['amount'] < 20000) # Avoid huge one-offs like Furniture if in Shopping\n",
    "    ]\n",
    "\n",
    "    if not monthly_pattern_df.empty:\n",
    "        daily_total = monthly_pattern_df.groupby('day_of_month')['amount'].sum().reset_index() # Look at SUM not mean per day\n",
    "\n",
    "        fig_month_day = px.bar(daily_total, x='day_of_month', y='amount',\n",
    "                               title='Total Grocery/Shopping Spend by Day of Month',\n",
    "                               labels={'day_of_month': 'Day of Month', 'amount': 'Total Amount (INR)'},\n",
    "                               height=400)\n",
    "        fig_month_day.update_layout(xaxis=dict(tickmode='linear', dtick=1)) # Ensure all days are shown\n",
    "        fig_month_day.show() # Display inline\n",
    "        # try: fig_month_day.write_image(IMG_DIR / \"monthly_day_spend_pattern.png\") # Commented out\n",
    "        # except Exception as e: logging.error(f\"Failed to save monthly pattern plot: {e}\")\n",
    "\n",
    "        # Discrepancy Check (Visual Inspection + Quantitative)\n",
    "        logging.info(\"Check bar chart: Is spending clearly higher in the first ~10 days?\")\n",
    "        total_first_10 = daily_total[daily_total['day_of_month'] <= 10]['amount'].sum()\n",
    "        total_last_10 = daily_total[daily_total['day_of_month'] >= 22]['amount'].sum()\n",
    "        total_overall = daily_total['amount'].sum()\n",
    "\n",
    "        if total_overall > 0 and total_first_10 > total_last_10 * 1.3: # Check if first 10 days sum is >30% higher than last 10\n",
    "             logging.info(f\"Spending concentration early in the month observed (First 10 days: ~₹{total_first_10:,.0f} vs Last 10 days: ~₹{total_last_10:,.0f}).\")\n",
    "        elif total_overall > 0:\n",
    "             logging.warning(f\"Grocery/Shopping spending doesn't seem strongly concentrated early in the month (First 10: ~₹{total_first_10:,.0f} vs Last 10: ~₹{total_last_10:,.0f}).\")\n",
    "        else:\n",
    "            logging.info(\"Not enough spending data to assess intra-month pattern.\")\n",
    "\n",
    "    else:\n",
    "        logging.info(\"No relevant Grocery or Shopping data found for monthly pattern analysis.\")\n",
    "    # Clean up added column\n",
    "    if 'day_of_month' in df.columns: df.drop(columns=['day_of_month'], inplace=True)\n",
    "else:\n",
    "    print(\"Skipping intra-month pattern analysis.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 15. ML Suitability Check: Regression Potential (Flight Cost vs Month)\n",
    "\n",
    "Explore potential relationship for regression model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- ML Check: Regression Potential (Flight Cost vs Month) ---\n"
     ]
    },
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "hovertemplate": "Month (1-12)=%{x}<br>Flight Amount (INR)=%{y}<extra></extra>",
         "legendgroup": "",
         "marker": {
          "color": "#636efa",
          "symbol": "circle"
         },
         "mode": "markers",
         "name": "",
         "orientation": "v",
         "showlegend": false,
         "type": "scatter",
         "x": {
          "bdata": "AgAAAAMAAAADAAAABQAAAAUAAAAFAAAABwAAAAcAAAAIAAAACAAAAAsAAAAMAAAADAAAAAEAAAACAAAAAwAAAAMAAAAFAAAABgAAAAwAAAACAAAAAwAAAA==",
          "dtype": "i4"
         },
         "xaxis": "x",
         "y": {
          "bdata": "FK5H4foNxkBI4XoUrnytQLgeheuRgMZAhetRuF7EvkDXo3A9iuu9QDMzMzNztrdAKVyPwhWRw0CF61G43jm1QArXo3A91q1AH4XrUbgUxEDsUbgeZUTIQBSuR+G6eshAXI/C9SgAq0AK16NwvR3HQLgehetxUsJA16NwPYrLvEBI4XoUDjLFQFyPwvW45dBAMzMzMzP/rEAfhetRuEe+QHE9CtejLL1A4XoUrscfwEA=",
          "dtype": "f8"
         },
         "yaxis": "y"
        },
        {
         "hovertemplate": "<b>OLS trendline</b><br>amount = -103.772 * month_num + 9230.12<br>R<sup>2</sup>=0.010861<br><br>Month (1-12)=%{x}<br>Flight Amount (INR)=%{y} <b>(trend)</b><extra></extra>",
         "legendgroup": "",
         "marker": {
          "color": "#636efa",
          "symbol": "circle"
         },
         "mode": "lines",
         "name": "",
         "showlegend": false,
         "type": "scatter",
         "x": {
          "bdata": "AQAAAAIAAAACAAAAAgAAAAMAAAADAAAAAwAAAAMAAAADAAAABQAAAAUAAAAFAAAABQAAAAYAAAAHAAAABwAAAAgAAAAIAAAACwAAAAwAAAAMAAAADAAAAA==",
          "dtype": "i4"
         },
         "xaxis": "x",
         "y": {
          "bdata": "h+uCrSzTwUDbw6nbSZ/BQNvDqdtJn8FA28Op20mfwUAwnNAJZ2vBQDCc0Alna8FAMJzQCWdrwUAwnNAJZ2vBQDCc0Alna8FA2UweZqEDwUDZTB5moQPBQNlMHmahA8FA2UweZqEDwUAuJUWUvs/AQIP9a8Lbm8BAg/1rwtubwEDX1ZLw+GfAQNfVkvD4Z8BAqr0O9qCYv0BUblxS2zC/QFRuXFLbML9AVG5cUtswv0A=",
          "dtype": "f8"
         },
         "yaxis": "y"
        }
       ],
       "layout": {
        "height": 400,
        "legend": {
         "tracegroupgap": 0
        },
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "fillpattern": {
             "fillmode": "overlay",
             "size": 10,
             "solidity": 0.2
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermap": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermap"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "Flight Cost vs. Month of Booking"
        },
        "xaxis": {
         "anchor": "y",
         "domain": [
          0,
          1
         ],
         "tickmode": "array",
         "tickvals": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12
         ],
         "title": {
          "text": "Month (1-12)"
         }
        },
        "yaxis": {
         "anchor": "x",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "Flight Amount (INR)"
         }
        }
       }
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO: Check scatter plot: Is there a visible trend (even slight)? Are outliers plausible flight costs?\n"
     ]
    }
   ],
   "source": [
    "if not df.empty and 'date_dt' in df.columns and 'sub_category' in df.columns:\n",
    "    print(\"\\n--- ML Check: Regression Potential (Flight Cost vs Month) ---\")\n",
    "    flight_df = df[df['sub_category'] == 'Flight'].copy()\n",
    "\n",
    "    if not flight_df.empty:\n",
    "        flight_df['month_num'] = flight_df['date_dt'].dt.month\n",
    "        fig_scatter_flight = px.scatter(flight_df, x='month_num', y='amount',\n",
    "                                        title='Flight Cost vs. Month of Booking',\n",
    "                                        labels={'month_num': 'Month (1-12)', 'amount': 'Flight Amount (INR)'},\n",
    "                                        trendline='ols', # Ordinary Least Squares trendline\n",
    "                                        height=400)\n",
    "        fig_scatter_flight.update_layout(xaxis = dict(tickmode = 'array', tickvals = list(range(1,13)))) # Show all months 1-12\n",
    "        fig_scatter_flight.show() # Display inline\n",
    "        # try: fig_scatter_flight.write_image(IMG_DIR / \"flight_cost_vs_month_scatter.png\") # Commented out\n",
    "        # except Exception as e: logging.error(f\"Failed to save flight scatter plot: {e}\")\n",
    "\n",
    "        # Discrepancy Check (Visual Inspection)\n",
    "        logging.info(\"Check scatter plot: Is there a visible trend (even slight)? Are outliers plausible flight costs?\")\n",
    "    else:\n",
    "        logging.info(\"No flight data found for regression check.\")\n",
    "else:\n",
    "    print(\"Skipping regression potential check.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 16. ML Suitability Check: Classification Potential (Restaurant Spend Dist.)\n",
    "\n",
    "Look for potential thresholds to classify meals vs. snacks."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- ML Check: Classification Potential (Restaurant Spend Distribution) ---\n"
     ]
    },
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "bingroup": "x",
         "hovertemplate": "Amount (INR)=%{x}<br>count=%{y}<extra></extra>",
         "legendgroup": "",
         "marker": {
          "color": "#636efa",
          "pattern": {
           "shape": ""
          }
         },
         "name": "",
         "nbinsx": 50,
         "orientation": "v",
         "showlegend": false,
         "type": "histogram",
         "x": {
          "bdata": "zczMzMyGikBxPQrXo+6OQFyPwvUoGHpAhetRuB7FiEDNzMzMzN+aQHE9CtejOoFArkfhehTslkAzMzMzM9dyQClcj8L1cHxACtejcD3EgkAAAAAAABx7QNejcD0KV6FASOF6FK5bnUDXo3A9Ch9oQOxRuB6FqaFAmpmZmZkJVUCkcD0KV+akQM3MzMzMrJNAcT0K16NgZECamZmZmRl3QD0K16Nwh5VApHA9CtfDnkA9CtejcC1nQJqZmZmZAX1A9ihcj8J2nUAfhetRuOehQOxRuB6F82BAexSuR+GicECuR+F6FEp8QArXo3A9wIJAw/UoXI8OekBxPQrXo+h6QNejcD0Kz5tACtejcL2Ao0A9CtejcAOPQOxRuB6Fs3xAcT0K16OllUApXI/C9Ux/QPYoXI/CzWVAMzMzMzPQmkCuR+F6FAZuQClcj8L1K59AH4XrUbjeT0BSuB6F68+fQM3MzMzM9HpAKVyPwvXJm0DhehSuR+mBQKRwPQrX62JAj8L1KFyqmUD2KFyPwmFzQHsUrkfhBntAKVyPwvUYWEDXo3A9CtWWQLgehetRUHlAXI/C9SikaEAUrkfheiSDQClcj8L1WGlAFK5H4Xr0iUDsUbgehRteQKRwPQrXMZJASOF6FK4bfkCF61G4niirQMP1KFyP/nFAZmZmZmbMiUAfhetRuL5jQI/C9ShcaYJAj8L1KFwYpEBcj8L1KCxyQBSuR+H6BKNAZmZmZmYieUCuR+F6FHiEQOF6FK5HwYFAXI/C9Si8dkDhehSuR1mpQBSuR+F6AoBApHA9CtdDWkBcj8L1KESZQGZmZmZm+odAmpmZmZkTjkA=",
          "dtype": "f8"
         },
         "xaxis": "x",
         "yaxis": "y"
        }
       ],
       "layout": {
        "barmode": "relative",
        "height": 400,
        "legend": {
         "tracegroupgap": 0
        },
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "fillpattern": {
             "fillmode": "overlay",
             "size": 10,
             "solidity": 0.2
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermap": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermap"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "Distribution of Restaurant Transaction Amounts"
        },
        "xaxis": {
         "anchor": "y",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "Amount (INR)"
         }
        },
        "yaxis": {
         "anchor": "x",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "count"
         }
        }
       }
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO: Check histogram: Is there a clear separation or multiple peaks suggesting distinct groups (e.g., snacks vs meals)? Or is it one large peak skewed right?\n"
     ]
    }
   ],
   "source": [
    "if not df.empty and 'category' in df.columns and 'amount' in df.columns:\n",
    "    print(\"\\n--- ML Check: Classification Potential (Restaurant Spend Distribution) ---\")\n",
    "    resto_df = df[df['category'] == 'Restaurant']\n",
    "\n",
    "    if not resto_df.empty:\n",
    "        fig_hist_resto = px.histogram(resto_df, x='amount', nbins=50, # More bins might show detail\n",
    "                                     title='Distribution of Restaurant Transaction Amounts',\n",
    "                                     labels={'amount': 'Amount (INR)'}, height=400)\n",
    "        fig_hist_resto.show() # Display inline\n",
    "        # try: fig_hist_resto.write_image(IMG_DIR / \"restaurant_amount_histogram.png\") # Commented out\n",
    "        # except Exception as e: logging.error(f\"Failed to save restaurant histogram: {e}\")\n",
    "\n",
    "        # Discrepancy Check (Visual Inspection)\n",
    "        logging.info(\"Check histogram: Is there a clear separation or multiple peaks suggesting distinct groups (e.g., snacks vs meals)? Or is it one large peak skewed right?\")\n",
    "    else:\n",
    "        logging.info(\"No Restaurant data found for classification check.\")\n",
    "else:\n",
    "    print(\"Skipping classification potential check.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 17. ML Suitability Check: Segmentation Potential (Weekday vs Weekend)\n",
    "\n",
    "Compare spending profiles across predefined day type segments."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- ML Check: Segmentation Potential (Weekday vs Weekend Profiles) ---\n"
     ]
    },
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "alignmentgroup": "True",
         "hovertemplate": "day_type=Weekday<br>Category=%{x}<br>% of Segment Total Spend=%{y}<extra></extra>",
         "legendgroup": "Weekday",
         "marker": {
          "color": "#636efa",
          "pattern": {
           "shape": ""
          }
         },
         "name": "Weekday",
         "offsetgroup": "Weekday",
         "orientation": "v",
         "showlegend": true,
         "textposition": "auto",
         "type": "bar",
         "x": [
          "Beauty",
          "Connectivity",
          "Education",
          "Entertainment",
          "Gifts & Donations",
          "Grocery",
          "Health",
          "Household",
          "Insurance Premium",
          "Investment",
          "Rent",
          "Restaurant",
          "Shopping",
          "Travel",
          "Waste"
         ],
         "xaxis": "x",
         "y": {
          "bdata": "goQGR+vxEEAtumvUOvW7P4Iv4KHr+PU//WykTU1R+z9CwrZ5uPv5P2llXDgG1ARAynD1AcRCEkCsHyyt72UpQHiBOd/40CtAB1k7t0B8AUC4eZbZjMM0QJN54Aopmvw/LBiyWbaLMEAf8gAvvKEvQMwZBrzcPrM/",
          "dtype": "f8"
         },
         "yaxis": "y"
        },
        {
         "alignmentgroup": "True",
         "hovertemplate": "day_type=Weekend<br>Category=%{x}<br>% of Segment Total Spend=%{y}<extra></extra>",
         "legendgroup": "Weekend",
         "marker": {
          "color": "#EF553B",
          "pattern": {
           "shape": ""
          }
         },
         "name": "Weekend",
         "offsetgroup": "Weekend",
         "orientation": "v",
         "showlegend": true,
         "textposition": "auto",
         "type": "bar",
         "x": [
          "Beauty",
          "Connectivity",
          "Education",
          "Entertainment",
          "Gifts & Donations",
          "Grocery",
          "Health",
          "Household",
          "Insurance Premium",
          "Investment",
          "Rent",
          "Restaurant",
          "Shopping",
          "Travel",
          "Waste"
         ],
         "xaxis": "x",
         "y": {
          "bdata": "TW00Mo8rCkDIx10ruszBP175tRdjkfs/LIxVb5c++D8L0dcRip0BQENTOVdJGgxArSwV/rUjEUBxNmhN3oMyQAH2+5ifywxAZyGhXsTPAUD5lhIlLAw5QOoPCdiuCANAGDTRNwWJK0AW7jz5yHUxQGQQXa0rzdY/",
          "dtype": "f8"
         },
         "yaxis": "y"
        }
       ],
       "layout": {
        "barmode": "group",
        "height": 500,
        "legend": {
         "title": {
          "text": "Day Type"
         },
         "tracegroupgap": 0
        },
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "fillpattern": {
             "fillmode": "overlay",
             "size": 10,
             "solidity": 0.2
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermap": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermap"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "Category Spending %: Weekday vs. Weekend"
        },
        "xaxis": {
         "anchor": "y",
         "domain": [
          0,
          1
         ],
         "tickangle": -90,
         "title": {
          "text": "Category"
         }
        },
        "yaxis": {
         "anchor": "x",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "% of Segment Spending"
         }
        }
       }
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO: Check grouped bar chart: Are % allocations significantly different (e.g., higher Restaurant/Entertainment % on Weekends)?\n"
     ]
    }
   ],
   "source": [
    "if not df.empty and 'day_of_week' in df.columns and 'category' in df.columns:\n",
    "    print(\"\\n--- ML Check: Segmentation Potential (Weekday vs Weekend Profiles) ---\")\n",
    "    df['day_type'] = df['day_of_week'].apply(lambda x: 'Weekend' if x in ['Saturday', 'Sunday'] else 'Weekday')\n",
    "\n",
    "    # Compare category distribution using normalized values within each segment\n",
    "    segment_cat_dist = df.groupby(['day_type', 'category'])['amount'].sum().unstack(fill_value=0)\n",
    "    segment_cat_dist_perc = segment_cat_dist.apply(lambda x: x / x.sum() * 100, axis=1).stack().reset_index(name='percentage')\n",
    "\n",
    "    fig_segment_bar = px.bar(segment_cat_dist_perc, x='category', y='percentage', color='day_type',\n",
    "                             barmode='group',\n",
    "                             title='Category Spending %: Weekday vs. Weekend',\n",
    "                             labels={'category': 'Category', 'percentage': '% of Segment Total Spend'},\n",
    "                             height=500)\n",
    "    fig_segment_bar.update_layout(xaxis_tickangle=-90, yaxis_title='% of Segment Spending', legend_title=\"Day Type\")\n",
    "    fig_segment_bar.show() # Display inline\n",
    "    # try: fig_segment_bar.write_image(IMG_DIR / \"weekday_weekend_segment_compare.png\") # Commented out\n",
    "    # except Exception as e: logging.error(f\"Failed to save segmentation comparison plot: {e}\")\n",
    "\n",
    "\n",
    "    # Discrepancy Check (Visual Inspection)\n",
    "    logging.info(\"Check grouped bar chart: Are % allocations significantly different (e.g., higher Restaurant/Entertainment % on Weekends)?\")\n",
    "\n",
    "    # Clean up added column\n",
    "    if 'day_type' in df.columns: df.drop(columns=['day_type'], inplace=True)\n",
    "\n",
    "else:\n",
    "    print(\"Skipping segmentation potential check.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 18. ML Suitability Check: Clustering Potential (Daily Spend/Activity)\n",
    "\n",
    "Visualize daily aggregates to see if natural clusters appear."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- ML Check: Clustering Potential (Daily Spend vs. Activity) ---\n"
     ]
    },
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "customdata": [
          [
           "2023-01-01"
          ],
          [
           "2023-01-02"
          ],
          [
           "2023-01-03"
          ],
          [
           "2023-01-04"
          ],
          [
           "2023-01-05"
          ],
          [
           "2023-01-06"
          ],
          [
           "2023-01-07"
          ],
          [
           "2023-01-08"
          ],
          [
           "2023-01-09"
          ],
          [
           "2023-01-10"
          ],
          [
           "2023-01-11"
          ],
          [
           "2023-01-12"
          ],
          [
           "2023-01-15"
          ],
          [
           "2023-02-01"
          ],
          [
           "2023-02-02"
          ],
          [
           "2023-02-03"
          ],
          [
           "2023-02-04"
          ],
          [
           "2023-02-05"
          ],
          [
           "2023-02-06"
          ],
          [
           "2023-02-07"
          ],
          [
           "2023-02-08"
          ],
          [
           "2023-02-10"
          ],
          [
           "2023-02-15"
          ],
          [
           "2023-03-01"
          ],
          [
           "2023-03-02"
          ],
          [
           "2023-03-03"
          ],
          [
           "2023-03-04"
          ],
          [
           "2023-03-05"
          ],
          [
           "2023-03-06"
          ],
          [
           "2023-03-10"
          ],
          [
           "2023-03-15"
          ],
          [
           "2023-03-20"
          ],
          [
           "2023-04-01"
          ],
          [
           "2023-04-02"
          ],
          [
           "2023-04-03"
          ],
          [
           "2023-04-04"
          ],
          [
           "2023-04-05"
          ],
          [
           "2023-04-10"
          ],
          [
           "2023-04-15"
          ],
          [
           "2023-05-01"
          ],
          [
           "2023-05-02"
          ],
          [
           "2023-05-03"
          ],
          [
           "2023-05-04"
          ],
          [
           "2023-05-05"
          ],
          [
           "2023-05-06"
          ],
          [
           "2023-05-07"
          ],
          [
           "2023-05-10"
          ],
          [
           "2023-05-15"
          ],
          [
           "2023-06-01"
          ],
          [
           "2023-06-02"
          ],
          [
           "2023-06-03"
          ],
          [
           "2023-06-04"
          ],
          [
           "2023-06-05"
          ],
          [
           "2023-06-06"
          ],
          [
           "2023-06-10"
          ],
          [
           "2023-06-15"
          ],
          [
           "2023-07-01"
          ],
          [
           "2023-07-02"
          ],
          [
           "2023-07-03"
          ],
          [
           "2023-07-04"
          ],
          [
           "2023-07-05"
          ],
          [
           "2023-07-10"
          ],
          [
           "2023-07-15"
          ],
          [
           "2023-08-01"
          ],
          [
           "2023-08-02"
          ],
          [
           "2023-08-03"
          ],
          [
           "2023-08-04"
          ],
          [
           "2023-08-05"
          ],
          [
           "2023-08-06"
          ],
          [
           "2023-08-07"
          ],
          [
           "2023-08-08"
          ],
          [
           "2023-08-09"
          ],
          [
           "2023-08-10"
          ],
          [
           "2023-08-15"
          ],
          [
           "2023-09-01"
          ],
          [
           "2023-09-02"
          ],
          [
           "2023-09-03"
          ],
          [
           "2023-09-04"
          ],
          [
           "2023-09-05"
          ],
          [
           "2023-09-06"
          ],
          [
           "2023-09-07"
          ],
          [
           "2023-09-08"
          ],
          [
           "2023-09-09"
          ],
          [
           "2023-09-10"
          ],
          [
           "2023-09-11"
          ],
          [
           "2023-09-15"
          ],
          [
           "2023-09-20"
          ],
          [
           "2023-10-01"
          ],
          [
           "2023-10-02"
          ],
          [
           "2023-10-03"
          ],
          [
           "2023-10-04"
          ],
          [
           "2023-10-05"
          ],
          [
           "2023-10-06"
          ],
          [
           "2023-10-07"
          ],
          [
           "2023-10-08"
          ],
          [
           "2023-10-09"
          ],
          [
           "2023-10-10"
          ],
          [
           "2023-10-15"
          ],
          [
           "2023-11-01"
          ],
          [
           "2023-11-02"
          ],
          [
           "2023-11-03"
          ],
          [
           "2023-11-04"
          ],
          [
           "2023-11-05"
          ],
          [
           "2023-11-06"
          ],
          [
           "2023-11-07"
          ],
          [
           "2023-11-08"
          ],
          [
           "2023-11-09"
          ],
          [
           "2023-11-10"
          ],
          [
           "2023-11-15"
          ],
          [
           "2023-12-01"
          ],
          [
           "2023-12-02"
          ],
          [
           "2023-12-03"
          ],
          [
           "2023-12-04"
          ],
          [
           "2023-12-05"
          ],
          [
           "2023-12-06"
          ],
          [
           "2023-12-10"
          ],
          [
           "2023-12-15"
          ],
          [
           "2024-01-01"
          ],
          [
           "2024-01-02"
          ],
          [
           "2024-01-03"
          ],
          [
           "2024-01-04"
          ],
          [
           "2024-01-05"
          ],
          [
           "2024-01-06"
          ],
          [
           "2024-01-07"
          ],
          [
           "2024-01-08"
          ],
          [
           "2024-01-09"
          ],
          [
           "2024-01-10"
          ],
          [
           "2024-01-15"
          ],
          [
           "2024-02-01"
          ],
          [
           "2024-02-02"
          ],
          [
           "2024-02-03"
          ],
          [
           "2024-02-04"
          ],
          [
           "2024-02-05"
          ],
          [
           "2024-02-10"
          ],
          [
           "2024-02-15"
          ],
          [
           "2024-03-01"
          ],
          [
           "2024-03-02"
          ],
          [
           "2024-03-03"
          ],
          [
           "2024-03-04"
          ],
          [
           "2024-03-05"
          ],
          [
           "2024-03-06"
          ],
          [
           "2024-03-07"
          ],
          [
           "2024-03-08"
          ],
          [
           "2024-03-10"
          ],
          [
           "2024-03-15"
          ],
          [
           "2024-03-20"
          ],
          [
           "2024-04-01"
          ],
          [
           "2024-04-02"
          ],
          [
           "2024-04-03"
          ],
          [
           "2024-04-04"
          ],
          [
           "2024-04-05"
          ],
          [
           "2024-04-10"
          ],
          [
           "2024-04-15"
          ],
          [
           "2024-05-01"
          ],
          [
           "2024-05-02"
          ],
          [
           "2024-05-03"
          ],
          [
           "2024-05-04"
          ],
          [
           "2024-05-05"
          ],
          [
           "2024-05-10"
          ],
          [
           "2024-05-15"
          ],
          [
           "2024-06-01"
          ],
          [
           "2024-06-02"
          ],
          [
           "2024-06-03"
          ],
          [
           "2024-06-04"
          ],
          [
           "2024-06-05"
          ],
          [
           "2024-06-06"
          ],
          [
           "2024-06-07"
          ],
          [
           "2024-06-10"
          ],
          [
           "2024-06-15"
          ],
          [
           "2024-07-01"
          ],
          [
           "2024-07-02"
          ],
          [
           "2024-07-03"
          ],
          [
           "2024-07-04"
          ],
          [
           "2024-07-05"
          ],
          [
           "2024-07-06"
          ],
          [
           "2024-07-10"
          ],
          [
           "2024-07-15"
          ],
          [
           "2024-08-01"
          ],
          [
           "2024-08-02"
          ],
          [
           "2024-08-03"
          ],
          [
           "2024-08-04"
          ],
          [
           "2024-08-05"
          ],
          [
           "2024-08-06"
          ],
          [
           "2024-08-07"
          ],
          [
           "2024-08-08"
          ],
          [
           "2024-08-09"
          ],
          [
           "2024-08-10"
          ],
          [
           "2024-08-15"
          ],
          [
           "2024-09-01"
          ],
          [
           "2024-09-02"
          ],
          [
           "2024-09-03"
          ],
          [
           "2024-09-04"
          ],
          [
           "2024-09-05"
          ],
          [
           "2024-09-06"
          ],
          [
           "2024-09-07"
          ],
          [
           "2024-09-08"
          ],
          [
           "2024-09-09"
          ],
          [
           "2024-09-10"
          ],
          [
           "2024-09-15"
          ],
          [
           "2024-09-20"
          ],
          [
           "2024-10-01"
          ],
          [
           "2024-10-02"
          ],
          [
           "2024-10-03"
          ],
          [
           "2024-10-04"
          ],
          [
           "2024-10-05"
          ],
          [
           "2024-10-06"
          ],
          [
           "2024-10-07"
          ],
          [
           "2024-10-08"
          ],
          [
           "2024-10-09"
          ],
          [
           "2024-10-10"
          ],
          [
           "2024-10-15"
          ],
          [
           "2024-11-01"
          ],
          [
           "2024-11-02"
          ],
          [
           "2024-11-03"
          ],
          [
           "2024-11-04"
          ],
          [
           "2024-11-05"
          ],
          [
           "2024-11-06"
          ],
          [
           "2024-11-07"
          ],
          [
           "2024-11-10"
          ],
          [
           "2024-11-15"
          ],
          [
           "2024-12-01"
          ],
          [
           "2024-12-02"
          ],
          [
           "2024-12-03"
          ],
          [
           "2024-12-04"
          ],
          [
           "2024-12-05"
          ],
          [
           "2024-12-06"
          ],
          [
           "2024-12-07"
          ],
          [
           "2024-12-08"
          ],
          [
           "2024-12-09"
          ],
          [
           "2024-12-10"
          ],
          [
           "2024-12-11"
          ],
          [
           "2024-12-15"
          ],
          [
           "2025-01-01"
          ],
          [
           "2025-01-02"
          ],
          [
           "2025-01-03"
          ],
          [
           "2025-01-04"
          ],
          [
           "2025-01-05"
          ],
          [
           "2025-01-06"
          ],
          [
           "2025-01-10"
          ],
          [
           "2025-01-15"
          ],
          [
           "2025-02-01"
          ],
          [
           "2025-02-02"
          ],
          [
           "2025-02-03"
          ],
          [
           "2025-02-04"
          ],
          [
           "2025-02-05"
          ],
          [
           "2025-02-06"
          ],
          [
           "2025-02-07"
          ],
          [
           "2025-02-08"
          ],
          [
           "2025-02-09"
          ],
          [
           "2025-02-10"
          ],
          [
           "2025-02-15"
          ],
          [
           "2025-03-01"
          ],
          [
           "2025-03-02"
          ],
          [
           "2025-03-03"
          ],
          [
           "2025-03-04"
          ],
          [
           "2025-03-05"
          ],
          [
           "2025-03-06"
          ],
          [
           "2025-03-07"
          ],
          [
           "2025-03-08"
          ],
          [
           "2025-03-09"
          ],
          [
           "2025-03-10"
          ],
          [
           "2025-03-11"
          ],
          [
           "2025-03-12"
          ],
          [
           "2025-03-15"
          ],
          [
           "2025-03-20"
          ],
          [
           "2025-04-01"
          ],
          [
           "2025-04-02"
          ],
          [
           "2025-04-03"
          ],
          [
           "2025-04-04"
          ],
          [
           "2025-04-05"
          ],
          [
           "2025-04-06"
          ],
          [
           "2025-04-10"
          ],
          [
           "2025-04-15"
          ]
         ],
         "hovertemplate": "Number of Transactions=%{x}<br>Total Amount Spent (INR)=%{y}<br>date=%{customdata[0]}<extra></extra>",
         "legendgroup": "",
         "marker": {
          "color": "#636efa",
          "symbol": "circle"
         },
         "mode": "markers",
         "name": "",
         "orientation": "v",
         "showlegend": false,
         "type": "scatter",
         "x": {
          "bdata": "BQQHBQUCAwQBAgUCAgUBBwMGBwUBAQEGBgUGBgMBAQEDBgcHAgEBBwcBBgUDBAEBBgUBBAUDAQEJBgQFAwEBCAYFBQQDBAEBAQEEBwYBBwMDAgMCAQEBBgIHAwUEBAUBAQEGBAEEBAYCAQEBAQkFBAIIBAEBBQEHBQQBAgEBAQIHBQYGAgEBBAQBAQcBBAcBAQEGBgQEBAEBBwQGAwcBAQMEBgcGAwMBAQkEBQQIAgEBBAECAQICBAICBwEDBAEEAwcCBwQBAQEFAgIGBgEFAQYDAQkFAwIFBgEBAQQCBAEDAwICBQgCAQQCBwUFBAECBQIGBwQBBAMFAgEJAwIBBAIDAwIDAwYBAQUFBwUGAQEB",
          "dtype": "i1"
         },
         "xaxis": "x",
         "y": {
          "bdata": "4XoUrn/44UBmZmZm5kmuQClcj8I16tBAXI/C9SjnxEDsUbgeJSrFQClcj8L11rNAcT0K16NFt0C4HoXrUWPAQM3MzMzM35pArkfhelTHsUAK16NwPS++QIXrUbg+MsRAAAAAAAAWpUAUrkfhMmrhQOF6FK7HmqZAzczMzIzzxUC4HoXrEVa0QIXrUbhuvNtAXI/C9Si30UCkcD0KN0vHQArXo3D9779AAAAAAABAr0AAAAAAAMCSQLgehevJ/ONAuB6F61GFz0AVrkfhOsLGQM3MzMxs6dBAAAAAABD70kCF61G4Hg7PQAAAAAAAQK9AAAAAAADAkkAAAAAAANvqQLgeheupLeFAZmZmZnbq00CZmZmZKWXbQHE9CtdzE9FASOF6FH4w1EAAAAAAAECvQAAAAAAAwJJAhetRuI7U6ED2KFyPIi3SQArXo3A9ml1A16NwPeoPyEBcj8L1SGzTQGZmZmZmF71APQrXo7AJxkAAAAAAAECvQAAAAAAAwJJA4XoUroev5UDXo3A96hrFQB+F61H4VcpA16NwPRpL20BwPQrXw+XLQBWuR+H6BMhAAAAAAABAr0AAAAAAAMCSQLgeheshg+pACtejcM3I2kBwPQrXgxTLQArXo3A9r9BAwvUoXM/4wkAAAAAAAECvQAAAAAAAwJJASOF6FPZ05EDXo3A9iojDQKRwPQqnG9dAXI/C9YitxUBcj8L1CF3TQHA9Ctdjd7ZA4noUrkfpsUCkcD0K1/2lQKRwPQrXjqxAAAAAAABAr0AAAAAAAMCSQLgehetZI+FAZmZmZiZlxkCuR+F61GDDQClcj8L1cIJAkML1KPyczUAfhetReBDDQD4K16MwnbRAwvUoXO9y0kApXI/CdTapQD4K16PwtrxA7FG4HsUZwEAAAAAAAMCSQAAAAAAA2+pApHA9CjeD5EBmZmZm5r2gQMP1KFyvuMBAuB6F69Gap0D2KFyP0rHbQNejcD3qI8NApHA9CleXw0AzMzMzEyjNQNejcD0KH6dAAAAAAABAr0AAAAAAAMCSQFK4HoWrh+ZAPgrXo3BOyUB7FK5HIWXDQAAAAACA3LZApHA9CjcX3EB7FK5HwVnDQIbrUbgeMKNAw/UoXI+SrUDhehSuR0SmQAAAAAAAQK9AAAAAAADAkkAK16NwNTzpQB6F61H4Zc1AmZmZmalF0EDsUbgeRWW0QClcj8JlItpAzczMzExStUAAAAAAAECvQAAAAAAAwJJAH4XrUVhV4UAK16NwvR3HQNejcD3qqs5AH4XrUTjEzkDiehSuZzzDQBSuR+G61dpAkML1KNzKp0AAAAAAAGKGQB+F61F4+LVAAAAAAABAr0AAAAAAABalQFyPwvVYOutAZmZmZnbB2UCPwvUofM7GQMP1KFxvKtZAFK5H4fpxuUAAAAAAAECvQAAAAAAAwJJAj8L1KOTf4kD2KFyPwsXAQFK4HoXrUKZAUrgehetNlECamZmZmQDQQPYoXI9izs9AuB6F65EkvkAAAAAAAJ3eQAAAAAAAQK9AAAAAAADAkkAAAAAAANvqQKRwPQr/g+NAXI/C9eDp4UD1KFyPQinLQLgehesBzNNAAAAAACDRy0AAAAAAAECvQAAAAAAAwJJAw/UoXDdA70C4HoXrkWG+QJmZmZn5idlA4noUrsciokBSuB6FO3bUQAAAAAAAQK9AAAAAAADAkkAzMzMzc67hQK5H4XqUiMZApHA9Chc2w0AfhetRaJ/hQGZmZmbGIdFANDMzMzNPl0DsUbgeJXrCQAAAAAAAQK9AAAAAAADAkkA9CtejULnnQIXrUbg+ZM1AkML1KOxe1UA+CtejMGzIQEjhehTu+dRAPgrXo/DFpUAAAAAAAECvQAAAAAAAwJJASOF6FIbG4EAK16NwPTypQNejcD0KV5pAzczMzMwojECPwvUoHEywQB+F61G4krVA9ihcj8L7sUAehetR+P+xQLgehetx38tAUrgehXP/5kAAAAAAAMCSQJqZmZkhU+BAcT0K1+Nw1kDNzMzMzHx6QEjhehTuQ7pAwvUoXI+axECF61G4bnXSQI/C9SjcPqFA7FG4HpVw0kCuR+F6NGPAQAAAAAAAQK9AAAAAAADAkkAAAAAAANvqQB+F61GQ2eBAUrgehasW1kCPwvUoXNipQClcj8KVH8RAMzMzM1PlxkAAAAAAAM2VQDQzMzNz4slAmpmZmRklq0BI4XoULi26QFK4HoVrDMlAAAAAAADAkkDhehSuz0/xQArXo3DNI9FAhetRuB6PukBmZmZmZraVQIXrUbj+Uc5AFK5H4bo/uEDhehSuR5evQAAAAAAAQK9AAAAAAADAkkDXo3A9ekzgQB6F61E48KdAKVyPwtWCyEDXo3A9Sgm3QOF6FK5HCsZAAAAAAIBIpEC4HoXrUXOTQM3MzMxMRaBA9ihcjwLPuUB7FK5HMXLiQKRwPQrXHbhAAAAAAADAkkC4HoXrcTnkQPYoXI9CFLRAhetRuL59z0DC9ShcjyLKQKRwPQp3Qc9AXI/C9bjg20AAAAAAAECvQAAAAAAAFqVAXI/C9YiL6kDsUbgehQemQHE9CtejRrlAZmZmZoZtwUD2KFyPgm/BQI/C9ShcaYJACtejcO0C0UAAAAAAwKC5QNijcD2KAr9AuB6F65FVv0AAAAAAAMCSQKRwPQqvAexAcT0K12P+u0ApXI/C9VCZQK5H4XoUBaJAwvUoXM9uwUDXo3A9ikalQJDC9ShchaVAKVyPwuXZ0kA+CtejcGKiQD0K16OwsrFAXI/C9SgumkB6FK5HgbvKQAAAAAAAwJJAAAAAAADb6kD2KFyP+vPiQIXrUbhuoddAPQrXo3C02EDXo3A9atzHQNejcD3qbMBAcT0K1yO4xkAAAAAAAECvQAAAAAAAwJJA",
          "dtype": "f8"
         },
         "yaxis": "y"
        }
       ],
       "layout": {
        "height": 500,
        "legend": {
         "tracegroupgap": 0
        },
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "fillpattern": {
             "fillmode": "overlay",
             "size": 10,
             "solidity": 0.2
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermap": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermap"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "Daily Spending vs. Number of Transactions"
        },
        "xaxis": {
         "anchor": "y",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "Number of Transactions"
         }
        },
        "yaxis": {
         "anchor": "x",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "Total Amount Spent (INR)"
         }
        }
       }
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO: Check scatter plot: Do distinct visual groups (clusters) appear based on density? (e.g., low-count/low-spend corner, high-spend outliers, high-activity band).\n"
     ]
    }
   ],
   "source": [
    "if not df.empty and 'date_dt' in df.columns:\n",
    "    print(\"\\n--- ML Check: Clustering Potential (Daily Spend vs. Activity) ---\")\n",
    "    # Aggregate total amount and count transactions per day\n",
    "    # Need a unique identifier per row if 'id' isn't reliably generated/present; using index as fallback.\n",
    "    if 'id' not in df.columns: df['id_temp'] = df.index # Temporary ID if needed\n",
    "    else: df['id_temp'] = df['id'] # Use existing id if present\n",
    "\n",
    "    daily_summary = df.groupby(df['date_dt'].dt.date).agg(\n",
    "        total_amount=('amount', 'sum'),\n",
    "        transaction_count=('id_temp', 'nunique') # Count unique transactions per day\n",
    "    ).reset_index().rename(columns={'date_dt': 'date'})\n",
    "\n",
    "\n",
    "    # Clean up temp id column\n",
    "    if 'id_temp' in df.columns: df.drop(columns=['id_temp'], inplace=True)\n",
    "\n",
    "    if not daily_summary.empty:\n",
    "        fig_scatter_cluster = px.scatter(daily_summary, x='transaction_count', y='total_amount',\n",
    "                                        title='Daily Spending vs. Number of Transactions',\n",
    "                                        labels={'transaction_count': 'Number of Transactions', 'total_amount': 'Total Amount Spent (INR)'},\n",
    "                                        hover_data=['date'],\n",
    "                                        height=500)\n",
    "        fig_scatter_cluster.show() # Display inline\n",
    "        # try: fig_scatter_cluster.write_image(IMG_DIR / \"daily_spend_activity_scatter.png\") # Commented out\n",
    "        # except Exception as e: logging.error(f\"Failed to save daily cluster scatter plot: {e}\")\n",
    "\n",
    "        # Discrepancy Check (Visual Inspection)\n",
    "        logging.info(\"Check scatter plot: Do distinct visual groups (clusters) appear based on density? (e.g., low-count/low-spend corner, high-spend outliers, high-activity band).\")\n",
    "    else:\n",
    "        logging.info(\"Could not generate daily summary for clustering check.\")\n",
    "else:\n",
    "    print(\"Skipping clustering potential check.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 19. Overall Summary & Conclusion\n",
    "\n",
    "Final assessment based on the EDA checks."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO: Review the logs and plots above for ERRORs or WARNINGs indicating discrepancies.\n",
      "INFO: Key areas checked: Data loading, date range/formats, nulls, row/amount constraints, User/Account mapping, Category/SubCat mapping, fixed expense accuracy, variable amount distributions, ad-hoc frequencies, account usage bias, temporal patterns, and basic visual checks for ML suitability.\n",
      "INFO: Address critical ERRORs (e.g., mapping inconsistencies, constraint violations) by refining data generation script/rules and regenerating.\n",
      "INFO: Consider if WARNINGs (e.g., slight constraint overshoot, weaker-than-expected patterns) are acceptable or require tuning.\n",
      "INFO: Overall assessment: [MANUALLY ADD ASSESSMENT HERE - e.g., 'Data generated successfully and largely adheres to rules. Minor warnings noted for monthly totals. Suitable for Phase 2 development.', OR 'Critical errors found in mappings and frequencies; regeneration required.']\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- EDA Summary ---\n"
     ]
    }
   ],
   "source": [
    "print(\"\\n--- EDA Summary ---\")\n",
    "logging.info(\"Review the logs and plots above for ERRORs or WARNINGs indicating discrepancies.\")\n",
    "logging.info(\"Key areas checked: Data loading, date range/formats, nulls, row/amount constraints, User/Account mapping, Category/SubCat mapping, fixed expense accuracy, variable amount distributions, ad-hoc frequencies, account usage bias, temporal patterns, and basic visual checks for ML suitability.\")\n",
    "logging.info(\"Address critical ERRORs (e.g., mapping inconsistencies, constraint violations) by refining data generation script/rules and regenerating.\")\n",
    "logging.info(\"Consider if WARNINGs (e.g., slight constraint overshoot, weaker-than-expected patterns) are acceptable or require tuning.\")\n",
    "logging.info(\"Overall assessment: [MANUALLY ADD ASSESSMENT HERE - e.g., 'Data generated successfully and largely adheres to rules. Minor warnings noted for monthly totals. Suitable for Phase 2 development.', OR 'Critical errors found in mappings and frequencies; regeneration required.']\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "genai",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

"""

File: generate_code_details.py
Location: reference\generate_code_details.py
Summary: The script `generate_code_details.py` summarizes files in the 'app-personal-finance' project using GPT-4o, writing results to 'reference/instruction_code_details.txt'. It processes `.py` files fully, `.csv` files' top 5 rows, and the first 1000 characters of other files, excluding certain directories and file types.
Code: """
#!/usr/bin/env python3
"""
generate_code_details.py

Summarizes each relevant file in the 'app-personal-finance' project using GPT-4o and writes the result to
'reference/instruction_code_details.txt' in a structured format.

Handles:
- .py files → full code
- .csv files → top 5 rows
- Other files → first 1000 characters
- Skips .env, .log, .db, __pycache__, .git, etc.

Requirements:
- Python 3.8+
- openai>=1.0.0
- python-dotenv
- tqdm
- tenacity
- tiktoken
- pandas
"""

import os
import logging
import time
from pathlib import Path
from dotenv import load_dotenv
from typing import List
import pandas as pd
from openai import OpenAI
from tenacity import retry, wait_random_exponential, stop_after_attempt
import tiktoken

# Load environment variables
load_dotenv()
api_key = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=api_key)

# Configure logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# Define paths
SCRIPT_DIR = Path(__file__).resolve().parent
ROOT_DIR = SCRIPT_DIR.parent
REFERENCE_DIR = ROOT_DIR / "reference"
OUTPUT_FILE = REFERENCE_DIR / "instruction_code_details.txt"

# Define exclusions
EXCLUDED_DIRS = {'.git', '__pycache__', '.vscode', '.idea', '.venv', 'venv', '.mypy_cache', '.pytest_cache'}
EXCLUDED_FILES = {'.env', '.log', '.gitignore'}
EXCLUDED_EXTENSIONS = {'.pyc', '.log', '.env', '.db'}

def get_all_relevant_files(directory: Path) -> List[Path]:
    files = []
    for root, dirs, filenames in os.walk(directory):
        dirs[:] = [d for d in dirs if d not in EXCLUDED_DIRS]
        for fname in filenames:
            fpath = Path(root) / fname
            if (
                fpath.suffix.lower() not in EXCLUDED_EXTENSIONS and
                fpath.name not in EXCLUDED_FILES
            ):
                files.append(fpath)
    return files

def read_file_content(file_path: Path) -> str:
    try:
        if file_path.suffix.lower() == '.csv':
            df = pd.read_csv(file_path)
            return df.head().to_string(index=False)
        with open(file_path, 'r', encoding='utf-8') as f:
            return f.read()
    except Exception as e:
        logger.error(f"Error reading file {file_path}: {e}")
        return "Unable to read file."

def count_tokens(text: str, model: str = "gpt-4o") -> int:
    encoding = tiktoken.encoding_for_model(model)
    return len(encoding.encode(text))

def truncate_for_summary(text: str, model: str = "gpt-4o", max_tokens: int = 8000) -> str:
    encoding = tiktoken.encoding_for_model(model)
    tokens = encoding.encode(text)
    return encoding.decode(tokens[:max_tokens])

@retry(wait=wait_random_exponential(min=1, max=60), stop=stop_after_attempt(6))
def summarize_content(content: str, model: str = "gpt-4o") -> str:
    try:
        if count_tokens(content, model) > 12000:
            content = truncate_for_summary(content, model)
        response = client.chat.completions.create(
            model=model,
            messages=[
                {"role": "system", "content": "You are an assistant that summarizes code files."},
                {"role": "user", "content": f"Summarize the following file in no more than 50 words:\n\n{content}"}
            ],
            temperature=0.3,
            max_tokens=100
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"OpenAI API error: {e}")
        return "Summary could not be generated due to an error."

def main() -> None:
    REFERENCE_DIR.mkdir(parents=True, exist_ok=True)
    files = get_all_relevant_files(ROOT_DIR)

    with open(OUTPUT_FILE, 'w', encoding='utf-8') as out:
        out.write("# instruction_code_details.txt\n")
        out.write("\"\"\"\nDescribes the functionality of each file in the ROOT project directory and its sub directories, their path relative to ROOT, and their code for .py files and relevant snippets for non .py files. Purpose is to set the context of the project.\n\"\"\"\n\n")

        for fpath in files:
            rel_path = fpath.relative_to(ROOT_DIR)
            ftype = fpath.suffix.lower()
            filename = fpath.name

            logger.info(f"Processing {rel_path}")

            code_content = read_file_content(fpath)
            summary_input = code_content if ftype == '.py' else code_content[:1000]
            summary = summarize_content(summary_input)

            out.write(f"File: {filename}\n")
            out.write(f"Location: {rel_path}\n")
            out.write(f"Summary: {summary}\n")
            out.write(f"Code: \"\"\"\n{code_content}\n\"\"\"\n\n")

        logger.info(f"✅ Summaries written to {OUTPUT_FILE}")

if __name__ == "__main__":
    main()

"""

File: generate_code_details_compressed.py
Location: reference\generate_code_details_compressed.py
Summary: This Python script compresses `instruction_code_details.txt` by removing redundant labels, truncating non-Python code to 300 characters, using compact Markdown-style headers, and reducing whitespace. It processes sections based on file, location, and summary headers, and writes the compressed content to an output file.
Code: """
#!/usr/bin/env python3
"""
Compresses instruction_code_details.txt into a more LLM-efficient format by:
1. Removing redundant labels (File/Location/Summary headers)
2. Truncating non-Python code to 300 characters
3. Using compact Markdown-style headers
4. Aggressive whitespace reduction
"""

import re
from pathlib import Path

def compress_file(input_path: Path, output_path: Path) -> None:
    current_block = []
    in_code_block = False
    file_ext = None
    
    with open(input_path, 'r', encoding='utf-8') as infile, \
         open(output_path, 'w', encoding='utf-8') as outfile:
        
        for line in infile:
            line = line.strip()
            
            # Detect section start
            if line.startswith("File: "):
                if current_block:
                    _write_compressed_block(current_block, file_ext, outfile)
                    current_block = []
                current_block.append(f"# {line[6:]}")
            
            elif line.startswith("Location: "):
                path = line[10:]
                file_ext = Path(path).suffix.lower()
                current_block.append(f"@path: {path}")
            
            elif line.startswith("Summary: "):
                current_block.append(f"@summary: {line[9:]}")
            
            elif line == 'Code: """':
                in_code_block = True
                code_lines = []
            
            elif line == '"""' and in_code_block:
                in_code_block = False
                code = '\n'.join(code_lines)
                
                # Apply truncation rules
                if file_ext == '.py':
                    truncated = code[:6000] + ('[...]' if len(code) > 6000 else '')
                else:
                    truncated = code[:300] + ('[...]' if len(code) > 300 else '')
                
                current_block.append(f"@code:\n{truncated}")
            
            elif in_code_block:
                code_lines.append(line)
        
        # Write final block
        if current_block:
            _write_compressed_block(current_block, file_ext, outfile)

def _write_compressed_block(block: list, ext: str, outfile):
    # Join with minimal delimiters
    compressed = '\n'.join(block)
    
    # Add type-specific markers
    if ext == '.py':
        compressed = compressed.replace("# ", "#PY ")
    else:
        compressed = compressed.replace("# ", "#FILE ")
    
    outfile.write(f"\n{compressed}\n")

if __name__ == "__main__":
    input_file = Path(__file__).parent.parent / "reference" / "instruction_code_details.txt"
    output_file = input_file.parent / "instruction_code_details_compressed.txt"
    
    compress_file(input_file, output_file)
    print(f"✅ Compressed file created: {output_file}")
"""

File: generate_data.py
Location: reference\generate_data.py
Summary: The script generates realistic expense data based on rules from 'sample_data_generation.csv' and outputs transactions to 'dummy_expenses_generated.csv' for dates between 2023-01-01 and 2025-04-20. It handles fixed and ad-hoc transactions, ensuring monthly constraints on totals and transaction counts, with detailed logging throughout the process.
Code: """
# reference/create_file_data.py
"""
Generates realistic expense data based on predefined rules and constraints.

Reads rules from 'sample_data_generation.csv' (in project root) and
outputs transactions to 'dummy_expenses_generated.csv' (in project root)
covering the period from 2023-01-01 to 2025-04-20.
"""

import pandas as pd
import numpy as np
import random
from datetime import datetime, timedelta
from pathlib import Path
import logging
from tqdm import tqdm # For progress bar
from typing import List, Dict, Any, Optional

# --- Configuration ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# --- File Paths (CRITICAL CHANGE) ---
# Get the directory where THIS script lives (reference/)
SCRIPT_DIR = Path(__file__).parent
# Get the parent directory (project root: app-personal-finance/)
PROJECT_ROOT = SCRIPT_DIR.parent

# Define paths relative to the PROJECT_ROOT
RULES_FILE = PROJECT_ROOT / "sample_data_generation.csv"
OUTPUT_FILE = PROJECT_ROOT / "dummy_expenses_generated.csv"
METADATA_FILE = PROJECT_ROOT / "expense_metadata.json" # Optional, for validation/reference

# Date Range
START_DATE = datetime(2023, 1, 1)
END_DATE = datetime(2025, 4, 20)

# Constraints
MONTHLY_MIN_TOTAL = 60000
MONTHLY_MAX_TOTAL = 120000
MONTHLY_MAX_ROWS = 100

# Ad-hoc Transaction Generation Parameters
AVG_ADHOC_PER_DAY = 4 # Average number of ad-hoc transactions per day
ADHOC_RANGE = (1, 7) # Min/Max ad-hoc transactions per day (adjust as needed)

# --- Helper Functions (No changes needed inside functions) ---

def load_rules(filepath: Path) -> Optional[pd.DataFrame]:
    """Loads and preprocesses the ruleset CSV."""
    if not filepath.exists():
        logging.error(f"Rules file not found: {filepath}")
        return None
    try:
        df_rules = pd.read_csv(filepath)
        df_rules.columns = [col.strip() for col in df_rules.columns]
        df_rules['Valid-expense-types'] = df_rules['Valid-expense-types'].str.split('|')
        for col in ['Min-expenses-amount', 'Max-expenses-amount', 'Max-times-per-month']:
            df_rules[col] = pd.to_numeric(df_rules[col], errors='coerce')
        df_rules['Max-times-per-month'].fillna(5, inplace=True)
        df_rules['Max-times-per-month'] = df_rules['Max-times-per-month'].astype(int)
        df_rules.dropna(subset=['Category', 'Sub-category', 'User', 'Account', 'Expense-Frequency', 'Min-expenses-amount', 'Max-expenses-amount'], inplace=True)
        logging.info(f"Loaded {len(df_rules)} rules from {filepath}")
        return df_rules
    except Exception as e:
        logging.error(f"Error loading or processing rules file {filepath}: {e}", exc_info=True)
        return None

def get_date_parts(date_obj: datetime) -> Dict[str, Any]:
    """Calculates derived date columns."""
    return {
        "date_dt": date_obj,
        "date": date_obj.strftime('%d-%m-%Y'),
        "year": date_obj.year,
        "month": date_obj.strftime('%Y-%m'),
        "week": date_obj.strftime('%Y-W%V'),
        "day_of_week": date_obj.strftime('%A')
    }

def generate_fixed_transaction(rule: pd.Series, date_info: Dict[str, Any]) -> Optional[Dict[str, Any]]:
    """Generates a dictionary for a fixed transaction based on a rule."""
    if rule['Min-expenses-amount'] != rule['Max-expenses-amount']:
        logging.warning(f"Rule marked as fixed frequency but Min!=Max: {rule.to_dict()}")
        return None
    amount = rule['Min-expenses-amount']
    valid_types = rule['Valid-expense-types']
    selected_type = valid_types[0] if isinstance(valid_types, list) and valid_types else "Fixed Expense"
    return {
        **date_info, "account": rule['Account'], "category": rule['Category'],
        "sub_category": rule['Sub-category'], "type": selected_type,
        "user": rule['User'], "amount": amount
    }

def generate_adhoc_transaction(rule: pd.Series, date_info: Dict[str, Any]) -> Dict[str, Any]:
    """Generates a dictionary for an ad-hoc transaction based on a rule."""
    amount = round(random.uniform(rule['Min-expenses-amount'], rule['Max-expenses-amount']), 2)
    selected_type = random.choice(rule['Valid-expense-types']) if isinstance(rule['Valid-expense-types'], list) and rule['Valid-expense-types'] else "Ad-hoc Expense"
    return {
        **date_info, "account": rule['Account'], "category": rule['Category'],
        "sub_category": rule['Sub-category'], "type": selected_type,
        "user": rule['User'], "amount": amount
    }

def check_fixed_conditions(rule: pd.Series, current_date: datetime) -> bool:
    """Checks if a fixed/recurring rule should trigger on the current date."""
    freq = rule['Expense-Frequency']
    day = current_date.day
    month = current_date.month

    if freq == 'monthly':
        if rule['Category'] == 'Rent' and day == 1: return True
        if rule['Category'] == 'Household' and rule['Sub-category'] == 'Maid' and day == 1: return True
        if rule['Category'] == 'Investment' and rule['Sub-category'] == 'SIP' and day == 5: return True
        if rule['Category'] == 'Insurance Premium' and rule['Sub-category'] == 'ULIP' and day == 10: return True
        if rule['Category'] == 'Insurance Premium' and rule['Sub-category'] == 'Health Insurance' and day == 15: return True
        if rule['Category'] == 'Connectivity' and rule['Sub-category'] == 'Netflix' and day == 20: return True # Example day for monthly connectivity
        if rule['Category'] == 'Utilities' and rule['Sub-category'] == 'Water' and day == 7: return True # Example day
        if rule['Category'] == 'Utilities' and rule['Sub-category'] == 'Maintenance' and day == 6: return True # Example day
        if rule['Category'] == 'Utilities' and rule['Sub-category'] == 'Garbage Collection' and day == 3: return True # Example day
        return False
    elif freq == 'bi-monthly': # Odd months, day 2
        return month % 2 != 0 and day == 2
    elif freq == 'once every 3 months': # Jan, Apr, Jul, Oct, day 3
        return month in [1, 4, 7, 10] and day == 3
    elif freq == 'once every 6 months': # Jan, Jul, day 4
        return month in [1, 7] and day == 4
    elif freq == 'bi-annually': # Mar 20, Sep 20
        return (month == 3 and day == 20) or (month == 9 and day == 20)
    elif freq == 'annually': # Jan 15
         # Handle specific annual items
        if rule['Category'] == 'Insurance Premium' and rule['Sub-category'] == 'Vehicle Insurance': return month == 2 and day == 25 # Example Date
        if rule['Category'] == 'Connectivity' and rule['Sub-category'] == 'Prime Video': return month == 1 and day == 15 # Example Date
        if rule['Category'] == 'Connectivity' and rule['Sub-category'] == 'Disney+ Hotstar': return month == 1 and day == 16 # Example Date
        return False # Only trigger specific annuals
    return False

# --- Main Generation Logic (No changes needed inside function) ---
def generate_data():
    """Main function to generate the expense data."""
    logging.info("--- Starting Data Generation ---")
    logging.info(f"Looking for rules file at: {RULES_FILE}")
    logging.info(f"Output will be saved to: {OUTPUT_FILE}")

    df_rules = load_rules(RULES_FILE)
    if df_rules is None:
        return

    fixed_rules = df_rules[df_rules['Expense-Frequency'] != 'ad-hoc'].copy()
    adhoc_rules = df_rules[df_rules['Expense-Frequency'] == 'ad-hoc'].copy()

    all_transactions = []
    current_date = START_DATE
    total_days = (END_DATE - START_DATE).days + 1
    pbar = tqdm(total=total_days, desc="Generating Daily Transactions")

    current_month_str = ""
    current_month_total = 0.0
    current_month_rows = 0
    monthly_rule_counts: Dict[int, int] = {}

    while current_date <= END_DATE:
        date_info = get_date_parts(current_date)

        if date_info['month'] != current_month_str:
            if current_month_str:
                logging.info(f"Month {current_month_str} Summary: Rows={current_month_rows}, Total=₹{current_month_total:.2f}")
                if current_month_total < MONTHLY_MIN_TOTAL: logging.warning(f"Month {current_month_str} total ₹{current_month_total:.2f} BELOW target minimum ₹{MONTHLY_MIN_TOTAL}")
                if current_month_total > MONTHLY_MAX_TOTAL: logging.warning(f"Month {current_month_str} total ₹{current_month_total:.2f} ABOVE target maximum ₹{MONTHLY_MAX_TOTAL}")
                if current_month_rows > MONTHLY_MAX_ROWS: logging.warning(f"Month {current_month_str} rows {current_month_rows} EXCEEDED target maximum {MONTHLY_MAX_ROWS}")
            current_month_str = date_info['month']
            current_month_total = 0.0; current_month_rows = 0; monthly_rule_counts = {}
            logging.debug(f"Starting generation for month: {current_month_str}")

        # 1. Generate Fixed Transactions
        for index, rule in fixed_rules.iterrows():
            if check_fixed_conditions(rule, current_date):
                transaction = generate_fixed_transaction(rule, date_info)
                if transaction and current_month_rows < MONTHLY_MAX_ROWS + 5:
                     all_transactions.append(transaction)
                     current_month_total += transaction['amount']
                     current_month_rows += 1
                     monthly_rule_counts[index] = monthly_rule_counts.get(index, 0) + 1
                     logging.debug(f"Generated fixed: {transaction['category']}/{transaction['sub_category']} on {date_info['date']}")
                elif transaction:
                     logging.warning(f"Skipped fixed {rule['Category']}/{rule['Sub-category']} on {date_info['date']} (Monthly row limit: {current_month_rows})")

        # 2. Generate Ad-hoc Transactions
        num_adhoc_today = random.randint(ADHOC_RANGE[0], ADHOC_RANGE[1])
        adhoc_added_today = 0
        weights = adhoc_rules['Account'].apply(lambda x: 1.5 if x in ['Anirban-ICICI', 'Puspita-SBI'] else 1.0).values
        if weights.sum() > 0: weights = weights / weights.sum()
        else: weights = None

        for _ in range(num_adhoc_today):
            if current_month_total >= MONTHLY_MAX_TOTAL or current_month_rows >= MONTHLY_MAX_ROWS:
                logging.debug(f"Stopping ad-hoc for {date_info['date']} due to limits.")
                break
            if weights is None or adhoc_rules.empty: continue

            rule_selected = False
            for attempt in range(5):
                 try:
                     selected_rule_series = adhoc_rules.sample(n=1, weights=weights).iloc[0]
                     rule_index = selected_rule_series.name
                 except ValueError as e: logging.warning(f"Adhoc sample error: {e}"); continue

                 current_rule_count = monthly_rule_counts.get(rule_index, 0)
                 max_allowed = selected_rule_series['Max-times-per-month']

                 if current_rule_count < max_allowed:
                     transaction = generate_adhoc_transaction(selected_rule_series, date_info)
                     # Further check if adding this exceeds monthly total *drastically*
                     if current_month_total + transaction['amount'] <= MONTHLY_MAX_TOTAL * 1.05: # Allow slight overshoot
                         all_transactions.append(transaction)
                         current_month_total += transaction['amount']
                         current_month_rows += 1
                         monthly_rule_counts[rule_index] = current_rule_count + 1
                         adhoc_added_today += 1
                         rule_selected = True
                         logging.debug(f"Generated adhoc: {transaction['category']}/{transaction['sub_category']} on {date_info['date']}")
                         break # Exit retry loop
                     else:
                         logging.debug(f"Skipping adhoc {selected_rule_series['Category']}/{selected_rule_series['Sub-category']} to avoid exceeding monthly total drastically.")
                         # Don't break, allow trying another rule maybe
                 else:
                     logging.debug(f"Rule {rule_index} hit monthly limit ({max_allowed}). Retrying...")

            if not rule_selected: logging.debug(f"Could not find valid ad-hoc rule for {date_info['date']} after retries.")

        current_date += timedelta(days=1)
        pbar.update(1)

    pbar.close()
    # Log summary for the very last month
    if current_month_str:
        logging.info(f"Month {current_month_str} Summary: Rows={current_month_rows}, Total=₹{current_month_total:.2f}")
        if current_month_total < MONTHLY_MIN_TOTAL: logging.warning(f"Month {current_month_str} total ₹{current_month_total:.2f} BELOW target minimum ₹{MONTHLY_MIN_TOTAL}")
        if current_month_total > MONTHLY_MAX_TOTAL: logging.warning(f"Month {current_month_str} total ₹{current_month_total:.2f} ABOVE target maximum ₹{MONTHLY_MAX_TOTAL}")
        if current_month_rows > MONTHLY_MAX_ROWS: logging.warning(f"Month {current_month_str} rows {current_month_rows} EXCEEDED target maximum {MONTHLY_MAX_ROWS}")


    if not all_transactions:
        logging.warning("No transactions were generated.")
        return

    df_final = pd.DataFrame(all_transactions)
    output_columns = ['date', 'year', 'month', 'week', 'day_of_week', 'account', 'category', 'sub_category', 'type', 'user', 'amount']
    df_final = df_final[output_columns]

    logging.info(f"--- Data Generation Complete ---")
    logging.info(f"Total transactions generated: {len(df_final)}")

    try:
        df_final.to_csv(OUTPUT_FILE, index=False, encoding='utf-8')
        logging.info(f"Successfully saved generated data to: {OUTPUT_FILE}")
    except Exception as e:
        logging.error(f"Error saving output CSV file {OUTPUT_FILE}: {e}", exc_info=True)

# --- Execution Guard ---
if __name__ == "__main__":
    generate_data()
"""

File: generate_summary.py
Location: reference\generate_summary.py
Summary: The script `generate_summary.py` is a documentation generator for the `app-personal-finance` project. It combines functionalities from three scripts to generate code summaries, compress code details, and create a folder tree. It uses OpenAI for summarization, handles file exclusions, and outputs results to a reference directory.
Code: """
#!/usr/bin/env python3
"""
generate_summary.py - Combined documentation generator for app-personal-finance
Combines functionality from:
- generate_code_details.py
- generate_code_details_compressed.py 
- generate_tree.py
"""

import os
import logging
from pathlib import Path
from dotenv import load_dotenv
from typing import List
import pandas as pd
from openai import OpenAI
from tenacity import retry, wait_random_exponential, stop_after_attempt
import tiktoken

# --- Configuration ---
load_dotenv()
SCRIPT_DIR = Path(__file__).resolve().parent
ROOT_DIR = SCRIPT_DIR.parent
REFERENCE_DIR = ROOT_DIR / "reference"

# File paths
CODE_DETAILS_PATH = REFERENCE_DIR / "instruction_code_details.txt"
COMPRESSED_PATH = REFERENCE_DIR / "instruction_code_details_compressed.txt"
TREE_PATH = REFERENCE_DIR / "instruction_file_tree.txt"

# Exclusion lists (combined from original scripts)
EXCLUDED_DIRS = {'.git', '__pycache__', '.vscode', '.idea', '.venv', 'venv', 
                '.mypy_cache', '.pytest_cache', '.git', '.vscode', '.idea', 'venv'}
EXCLUDED_FILES = {'.env', '.log', '.gitignore', '.env', '.gitignore'}
EXCLUDED_EXTENSIONS = {'.pyc', '.log', '.env', '.db'}

# OpenAI setup
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# --- Shared Functions from generate_code_details.py ---
def get_all_relevant_files(directory: Path) -> List[Path]:
    files = []
    for root, dirs, filenames in os.walk(directory):
        dirs[:] = [d for d in dirs if d not in EXCLUDED_DIRS]
        for fname in filenames:
            fpath = Path(root) / fname
            if (fpath.suffix.lower() not in EXCLUDED_EXTENSIONS and 
                fpath.name not in EXCLUDED_FILES):
                files.append(fpath)
    return files

def read_file_content(file_path: Path) -> str:
    try:
        if file_path.suffix.lower() == '.csv':
            df = pd.read_csv(file_path)
            return df.head().to_string(index=False)
        with open(file_path, 'r', encoding='utf-8') as f:
            return f.read()
    except Exception as e:
        logging.error(f"Error reading file {file_path}: {e}")
        return "Unable to read file."

@retry(wait=wait_random_exponential(min=1, max=60), stop=stop_after_attempt(6))
def summarize_content(content: str, model: str = "gpt-4o") -> str:
    try:
        encoding = tiktoken.encoding_for_model(model)
        tokens = encoding.encode(content)
        if len(tokens) > 12000:
            content = encoding.decode(tokens[:8000])
        response = client.chat.completions.create(
            model=model,
            messages=[{
                "role": "system",
                "content": "You are an assistant that summarizes code files."
            }, {
                "role": "user",
                "content": f"Summarize the following file in no more than 50 words:\n\n{content}"
            }],
            temperature=0.3,
            max_tokens=100
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logging.error(f"OpenAI API error: {e}")
        return "Summary could not be generated."

# --- Compression Logic from generate_code_details_compressed.py ---
def compress_code_details():
    current_block = []
    in_code_block = False
    file_ext = None
    
    with open(CODE_DETAILS_PATH, 'r', encoding='utf-8') as infile, \
         open(COMPRESSED_PATH, 'w', encoding='utf-8') as outfile:
        
        for line in infile:
            line = line.strip()
            
            if line.startswith("File: "):
                if current_block:
                    _write_compressed_block(current_block, file_ext, outfile)
                    current_block = []
                current_block.append(f"# {line[6:]}")
            
            elif line.startswith("Location: "):
                path = line[10:]
                file_ext = Path(path).suffix.lower()
                current_block.append(f"@path: {path}")
            
            elif line.startswith("Summary: "):
                current_block.append(f"@summary: {line[9:]}")
            
            elif line == 'Code: """':
                in_code_block = True
                code_lines = []
            
            elif line == '"""' and in_code_block:
                in_code_block = False
                code = '\n'.join(code_lines)
                truncated = code[:6000] + ('[...]' if len(code) > 6000 else '') \
                    if file_ext == '.py' else code[:300] + ('[...]' if len(code) > 300 else '')
                current_block.append(f"@code:\n{truncated}")
            
            elif in_code_block:
                code_lines.append(line)
        
        if current_block:
            _write_compressed_block(current_block, file_ext, outfile)

def _write_compressed_block(block: list, ext: str, outfile):
    compressed = '\n'.join(block)
    marker = "#PY " if ext == '.py' else "#FILE "
    outfile.write(f"\n{compressed.replace('# ', marker)}\n")

# --- Tree Generation from generate_tree.py ---
def generate_folder_tree():
    with open(TREE_PATH, 'w', encoding='utf-8') as f:
        for root, dirs, files in os.walk(ROOT_DIR, topdown=True):
            dirs[:] = [d for d in dirs if d not in EXCLUDED_DIRS]
            level = root.replace(str(ROOT_DIR), '').count(os.sep)
            indent = ' ' * 4 * level
            
            if root == str(ROOT_DIR):
                f.write(f'{ROOT_DIR.name}/\n')
            else:
                f.write(f'{indent}{os.path.basename(root)}/\n')
            
            subindent = ' ' * 4 * (level + 1)
            for file in files:
                if file not in EXCLUDED_FILES:
                    f.write(f'{subindent}{file}\n')

# --- Main Execution Flow ---
def main():
    REFERENCE_DIR.mkdir(parents=True, exist_ok=True)
    
    # Step 1: Generate code details
    with open(CODE_DETAILS_PATH, 'w', encoding='utf-8') as out:
        out.write("# instruction_code_details.txt\n\"\"\"\nDescribes the functionality of each file...\n\"\"\"\n\n")
        for fpath in get_all_relevant_files(ROOT_DIR):
            rel_path = fpath.relative_to(ROOT_DIR)
            content = read_file_content(fpath)
            summary = summarize_content(content if fpath.suffix == '.py' else content[:1000])
            out.write(f"File: {fpath.name}\nLocation: {rel_path}\nSummary: {summary}\nCode: \"\"\"\n{content}\n\"\"\"\n\n")
    
    # Step 2: Compress code details
    compress_code_details()
    
    # Step 3: Generate folder tree
    generate_folder_tree()
    
    print(f"✅ Summary files generated in {REFERENCE_DIR}")

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    main()
"""

File: generate_tree.py
Location: reference\generate_tree.py
Summary: The `generate_tree.py` script generates a text file representing the folder tree structure starting from a specified root directory. It allows excluding certain directories and saves the output to a specified file path. The script is configured to exclude common directories like `__pycache__` and `.git`.
Code: """
# reference/generate_tree.py
import os

def generate_folder_tree(start_path, output_path, exclude_dirs=None):
    """
    Generates a text file representing the folder tree structure.

    Args:
        start_path (str): The root directory from which to generate the tree.
        output_path (str): The full path (including filename) where the
                           tree structure text file will be saved.
        exclude_dirs (list, optional): A list of directory names to exclude
                                      from the tree. Defaults to None.
    """
    if exclude_dirs is None:
        exclude_dirs = []

    # Use 'utf-8' encoding for wider character support
    with open(output_path, 'w', encoding='utf-8') as f:
        # os.walk generates the file names in a directory tree
        for root, dirs, files in os.walk(start_path, topdown=True):
            # --- Exclusion Logic ---
            # Modify dirs in-place to prevent os.walk from descending into them
            dirs[:] = [d for d in dirs if d not in exclude_dirs]
            # -----------------------

            # Calculate the level of depth relative to start_path for indentation
            # Add 1 to handle the root level correctly if start_path itself is listed
            level = root.replace(start_path, '').count(os.sep)
            if root == start_path:
                 level = 0 # Ensure root is not indented

            indent = ' ' * 4 * (level)

            # Write the directory name relative to start_path
            # Handle the root directory name specifically
            if root == start_path:
                 f.write(f'{os.path.basename(start_path)}/\n')
            else:
                 f.write(f'{indent}{os.path.basename(root)}/\n')

            # Indent for files within the directory
            subindent = ' ' * 4 * (level + 1)
            # List files in the current directory
            for file in files:
                f.write(f'{subindent}{file}\n')

    print(f"Folder tree (excluding {exclude_dirs}) saved to: {output_path}")

if __name__ == "__main__":
    # Get the directory where the script itself is located (reference/)
    script_dir = os.path.dirname(os.path.abspath(__file__))

    # Get the parent directory of the script's location (project root)
    project_root_dir = os.path.dirname(script_dir)

    # Define the name for the output file
    output_filename = "instruction_file_tree.txt"

    # Construct the full path for the output file within the reference/ folder
    output_file_path = os.path.join(script_dir, output_filename)

    # Define directories to exclude
    folders_to_exclude = ["__pycache__", ".git", ".idea", ".vscode", "venv"]

    # Generate the tree starting from the project root directory
    # and save the output in the reference/ folder
    generate_folder_tree(
        start_path=project_root_dir,
        output_path=output_file_path,
        exclude_dirs=folders_to_exclude
    )
"""

File: git_workflow_guide.md
Location: reference\git_workflow_guide.md
Summary: This guide outlines managing Git history for a personal expense tracker project. It covers reverting to a specific milestone (`v1.0.0`), which involves discarding later commits and using `git push --force`, and emphasizes caution due to potential collaboration issues. It also advises using branches for safe feature development.
Code: """
# Git Workflow Guide for Personal Expense Tracker

This guide explains how to manage Git history for this project, specifically focusing on:
1. Reverting the project back to a specific milestone (tag).
2. Using branches for developing new features safely.

## 1. Reverting to Milestone `v1.0.0` (Undoing Later Changes)

This process makes your project (local files and GitHub remote) look exactly like it did when tagged `v1.0.0`. It **discards** commits made *after* that tag on the target branch (usually `main`).

**⚠️ WARNING:** This involves rewriting history on the remote repository (`git push --force`). This is dangerous if others are collaborating. Since it's just two users for now, it's manageable, but **proceed with extreme caution** and ensure both users understand the implications before forcing changes to the remote.

### Steps to Revert `main` Branch to `v1.0.0`:

1.  **Confirm Current Branch:** Ensure you're on the branch you intend to reset (e.g., `main`).
    ```bash
    git status
    # Output should indicate you are on branch 'main'
    ```

2.  **Ensure Clean Working Directory:** Commit or stash any changes you want to keep.
    ```bash
    git status
    # Should say "nothing to commit, working tree clean"
    ```

3.  **Reset Local Branch HARD to the Tag:** This moves the local `main` branch pointer back to `v1.0.0` and **discards subsequent commits/changes** on this local branch.
    ```bash
    git reset --hard v1.0.0
    ```

4.  **Force Push to Remote:** Overwrite the remote branch history with your reset local history.
    ```bash
    git push origin main --force
    ```
    *   **🚨 VERY IMPORTANT:** Using `--force` **deletes history** on GitHub for this branch. Only use if absolutely necessary and coordinated.
    *   *(Slightly Safer Alternative):* `git push origin main --force-with-lease` offers a minor safety check against overwriting unseen remote changes, but still force pushes.

**Outcome:** Both your local `main` branch and the `main` branch on GitHub now reflect the exact state of the `v1.0.0` tag. Commits made after `v1.0.0` on this branch are effectively gone from the main history line.

## 2. Using Branches for Development (The Recommended Workflow)

Branches allow you to work on new features (like the Phase 2 chatbot) in isolation without affecting your stable `main` branch.

### Workflow Example (Starting Chatbot Feature after `v1.0.0`):

1.  **Start on `main` and Update:** Ensure your main branch is up-to-date.
    ```bash
    git checkout main
    git pull origin main
    ```

2.  **Create a Feature Branch:** Create and switch to a new branch for the feature.
    ```bash
    git checkout -b feature/chatbot
    # You are now on branch 'feature/chatbot'
    ```
    *   This branch starts as a copy of `main` at this point (`v1.0.0`). Changes here won't affect `main`.

3.  **Develop on the Feature Branch:**
    *   Write code, add files, modify existing ones for the chatbot.
    *   Commit your changes frequently with clear messages:
      ```bash
      # ... make changes ...
      git add .
      git commit -m "Add basic chatbot UI structure"
      # ... make more changes ...
      git add .
      git commit -m "Implement LangGraph agent skeleton"
      ```

4.  **Push the Feature Branch to Remote:** Back up your work and enable potential collaboration.
    ```bash
    # First time pushing this new branch:
    git push -u origin feature/chatbot
    # Subsequent pushes on this branch:
    # git push
    ```

5.  **Continue Development:** Repeat step 3 & 4 as needed. Your `main` branch remains stable.

6.  **Merging (When Feature is Ready & Tested):**
    *   **Switch back to `main`:**
        ```bash
        git checkout main
        ```
    *   **Update `main`:** Ensure `main` has the latest changes from the remote (if any).
        ```bash
        git pull origin main
        ```
    *   **Merge the feature branch into `main`:**
        ```bash
        git merge feature/chatbot
        ```
        *   This brings all the commits from `feature/chatbot` into `main`.
        *   **Handle Conflicts:** If Git reports merge conflicts, you must manually edit the indicated files to resolve the differences, then `git add .` and `git commit` to complete the merge.
    *   **Push the Updated `main`:**
        ```bash
        git push origin main
        ```

7.  **Tag the New Milestone (Optional but Recommended):**
    ```bash
    git tag v2.0.0 -m "Phase 2 complete: Chatbot feature integrated."
    git push origin v2.0.0
    ```

8.  **Clean Up (Optional):** Delete the feature branch after successful merge.
    ```bash
    # Delete local branch
    git branch -d feature/chatbot
    # Delete remote branch
    git push origin --delete feature/chatbot
    ```

### Workflow Summary:

*   **`main`:** Keep stable, reflects working/deployed versions.
*   **Feature Branches:** Create for *all* new work (`git checkout -b <branch_name>`).
*   **Develop:** Code, commit, push on the feature branch.
*   **Merge:** When feature is done, update `main` (`git pull`), then merge the feature branch *into* `main` (`git merge <branch_name>`).
*   **Push `main`**.
*   **Tag** major milestones (`git tag`).

This branching strategy is much safer and is the standard professional practice. Use tags (`v1.0.0`, etc.) to easily revisit specific points in time without disrupting ongoing development.
"""

File: instruction_advanced_question_types.txt
Location: reference\instruction_advanced_question_types.txt
Summary: The file outlines how a Data Science Sub Agent (DSA) categorizes user questions into five advanced machine learning types: Regression, Forecasting, Classification, Segmentation, and Unsupervised Clustering. It provides detailed reasoning and examples for each type, tailored for a personal finance advisor app.
Code: """
These are sample user questions.These are the questions which the DATA SCIENCE SUB AGENT (DSA) needs to answer. The DSA will categorize questions in one of the 5 advanced question types:Regression, Forecasting, Classification, Segmentation, Unsupervised Clustering. Here we have detailed reasoning for 5 example question across each of the 5 ML types (Regression, Forecasting, Classification, Segmentation, Unsupervised Clustering), specifically tailored for my 2-person personal finance advisor app.

1. Regression Questions (Predicting Specific Numerical Values)

	Goal: Predict a continuous numerical value (usually Amount) for a specific event or instance based on its characteristics.

	Why Regression (vs. Forecasting)? Focuses on the relationship between features of a single instance and its numerical outcome, rather than predicting the next value in a sequence based primarily on past values and time patterns.

	Question: "Predict the cost (Amount) of the next 'Household Repair' (Plumbing, Electrical, Appliance) needed, based on the specific type of repair (Sub-category) and the month it occurs?"

	Reasoning: This predicts a single numerical value (cost) for an often irregular event. Key predictors are the features of that specific event (type of repair, seasonality via month), not necessarily the cost of the last repair (as that could have been entirely different). It's not a time series prediction of monthly repair totals.

	Benefit: Helps anticipate costs for necessary but unpredictable maintenance.

	Question: "Estimate the Amount Anirban is likely to spend on a single 'Shopping' transaction at 'Amazon' or 'Flipkart', considering the platform (Sub-category), the month (for potential sales events), and the day of the week?"

	Reasoning: Predicts the value of one shopping instance. The platform (Amazon vs. Flipkart), time of year (sales), and whether it's a weekend might influence the basket size more directly than the amount spent on the previous online order. This models the characteristics-to-amount relationship for a specific event.

	Benefit: Understands typical spending per online shopping session on major platforms.

	Question: "What is the predicted Amount for a 'Food Delivery' order, based on the User ordering, the DayOfWeek, and potentially the restaurant mentioned in 'Type' (requires NLP)?"

	Reasoning: Focuses on predicting the cost of a single food delivery event. The user (different preferences/order sizes), day (weekend vs. weekday), and restaurant choice (if extractable) are direct features influencing the cost of that specific order, distinguishing it from forecasting total monthly food delivery spend.

	Benefit: Provides insight into typical meal costs when ordering in, varying by person and context.

	Question: "Predict the Amount Puspita will spend on her next 'Flight' booking, based on the month of booking and the account used ('Puspita-Bandhan' vs. 'Puspita-SBI')?"

	Reasoning: Predicts the cost of one specific, potentially high-value, and infrequent event. While seasonal factors (Month) matter, the model uses features associated with the booking event (like which account is used, potentially reflecting different trip types/budgets associated with that account) rather than forecasting a sequence of flight costs.

	Benefit: Helps plan for significant, variable travel expenses often associated with specific accounts or times of year.

	Question: "Estimate the Amount of a 'Gifts & Donations' transaction, based on the Sub-category ('Family', 'Friends', 'Charity', 'Temple') and the User making the transaction?"

	Reasoning: Predicts the value of a single gifting/donation instance. The recipient/purpose (Sub-category) and who is giving (User) are likely the primary drivers of the amount for that specific transaction, rather than forming a predictable time series pattern.

	Benefit: Understands typical spending levels for different types of gifts or donations, varying by person and occasion/recipient.

2. Forecasting Questions (Predicting Future Values in a Time Series)

	Goal: Predict future values (often numerical aggregates) of a variable that evolves sequentially over time.

	Why Forecasting (vs. Regression)? Focuses explicitly on the temporal dependencies – trend, seasonality, and autocorrelation (how past values influence future values) – inherent in the time series data itself. The primary input is the historical sequence.

	Question: "What is the forecasted total combined spending (Anirban + Puspita) across all categories for the next calendar month?"

	Reasoning: This predicts an aggregate value over a future time period (next month). The prediction relies primarily on the historical sequence of total monthly spending, capturing overall trends (e.g., lifestyle inflation) and seasonality (e.g., higher spending near holidays). This is a classic time series forecasting problem.

	Benefit: High-level budget planning and cash flow projection for the household.

	Question: "Forecast the total amount we are likely to spend on 'Groceries' in the next 4 weeks (providing a weekly breakdown)."

	Reasoning: Predicts an aggregate spend for a specific category over multiple future time periods (next 4 weeks). Grocery spending often has weekly cycles (stock-ups) and monthly patterns. Forecasting models explicitly handle these temporal patterns based on the history of weekly/monthly grocery totals.

	Benefit: Detailed near-term budget planning for a major, recurring expense category.

	Question: "What is the predicted total monthly spending attributed to Puspita for the next 3 months?"

	Reasoning: Treats Puspita's total personal spending as a time series. It forecasts the future aggregate monthly values based on her historical spending patterns, trends, and seasonality, distinct from predicting a single future transaction's amount based on its features (which would be regression).

	Benefit: Helps track and plan individual spending contributions and budgets over the medium term.

	Question: "Forecast the combined monthly spending specifically on the 'Waste' category (Smoke, Alcohol) for the next month."

	Reasoning: This involves predicting the aggregate amount for a specific (potentially sensitive) category over the next time period. Even if irregular, if there's any underlying trend or seasonality in this combined category total over months, forecasting attempts to capture it from the historical sequence.

	Benefit: Helps monitor and potentially manage spending in non-essential/habitual categories by predicting the near-term outlay based on past patterns.

	Question: "Predict the total number of transactions (count, not amount) we are likely to make as a couple in the next week."

	Reasoning: This forecasts a count over a future time period. Transaction frequency itself can be treated as a time series. It depends on the historical pattern of weekly transaction counts, including any day-of-week or intra-month effects. Regression wouldn't typically predict a count for a future period based on the sequence.

	Benefit: Provides insight into the activity level of spending, complementing amount-based forecasts. High frequency might indicate many small purchases.

3. Classification Questions (Predicting Predefined Labels)

	Goal: Assign an instance (e.g., a transaction, a day) to one of several predefined, discrete classes based on its features.

	Why Classification (vs. Segmentation/Clustering)? We are predicting membership in known, predefined categories (like Essential/Discretionary). We are not defining the segments themselves (Segmentation) or discovering unknown groups (Clustering).

	Question: "Classify each transaction as 'Essential' or 'Discretionary' based on its Category/Sub-category." (Requires a predefined mapping rule).

	Reasoning: Assigns each transaction instance to one of two predefined labels. This is the canonical classification task. It's not segmentation because we aren't analyzing the characteristics of the 'Essential' group vs. 'Discretionary' group, but rather labeling individual items. It's not clustering because the labels are known beforehand.

	Benefit: Automatic categorization for budget analysis (Needs vs. Wants).

	Question: "Based on amount, time of day, and day of week, classify a 'Restaurant' transaction as 'Meal' (likely lunch/dinner cost) or 'Snack/Coffee' (lower cost, typical cafe/snack times)?"

	Reasoning: Assigns restaurant transactions to one of two predefined functional categories ('Meal'/'Snack') based on their features. The rules/model defines the boundary between these known classes. It differs from clustering, which might discover different groupings automatically.

	Benefit: Provides more context to restaurant spending beyond just the total amount.

	Question: "Classify each month as a 'High Travel Spending Month' (Yes/No) based on whether total Travel category spending exceeds a certain threshold (e.g., ₹15,000 combined)?"

	Reasoning: Assigns a predefined binary label ('High Travel' / 'Normal Travel') to each month based on a rule applied to aggregated data for that month. It's classification because the label is predefined. It's not segmentation because the focus is labeling the month, not analyzing the characteristics of all 'High Travel Months' together.

	Benefit: Quickly identifies periods dominated by significant travel costs.

	Question: "Predict if a 'Shopping' transaction made by Anirban is likely for 'Electronics' (Yes/No) based on the Sub-category (Amazon, Flipkart, Purple, Lifestyle, Max, Myntra) and the Amount (higher amounts might suggest electronics)?"

	Reasoning: Assigns a predefined label ('Electronics'/'Not Electronics') to individual shopping transactions. This requires defining which sub-categories can sell electronics and potentially learning from amount patterns. It's classification because the target label is known.

	Benefit: Helps infer the purpose of shopping transactions on general platforms where the sub-category alone isn't specific enough.

	Question: "Classify a day as having 'Anomalous Spending' (Yes/No) if the total daily spend is significantly higher (e.g., > 3 standard deviations above the rolling monthly average) than usual for that day of the week?"

	Reasoning: Assigns a predefined binary label ('Anomalous'/'Normal') to each day based on a statistical rule comparing its spend to its historical context. It's classification because the label is defined by the rule. It differs from clustering which might find groups of 'high spending days' without the context of deviation from the norm.

	Benefit: Automatically flags days with unusually high expenditure for review.

4. Segmentation Questions (Analyzing Predefined Groups)

	Goal: Divide data into meaningful, predefined groups based on rules or shared characteristics, and then analyze and compare these segments.

	Why Segmentation (vs. Classification/Clustering)? The primary focus is on defining the groups first based on domain knowledge or specific criteria, and then describing or comparing the data within those defined segments. It's not predicting a label for new instances (Classification) or discovering unknown groups (Clustering).

	Question: "Compare the spending patterns (top categories, avg. transaction amount, user split) within two defined segments: 'Planned Recurring Expenses' (Rent, SIP, ULIP, Insurance Premiums) vs. 'Variable & Discretionary Expenses' (all other categories)."

	Reasoning: We first define segments based on category purpose ('Planned Recurring' vs. 'Variable/Discretionary'). The analysis then compares the characteristics of transactions falling into these predefined groups. This is segmentation analysis, not classification (not predicting segment for a new transaction) or clustering (segments are predefined).

	Benefit: Clearly separates committed outflows from flexible spending for high-level budget understanding.

	Question: "Analyze the 'High-Frequency Spending' segment (transactions under ₹300). What are the dominant categories, sub-categories, and users within this segment? Does its total monthly value change significantly?"

	Reasoning: We define a segment based on a rule (Amount < 300). The analysis then describes the composition (categories, users) and tracks the aggregate behavior (total value over time) of this specific, predefined segment.

	Benefit: Highlights where small, frequent purchases are occurring, often an area for potential budget leaks ("death by a thousand cuts").

	Question: "Segment monthly spending into 'Pay Week 1', 'Week 2', 'Week 3', 'Week 4+'. How does the distribution of spending across categories (e.g., % on Grocery vs. % on Entertainment) differ between these predefined intra-month time segments?"

	Reasoning: Segments are defined based on the week of the month (assuming a monthly pay cycle context). The analysis then compares the category breakdown across these predefined time-based segments.

	Benefit: Reveals spending patterns tied to pay cycles (e.g., more discretionary spending early in the month, bills later).

	Question: "Create user-based segments ('Anirban's Spending' vs. 'Puspita's Spending'). What are the key differences in their top 5 spending categories, average transaction values, and preferred accounts within their respective segments?"

	Reasoning: Segments are simply defined by the User field. The analysis then performs a comparative characterization between these two predefined segments.

	Benefit: Directly compares the financial habits and priorities of both individuals based on their tracked expenses.

	Question: "Define a 'Travel Mode Segment' (Flight, Train, Cab/Commute, Other Travel). What is the average cost, frequency, and associated user/account for transactions within each of these predefined travel sub-segments?"

	Reasoning: Segments are defined by grouping specific travel Sub-category values. The analysis then describes the typical financial characteristics associated with each defined travel mode.

	Benefit: Provides a clear cost and usage comparison between different forms of travel used by the couple.

5. Unsupervised Clustering Questions (Discovering Unknown Groups)

	Goal: Allow an algorithm to automatically discover natural groupings (clusters) within the data based on similarity across features, without using predefined labels.

	Why Clustering (vs. Classification/Segmentation)? The key is the discovery of groups. We don't know the optimal or 'correct' groupings beforehand. We want the algorithm to reveal structures or archetypes based purely on the data patterns, unlike classification (predicting known labels) or segmentation (analyzing predefined groups).

	Question: "Cluster our days based on the combination of total amount spent and the number of transactions that day. What kind of 'daily activity' clusters emerge (e.g., 'Low Spend/Low Activity', 'High Spend/Low Activity (single big purchase?)', 'Moderate Spend/High Activity (many small purchases?)')?"

	Reasoning: We don't predefine what makes a 'type' of day. We feed features (total daily amount, total daily transaction count) into a clustering algorithm (like K-Means) and let it find groups of days that are mathematically similar based on these two dimensions. We then interpret the resulting clusters.

	Benefit: Discovers data-driven daily spending styles beyond simple high/low thresholds.

	Question: "Based on the vector of monthly spending across all major categories, can we cluster the months? Do distinct 'financial character' months emerge automatically (e.g., months focused heavily on Investment, months dominated by Travel, 'balanced' months)?"

	Reasoning: We represent each month by its spending profile across categories (a vector of numbers). Clustering groups months with similar spending distributions, regardless of the absolute total spend. This might reveal patterns like "Holiday Prep Month" or "Saving Drive Month" without us defining those labels first.

	Benefit: Identifies seasonality or periods defined by shifting financial priorities across the board, discovered from the data itself.

	Question: "Cluster individual 'Grocery' transactions based on Amount, Store/Sub-category, and TimeOfDay (if available). What natural groupings of grocery runs are discovered (e.g., weekday morning top-ups at Local Store, large weekend BigBasket orders, late-night Zepto snacks)?"

	Reasoning: Aims to find inherent patterns within grocery shopping without pre-labeling runs as 'Stock-up' or 'Top-up'. The algorithm groups similar grocery transaction events based on cost, place, and potentially time.

	Benefit: May reveal more nuanced grocery shopping habits or contexts than simple rule-based classification.

	Question: "Can we cluster weeks based on the proportion of spending allocated to Needs (e.g., Rent, Grocery, Utilities) vs. Wants (e.g., Restaurant, Shopping, Entertainment)? Do weeks with distinct Needs/Wants balance ratios emerge?"

	Reasoning: We calculate features (proportion of spend on Needs, proportion on Wants) for each week and ask the clustering algorithm to group weeks with similar proportions, discovering different types of weekly budget allocations automatically.

	Benefit: Finds weeks characterized by different financial discipline levels or priorities based on the needs/wants balance, identified by the algorithm.

	Question: "Cluster Anirban's 'Shopping' transactions based on Amount and Platform/Sub-category. Are there distinct clusters representing, perhaps, 'Small Amazon Buys', 'Large Electronics Purchases (Flipkart/Amazon)', 'Clothing Hauls (Myntra/Lifestyle/Max)' that the data naturally separates?"

	Reasoning: Applies clustering specifically to Anirban's shopping data using amount and store type as features. The goal is to see if the algorithm discovers groupings that align with intuitive shopping purposes without us predefining them.

	Benefit: Data-driven identification of distinct shopping behavior types for a specific user, potentially revealing patterns not immediately obvious.
"""


"""

File: instruction_code_details_compressed.txt
Location: reference\instruction_code_details_compressed.txt
Summary: The `create_db.py` script reads "dummy_expenses.csv" into a pandas DataFrame, normalizes column names, formats the 'date' column, adds a UUID to each row, and saves the DataFrame to an SQLite database "expenses.db". It ensures data consistency and uniqueness with formatted dates and unique identifiers.
Code: """

#PY create_db.py
@path: create_db.py
@summary: The code reads a CSV file named "dummy_expenses.csv" into a pandas DataFrame, normalizes column names, formats the 'date' column, adds a UUID to each row, and saves the DataFrame to an SQLite database named "expenses.db".
@code:
import sqlite3
import pandas as pd
import uuid

#PY Load CSV
df = pd.read_csv("dummy_expenses.csv")

#PY Normalize column names
df.columns = (
df.columns
.str.strip()
.str.lower()
.str.replace("-", "_")
.str.replace(" ", "_")
)

#PY Validate and format date
df['date'] = pd.to_datetime(df['date'], errors='coerce').dt.strftime('%Y-%m-%d')

#PY Add UUID for each row
df['id'] = [str(uuid.uuid4()) for _ in range(len(df))]

#PY Save to SQLite
conn = sqlite3.connect("expenses.db")
df.to_sql("expenses", conn, if_exists="replace", index=False)
conn.close()

print("✅ Database 'expenses.db' created from CSV!")


#PY db_utils.py
@path: db_utils.py
@summary: The `db_utils.py` file provides utility functions for managing an SQLite database of expenses. It includes functions to establish a database connection, fetch all expenses, fetch expenses by ID, insert new expenses, update existing expenses, delete expenses, and fetch the last N expenses. It uses logging for error handling and debugging.
@code:
#PY db_utils.py
import sqlite3
import pandas as pd
from uuid import uuid4
import logging
from typing import Optional, Dict, Any, List #PY Import types for hinting

#PY Setup basic logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

DB_NAME: str = "expenses.db" #PY Add type hint for constant

def get_connection() -> Optional[sqlite3.Connection]:

#FILE dummy_expenses.csv
@path: dummy_expenses.csv
@summary: The file logs financial transactions for Anirban on January 1, 2025, detailing expenses across categories such as rent, shopping, household, and groceries, with specific amounts and descriptions for each transaction. Total expenses include house rent, clothing, books, electricity, and groceries.
@code:
Date       Account  Category     Sub-category                             Type    User  Amount
2025-01-01 Anirban-ICICI      Rent       House Rent     Monthly House Rent - January Anirban   30000
2025-01-01   Anirban-SBI  Shopping           Meesho           Meesho Find - Clothing Anirban    7740
202[...]

#FILE dummy_expenses_generated.csv
@path: dummy_expenses_generated.csv
@summary: The file contains financial transaction records for January 1, 2023, detailing expenses by Anirban and Puspita. Categories include rent, household, grocery, and restaurant, with specific sub-categories like house rent, maid salary, and takeaway. Transactions are linked to specific accounts and users, with amounts specified for each.
@code:
date  year   month     week day_of_week       account   category     sub_category                       type    user   amount
01-01-2023  2023 2023-01 2023-W52      Sunday Anirban-ICICI       Rent       House Rent Monthly House Rent Payment Anirban 30000.00
01-01-2023  2023 2023-01 2023-W52      Sun[...]

#FILE expense_metadata.json
@path: expense_metadata.json
@summary: The file outlines a financial transaction structure, detailing transaction dates, account holders (Anirban and Puspita with various banks), and categories of expenses. Categories include Investment, Rent, Travel, Restaurant, Insurance Premium, Household, Connectivity, and Waste, with specific examples listed under each category.
@code:
{
"Date": "Date of the transaction (format: YYYY-MM-DD)",
"Account": [
"Anirban-SBI",
"Anirban-ICICI",
"Puspita-SBI",
"Puspita-Bandhan"
],
"categories": {
"Investment": ["SIP", "Mutual Funds", "Stocks", "FD/RD"],
"Rent": ["House Rent"],
"Travel": ["Day Trip", "Vacation", "Commute", "Cab", "Train", "[...]

#PY main.py
@path: main.py
@summary: The `main.py` file is a Streamlit application for a Personal Expense Tracker. It configures the app's layout, loads custom CSS, and sets up navigation for three tabs: "Add Expenses," "Reports," and "Visualizations." It also includes data management features for downloading a database backup and handles page rendering based on user selection.
@code:
#PY main.py

#FILE requirements-v2.0.txt
@path: requirements-v2.0.txt
@summary: The file lists various Python package dependencies categorized under core application, database, GenAI & embeddings, LangChain & LangGraph, data science, machine learning, data visualization, Python utilities, and helpers. Key packages include Streamlit, Pandas, NumPy, SQLAlchemy, OpenAI, Transformers, Scikit-learn, Matplotlib, and Black.
@code:
#FILE Core Application
streamlit
pandas
numpy==2.1.3
python-dateutil
python-dotenv==1.0.1
SQLAlchemy==2.0.39
requests

#FILE Database
aiosqlite==0.21.0         #FILE async SQLite support
faiss-cpu==1.10.0         #FILE vector search
SQLAlchemy==2.0.39

#FILE GenAI & Embeddings
openai==1.68.2
cohere==5.14.0
sentence-tra[...]

#FILE requirements.txt
@path: requirements.txt
@summary: I'm sorry, I can't summarize the file without being able to read its contents. If you can provide the text or main points from the file, I'd be happy to help summarize it for you.
@code:
Unable to read file.

#FILE sample_data_generation.csv
@path: sample_data_generation.csv
@summary: The file outlines Anirban's investment categories, including SIP, mutual funds, stocks, and FD/RD, detailing account names, expense frequency, minimum and maximum expense amounts, maximum transactions per month, and valid expense types for each category.
@code:
Category Sub-category    User       Account Expense-Frequency  Min-expenses-amount  Max-expenses-amount  Max-times-per-month                                                                              Valid-expense-types
Investment          SIP Anirban Anirban-ICICI           monthly               [...]

#FILE styles.css
@path: styles.css
@summary: This CSS file defines a light theme using the Roboto font. It sets color variables for backgrounds, text, accents, borders, and success messages, along with a border radius for rounded corners. The theme includes white and light grey backgrounds, dark text, blue accents, and a green success color.
@code:
/* styles.css - Reverted Light Theme */

/* --- Base Font --- */
@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap');

/* --- Light Theme Variables --- */
:root {
--primary-bg-color: #FFFFFF;       /* White main background */
--secondary-bg-color: #F8F9FA[...]

#PY style_utils.py
@path: style_utils.py
@summary: The `style_utils.py` file defines a function `load_css` that loads and injects CSS into a Streamlit app from a specified file, defaulting to "styles.css". It logs a warning if the file doesn't exist and handles errors during file reading with logging for debugging purposes.
@code:
#PY style_utils.py
import streamlit as st
import logging #PY For logging errors
import os #PY For checking file existence

def load_css(file_path: str = "styles.css"):

#PY test_openai.py
@path: test_openai.py
@summary: The code initializes an OpenAI client using an API key from the environment, creates a chat completion using the "gpt-3.5-turbo" model, and prints the assistant's reply to a user's "Hello!" message.

#FILE expenses.csv
@path: data\expenses.csv
@summary: The file is a financial record detailing transactions in January 2023, including dates, accounts, categories, and amounts. It covers expenses like rent, maid salary, vacation, SIP investment, and furniture, associated with users Anirban and Puspita, categorized by type and sub-category.
@code:
date  year   month     week day_of_week         account   category sub_category                             type    user  amount
01-01-2023  2023 2023-01 2022-W52      Sunday   Anirban-ICICI       Rent   House Rent     Monthly House Rent - January Anirban   30000
01-01-2023  2023 2023-01 2022-W52   [...]

#FILE agentic_ds_app_prep.txt
@path: reference\agentic_ds_app_prep.txt
@summary: The file outlines a preparatory step for implementing agentic AI, focusing on data generation. It specifies creating a dataset similar to "dummy_expenses.csv" from January 1, 2023, to April 20, 2025. Key data columns include date, account, category, transaction type, user, and amount, with specific formatting and constraints.
@code:
##FILE THINGS TO DO BEFORE AGENTIC AI IMPLEMENTATION

STEP 1: GENERATE MORE DATA
- Generate more data, similar to the sample dummy_expenses.csv, from 2023.01.01 - 2025.04.20 (current date). Important considerations for data generation:
- SUPER IMPORTANT: columns:
1. date: dd-mm-yyyy
2. year: yyyy
3. mon[...]

#FILE data_analysis.ipynb
@path: reference\data_analysis.ipynb
@summary: The file outlines an Exploratory Data Analysis (EDA) process for personal finance data, focusing on validating the structure and realism of generated expense data from `dummy_expenses_generated.csv`. It aims to ensure data suitability for AI/ML tasks, referencing specific rulesets and metadata, with visualizations displayed inline.
@code:
{
"cells": [
{
"cell_type": "markdown",
"metadata": {},
"source": [
"#FILE Exploratory Data Analysis (EDA) for Personal Finance Data (v2)\n",
"\n",
"**Objective:** Analyze the generated expense data (`dummy_expenses_generated.csv`) to validate its structure, adherence to generation rules, realism, and s[...]

#PY generate_code_details.py
@path: reference\generate_code_details.py
@summary: The script `generate_code_details.py` summarizes files in the 'app-personal-finance' project using GPT-4o. It processes `.py` files fully, `.csv` files for the top 5 rows, and other files for the first 1000 characters, excluding certain file types. Summaries are saved in a structured format to `instruction_code_details.txt`.
@code:
#!/usr/bin/env python3

#PY generate_data.py
@path: reference\generate_data.py
@summary: The script generates realistic expense data from 2023-01-01 to 2025-04-20, using rules from 'sample_data_generation.csv'. It outputs transactions to 'dummy_expenses_generated.csv'. The script handles fixed and ad-hoc transactions, ensuring monthly constraints on totals and rows, and logs progress and errors.
@code:
#PY reference/create_file_data.py

#PY generate_tree.py
@path: reference\generate_tree.py
@summary: The `generate_tree.py` script generates a text file representing a folder tree structure starting from a specified directory. It allows excluding certain directories and saves the output to a specified file path. The script is configured to exclude common directories like `__pycache__`, `.git`, and `venv`.
@code:
#PY reference/generate_tree.py
import os

def generate_folder_tree(start_path, output_path, exclude_dirs=None):

#FILE git_workflow_guide.md
@path: reference\git_workflow_guide.md
@summary: This guide outlines managing Git history for a personal expense tracker project. It covers reverting to a specific milestone (`v1.0.0`) by discarding later commits and emphasizes using branches for safe feature development. It warns about the risks of rewriting remote history with `git push --force`, especially in collaborative settings.
@code:
#FILE Git Workflow Guide for Personal Expense Tracker

This guide explains how to manage Git history for this project, specifically focusing on:
1. Reverting the project back to a specific milestone (tag).
2. Using branches for developing new features safely.

##FILE 1. Reverting to Milestone `v1.0.0` (Undo[...]

#FILE instruction_advanced_question_types.txt
@path: reference\instruction_advanced_question_types.txt
@summary: The file contains sample user questions with detailed reasoning for five example questions across five machine learning types: Regression, Forecasting, Classification, Segmentation, and Unsupervised Clustering. These are tailored for a personal finance advisor app, focusing on predicting numerical values, future trends, categorization, and grouping based on user data.
@code:
These are sample user questions. They have detailed reasoning for 5 example question across each of the 5 ML types (Regression, Forecasting, Classification, Segmentation, Unsupervised Clustering), specifically tailored for my 2-person personal finance advisor app.

1. Regression Questions (Predictin[...]

#FILE instruction_agentic_ds_app_prep.txt
@path: reference\instruction_agentic_ds_app_prep.txt
@summary: The document outlines the first step before implementing agentic AI: generating additional data similar to a sample CSV file. It specifies the required data columns, including date, account, category, transaction type, user, and amount, with specific formats and constraints for each, covering the period from January 1, 2023, to April 20, 2025.
@code:
##FILE THINGS TO DO BEFORE AGENTIC AI IMPLEMENTATION

STEP 1: GENERATE MORE DATA
- Generate more data, similar to the sample dummy_expenses.csv, from 2023.01.01 - 2025.04.20 (current date). Important considerations for data generation:
- SUPER IMPORTANT: columns:
1. date: dd-mm-yyyy
2. year: yyyy
3. mon[...]

#FILE instruction_code_details.txt
@path: reference\instruction_code_details.txt
@summary: The file `create_db.py` reads "dummy_expenses.csv" into a pandas DataFrame, normalizes column names, formats the 'date' column, adds a UUID to each row, and saves the DataFrame to an SQLite database "expenses.db".
@code:
#FILE instruction_code_details.txt

#PY create_db.py
@path: create_db.py
@summary: The code reads a CSV file named "dummy_expenses.csv" into a pandas DataFrame, normalizes column names, formats the 'date' column, adds a UUID to each row, and saves the DataFrame to an SQLite database named "expenses.db".
@code:
import sqlite3
import pandas as pd
import uuid

#PY Load CSV
df = pd.read_csv("dummy_expenses.csv")

#PY Normalize column names
df.columns = (
df.columns
.str.strip()
.str.lower()
.str.replace("-", "_")
.str.replace(" ", "_")
)

#PY Validate and format date
df['date'] = pd.to_datetime(df['date'], errors='coerce').dt.strftime('%Y-%m-%d')

#PY Add UUID for each row
df['id'] = [str(uuid.uuid4()) for _ in range(len(df))]

#PY Save to SQLite
conn = sqlite3.connect("expenses.db")
df.to_sql("expenses", conn, if_exists="replace", index=False)
conn.close()

print("✅ Database 'expenses.db' created from CSV!")


#PY db_utils.py
@path: db_utils.py
@summary: The `db_utils.py` file provides utility functions for managing an SQLite database of expenses. It includes functions to establish a database connection, fetch all expenses, fetch expenses by ID, insert new expenses, update existing expenses, delete expenses, and fetch the last N expenses. It uses logging for error handling and debugging.
@code:
#PY db_utils.py
import sqlite3
import pandas as pd
from uuid import uuid4
import logging
from typing import Optional, Dict, Any, List #PY Import types for hinting

#PY Setup basic logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

DB_NAME: str = "expenses.db" #PY Add type hint for constant

def get_connection() -> Optional[sqlite3.Connection]:

#FILE dummy_expenses.csv
@path: dummy_expenses.csv
@summary: The file logs financial transactions for Anirban on January 1, 2025, detailing expenses across categories such as rent, shopping, household, and groceries, with specific amounts and descriptions for each transaction. Total expenses include house rent, clothing, books, electricity, and groceries.
@code:
Date       Account  Category     Sub-category                             Type    User  Amount
2025-01-01 Anirban-ICICI      Rent       House Rent     Monthly House Rent - January Anirban   30000
2025-01-01   Anirban-SBI  Shopping           Meesho           Meesho Find - Clothing Anirban    7740
202[...]

#FILE dummy_expenses_generated.csv
@path: dummy_expenses_generated.csv
@summary: The file contains financial transaction records for January 1, 2023, detailing expenses by Anirban and Puspita. Categories include rent, household, grocery, and restaurant, with specific sub-categories like house rent, maid salary, and takeaway. Transactions are linked to specific accounts and users, with amounts specified for each.
@code:
date  year   month     week day_of_week       account   category     sub_category                       type    user   amount
01-01-2023  2023 2023-01 2023-W52      Sunday Anirban-ICICI       Rent       House Rent Monthly House Rent Payment Anirban 30000.00
01-01-2023  2023 2023-01 2023-W52      Sun[...]

#FILE expense_metadata.json
@path: expense_metadata.json
@summary: The file outlines a financial transaction structure, detailing transaction dates, account holders (Anirban and Puspita with various banks), and categories of expenses. Categories include Investment, Rent, Travel, Restaurant, Insurance Premium, Household, Connectivity, and Waste, with specific examples listed under each category.
@code:
{
"Date": "Date of the transaction (format: YYYY-MM-DD)",
"Account": [
"Anirban-SBI",
"Anirban-ICICI",
"Puspita-SBI",
"Puspita-Bandhan"
],
"categories": {
"Investment": ["SIP", "Mutual Funds", "Stocks", "FD/RD"],
"Rent": ["House Rent"],
"Travel": ["Day Trip", "Vacation", "Commute", "Cab", "Train", "[...]

#PY main.py
@path: main.py
@summary: The `main.py` file is a Streamlit application for a Personal Expense Tracker. It configures the app's layout, loads custom CSS, and sets up navigation for three tabs: "Add Expenses," "Reports," and "Visualizations." It also includes data management features for downloading a database backup and handles page rendering based on user selection.
@code:
#PY main.py

#FILE requirements-v2.0.txt
@path: requirements-v2.0.txt
@summary: The file lists various Python package dependencies categorized under core application, database, GenAI & embeddings, LangChain & LangGraph, data science, machine learning, data visualization, Python utilities, and helpers. Key packages include Streamlit, Pandas, NumPy, SQLAlchemy, OpenAI, Transformers, Scikit-learn, Matplotlib, and Black.
@code:
#FILE Core Application
streamlit
pandas
numpy==2.1.3
python-dateutil
python-dotenv==1.0.1
SQLAlchemy==2.0.39
requests

#FILE Database
aiosqlite==0.21.0         #FILE async SQLite support
faiss-cpu==1.10.0         #FILE vector search
SQLAlchemy==2.0.39

#FILE GenAI & Embeddings
openai==1.68.2
cohere==5.14.0
sentence-tra[...]

#FILE requirements.txt
@path: requirements.txt
@summary: I'm sorry, I can't summarize the file without being able to read its contents. If you can provide the text or main points from the file, I'd be happy to help summarize it for you.
@code:
Unable to read file.

#FILE sample_data_generation.csv
@path: sample_data_generation.csv
@summary: The file outlines Anirban's investment categories, including SIP, mutual funds, stocks, and FD/RD, detailing account names, expense frequency, minimum and maximum expense amounts, maximum transactions per month, and valid expense types for each category.
@code:
Category Sub-category    User       Account Expense-Frequency  Min-expenses-amount  Max-expenses-amount  Max-times-per-month                                                                              Valid-expense-types
Investment          SIP Anirban Anirban-ICICI           monthly               [...]

#FILE styles.css
@path: styles.css
@summary: This CSS file defines a light theme using the Roboto font. It sets color variables for backgrounds, text, accents, borders, and success messages, along with a border radius for rounded corners. The theme includes white and light grey backgrounds, dark text, blue accents, and a green success color.
@code:
/* styles.css - Reverted Light Theme */

/* --- Base Font --- */
@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap');

/* --- Light Theme Variables --- */
:root {
--primary-bg-color: #FFFFFF;       /* White main background */
--secondary-bg-color: #F8F9FA[...]

#PY style_utils.py
@path: style_utils.py
@summary: The `style_utils.py` file defines a function `load_css` that loads and injects CSS into a Streamlit app from a specified file, defaulting to "styles.css". It logs a warning if the file doesn't exist and handles errors during file reading with logging for debugging purposes.
@code:
#PY style_utils.py
import streamlit as st
import logging #PY For logging errors
import os #PY For checking file existence

def load_css(file_path: str = "styles.css"):

#PY test_openai.py
@path: test_openai.py
@summary: The code initializes an OpenAI client using an API key from the environment, creates a chat completion using the "gpt-3.5-turbo" model, and prints the assistant's reply to a user's "Hello!" message.
@code:
import os
from openai import OpenAI

#PY Initialize the OpenAI client with your API key
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

#PY Create a chat completion
response = client.chat.completions.create(
model="gpt-3.5-turbo",  #PY or "gpt-4" if you have access
messages=[
{"role": "system", "content": "You are a helpful assistant."},
{"role": "user", "content": "Hello!"},
]
)

#PY Print the assistant's reply
print(response.choices[0].message.content)


#FILE expenses - analysis.csv
@path: data\expenses - analysis.csv
@summary: The file is a financial transaction log detailing expenses by Anirban and Puspita in January 2023. It includes categories like rent, household, travel, and investment, specifying the account used, transaction type, and amount spent on each entry.
@code:
date  year   month     week day_of_week         account   category sub_category                             type    user  amount
01-01-2023  2023 2023-01 2022-W52      Sunday   Anirban-ICICI       Rent   House Rent     Monthly House Rent - January Anirban   30000
01-01-2023  2023 2023-01 2022-W52   [...]

#FILE expenses.csv
@path: data\expenses.csv
@summary: The file is a financial record detailing transactions in January 2023, including dates, accounts, categories, and amounts. It covers expenses like rent, maid salary, vacation, SIP investment, and furniture, associated with users Anirban and Puspita, categorized by type and sub-category.
@code:
date  year   month     week day_of_week         account   category sub_category                             type    user  amount
01-01-2023  2023 2023-01 2022-W52      Sunday   Anirban-ICICI       Rent   House Rent     Monthly House Rent - January Anirban   30000
01-01-2023  2023 2023-01 2022-W52   [...]

#FILE agentic_ds_app_prep.txt
@path: reference\agentic_ds_app_prep.txt
@summary: The file outlines a preparatory step for implementing agentic AI, focusing on data generation. It specifies creating a dataset similar to "dummy_expenses.csv" from January 1, 2023, to April 20, 2025. Key data columns include date, account, category, transaction type, user, and amount, with specific formatting and constraints.
@code:
##FILE THINGS TO DO BEFORE AGENTIC AI IMPLEMENTATION

STEP 1: GENERATE MORE DATA
- Generate more data, similar to the sample dummy_expenses.csv, from 2023.01.01 - 2025.04.20 (current date). Important considerations for data generation:
- SUPER IMPORTANT: columns:
1. date: dd-mm-yyyy
2. year: yyyy
3. mon[...]

#FILE data_analysis.ipynb
@path: reference\data_analysis.ipynb
@summary: The file outlines an Exploratory Data Analysis (EDA) process for personal finance data, focusing on validating the structure and realism of generated expense data from `dummy_expenses_generated.csv`. It aims to ensure data suitability for AI/ML tasks, referencing specific rulesets and metadata, with visualizations displayed inline.
@code:
{
"cells": [
{
"cell_type": "markdown",
"metadata": {},
"source": [
"#FILE Exploratory Data Analysis (EDA) for Personal Finance Data (v2)\n",
"\n",
"**Objective:** Analyze the generated expense data (`dummy_expenses_generated.csv`) to validate its structure, adherence to generation rules, realism, and s[...]

#PY generate_code_details.py
@path: reference\generate_code_details.py
@summary: The script `generate_code_details.py` summarizes files in the 'app-personal-finance' project using GPT-4o. It processes `.py` files fully, `.csv` files for the top 5 rows, and other files for the first 1000 characters, excluding certain file types. Summaries are saved in a structured format to `instruction_code_details.txt`.
@code:
#!/usr/bin/env python3

#PY generate_data.py
@path: reference\generate_data.py
@summary: The script generates realistic expense data from 2023-01-01 to 2025-04-20, using rules from 'sample_data_generation.csv'. It outputs transactions to 'dummy_expenses_generated.csv'. The script handles fixed and ad-hoc transactions, ensuring monthly constraints on totals and rows, and logs progress and errors.
@code:
#PY reference/create_file_data.py

#PY generate_tree.py
@path: reference\generate_tree.py
@summary: The `generate_tree.py` script generates a text file representing a folder tree structure starting from a specified directory. It allows excluding certain directories and saves the output to a specified file path. The script is configured to exclude common directories like `__pycache__`, `.git`, and `venv`.
@code:
#PY reference/generate_tree.py
import os

def generate_folder_tree(start_path, output_path, exclude_dirs=None):

#FILE git_workflow_guide.md
@path: reference\git_workflow_guide.md
@summary: This guide outlines managing Git history for a personal expense tracker project. It covers reverting to a specific milestone (`v1.0.0`) by discarding later commits and emphasizes using branches for safe feature development. It warns about the risks of rewriting remote history with `git push --force`, especially in collaborative settings.
@code:
#FILE Git Workflow Guide for Personal Expense Tracker

This guide explains how to manage Git history for this project, specifically focusing on:
1. Reverting the project back to a specific milestone (tag).
2. Using branches for developing new features safely.

##FILE 1. Reverting to Milestone `v1.0.0` (Undo[...]

#FILE instruction_advanced_question_types.txt
@path: reference\instruction_advanced_question_types.txt
@summary: The file contains sample user questions with detailed reasoning for five example questions across five machine learning types: Regression, Forecasting, Classification, Segmentation, and Unsupervised Clustering. These are tailored for a personal finance advisor app, focusing on predicting numerical values, future trends, categorization, and grouping based on user data.
@code:
These are sample user questions. They have detailed reasoning for 5 example question across each of the 5 ML types (Regression, Forecasting, Classification, Segmentation, Unsupervised Clustering), specifically tailored for my 2-person personal finance advisor app.

1. Regression Questions (Predictin[...]

#FILE instruction_agentic_ds_app_prep.txt
@path: reference\instruction_agentic_ds_app_prep.txt
@summary: The document outlines the first step before implementing agentic AI: generating additional data similar to a sample CSV file. It specifies the required data columns, including date, account, category, transaction type, user, and amount, with specific formats and constraints for each, covering the period from January 1, 2023, to April 20, 2025.
@code:
##FILE THINGS TO DO BEFORE AGENTIC AI IMPLEMENTATION

STEP 1: GENERATE MORE DATA
- Generate more data, similar to the sample dummy_expenses.csv, from 2023.01.01 - 2025.04.20 (current date). Important considerations for data generation:
- SUPER IMPORTANT: columns:
1. date: dd-mm-yyyy
2. year: yyyy
3. mon[...]

#FILE instruction_combined_files.txt
@path: reference\instruction_combined_files.txt
@summary: The `create_db.py` script reads a CSV file, normalizes its column names, formats date columns, adds a UUID to each row, and saves the data to an SQLite database named "expenses.db". The `db_utils.py` file sets up logging and imports necessary modules for database operations, with type hints for better code clarity.
@code:
#FILE Contents of create_db.py
import sqlite3
import pandas as pd
import uuid

#FILE Load CSV
df = pd.read_csv("dummy_expenses.csv")

#FILE Normalize column names
df.columns = (
df.columns
.str.strip()
.str.lower()
.str.replace("-", "_")
.str.replace(" ", "_")
)

#FILE Validate and format date
df['date'] = pd.to_da[...]

#FILE instruction_folder_tree.txt
@path: reference\instruction_folder_tree.txt
@summary: The file structure outlines a personal finance application with scripts for database creation and utilities, expense data management, and style customization. It includes Python scripts, CSV data files, JSON metadata, and Jupyter notebooks for data analysis. The project also contains documentation and test scripts for development and deployment.
@code:
app-personal-finance/
.env
.gitignore
create_db.py
db_utils.py
dummy_expenses.csv
dummy_expenses_generated.csv
expenses.db
expense_metadata.json
main.py
requirements-v2.0.txt
requirements.txt
sample_data_generation.csv
styles.css
style_utils.py
test_openai.py
data/
expenses - analysis.csv
expenses.c[...]

#FILE requirement_v1_streamlit_app.txt
@path: reference\requirement_v1_streamlit_app.txt
@summary: The file outlines the initial requirements for a personal finance app developed by a couple in Bangalore using Python, SQLite3, and Streamlit. The app aims to track expenses by categorizing them into investment, rent, travel, restaurant, and insurance premium categories. The implementation has since changed; refer to the codebase for updates.
@code:
PHASE 1: This is the INITIAL REQUIREMENT. FOR UNDERSTANDING INITIAL SCOPE ONLY. CURRENT IMPLEMENTATION HAS CHANGED. REFER TO CODEBASE FOR CURRENT STATE.

PUBLIC GIT REPO LINK: https://github.com/AnirbanDattaTech/App-Personal-Finance.git

1. INITIAL PROMPT
my wife and i are building a personal financ[...]

#FILE requirement_v2_ds_assistant.txt
@path: reference\requirement_v2_ds_assistant.txt
@summary: The file outlines the development of a chatbot for querying data insights and answering questions related to exploratory data analysis (EDA) and data science. It will handle advanced statistical and machine learning queries using an SQLite database. The chatbot will remember session-specific conversation history but not long-term interactions.
@code:
PHASE 2: This is the CURRENT REQUIREMENT.

PUBLIC GIT REPO LINK: https://github.com/AnirbanDattaTech/App-Personal-Finance.git

We will now start the development for a chatbot that can query the data and answer data insights, eda and data science related questions, to cover all areas a person might b[...]

#PY test_llm_gemini.py
@path: reference\test_llm_gemini.py
@summary: The script tests LangGraph and Gemini for answering questions using a sample of expense data. It involves loading environment variables, reading CSV data with Pandas, setting up a LangGraph state, and utilizing LangChain's ChatGoogleGenerativeAI model. It demonstrates basic prompt engineering and graph node setup for querying data.
@code:
#PY reference/test_llm_gemini.py

#PY add_expense.py
@path: tabs\add_expense.py
@summary: The `add_expense.py` file is a Streamlit app for adding and viewing expenses. It loads metadata from a JSON file, allowing users to input expense details like date, category, and amount. It validates inputs, logs errors, and displays recent expenses. The file includes enhanced logging for debugging purposes.
@code:
#PY tabs/add_expense.py
import streamlit as st
import pandas as pd
from db_utils import insert_expense, fetch_last_expenses
import json
import datetime
from typing import Dict, Any, Optional
import logging #PY <<<--- ADD THIS IMPORT

@st.cache_data
def load_metadata() -> Optional[Dict[str, Any]]:
"""Loads metadata from the expense_metadata.json file."""
try:
with open("expense_metadata.json", "r") as f:
metadata = json.load(f)
logging.debug("Metadata loaded successfully for Add Expense.") #PY More specific log
return metadata
except FileNotFoundError:
st.error("Error: expense_metadata.json not found.")
logging.error("expense_metadata.json not found.")
return None
except json.JSONDecodeError:
st.error("Error: Could not decode expense_metadata.json.")
logging.error("Could not decode expense_metadata.json.")
return None

def render():
"""Renders the 'Add Expense' page."""
st.subheader("Add New Expense")

metadata = load_metadata()
if metadata is None:
#PY Error already shown by load_metadata
return

#PY Fetch necessary lists from metadata safely
all_accounts = metadata.get("Account", [])
all_categories = sorted(list(metadata.get("categories", {}).keys()))
user_map = metadata.get("User", {})
category_map = metadata.get("categories", {})

if not all_accounts or not all_categories:
st.error("Metadata is missing essential 'Account' or 'categories' information.")
logging.error("Metadata missing Account or categories in Add Expense.")
return

#PY --- Date Input ---
expense_date = st.date_input(
"Date of Expense",
value=datetime.date.today(),
help="Select the date the expense occurred (defaults to today)."
)

#PY --- Category / Sub-category Selection ---
selected_category = st.selectbox(
"Category", options=all_categories, index=0, key="add_category",
help="Select the main expense category."
)
available_subcategories = sorted(category_map.get(selected_category, []))
if not available_subcategories:
st.warning(f"No sub-categories defined for '{selected_category}'. Please add them to metadata if needed.", icon="⚠️")

#PY --- Expense Entry Form ---
with st.form("expense_form", clear_on_submit=True):
col1, col2 = st.columns(2)
with col1:
selected_account = st.selectbox(
"Account", options=all_accounts, index=0, key="add_account",
help="Select the account used for the expense."
)
selected_sub_category = st.selectbox(
"Sub-category", options=available_subcategories, key="add_sub_category",
help="Select the specific sub-category.",
disabled=not available_subcategories
)
with col2:
expense_type = st.text_input(
"Type (Description)", max_chars=60, key="add_type",
help="Enter a brief description (e.g., 'Lunch with team')."
)
expense_user = user_map.get(selected_account, "Unknown")
#PY st.text(f"User: {expense_user}") #PY Display derived user
expense_amount = st.number_input(
"Amount (INR)", min_value=0.01, format="%.2f", step=10.0, key="add_amount",
help="Enter the expense amount (must be positive)."
)

submitted = st.form_submit_button("Add Expense")
if submitted:
is_valid = True
if not expense_type: st.toast("⚠️ Please enter a Type (Description).", icon="⚠️"); is_valid = False
if expense_amount <= 0.0: st.toast("⚠️ Amount must be > 0.", icon="⚠️"); is_valid = False
if available_subcategories and not selected_sub_category: st.toast(f"⚠️ Sub-category required for {selected_category}.", icon="⚠️"); is_valid = False
#PY Check only if sub-category *should* exist but wasn't selected, or if selected one is invalid
elif selected_sub_category and selected_sub_category not in available_subcategories: st.toast(f"❌ Invalid sub-category '{selected_sub_category}'.", icon="❌"); is_valid = False
#PY Handle case where no sub-cats exist and none should be selected
elif not available_subcategories and selected_sub_category: st.toast(f"❌ No sub-categories exist for {selected_category}.", icon="❌"); is_valid = False

if is_valid:
#PY Ensure sub-category is empty string if none are available/selected
final_sub_category = selected_sub_category if available_subcategories else ""
expense_data = {
"date": expense_date.strftime("%Y-%m-%d"), "account": selected_account,
"category": selected_category, "sub_category": final_sub_category,
"type": expense_type, "user": expense_user, "amount": expense_amount
}
try:
success = insert_expense(expense_data) #PY This function now logs internally
if success: st.toast(f"✅ Expense added!", icon="✅")
else: st.toast(f"❌ Failed to add expense (DB error).", icon="❌") #PY DB util logs specifics
except Exception as e:
st.toast(f"❌ Error submitting expense: {e}", icon="❌")
logging.error(f"Exception during expense submission: {e}") #PY Log here too

#PY --- Display Recent Expenses ---
st.markdown("---")
st.subheader("Last 10 Expenses Added")
try:
df_recent = fetch_last_expenses(10) #PY This function logs internally
if df_recent.empty:
st.info("No recent expenses recorded yet.")
else:
display_df_recent = df_recent.drop(columns=["id"], errors='ignore').rename(columns={
"date": "Date", "account": "Account", "category": "Category",
"sub_category": "Sub Category", "type": "Type", "user": "User", "amount": "Amount"
})
st.dataframe(
display_df_recent.style.format({'Date': '{:%Y-%m-%d}', 'Amount': '₹{:.2f}'}),
use_container_width=True, height=380, hide_index=True
)
except Exception as e:
st.error(f"Error loading recent expenses: {e}")
logging.error(f"Error displaying recent expenses: {e}")

#PY reports.py
@path: tabs\reports.py
@summary: The `reports.py` file is a Streamlit application for managing and displaying expense reports. It imports necessary libraries, including logging for error tracking. The file defines functions to load metadata, convert dataframes to CSV, and display forms for editing and deleting expenses. It also includes a main render function for the reports tab, handling view, edit, and delete modes, and a helper function for rendering the report view with filtering options and statistics.
@code:
#PY tabs/reports.py
import streamlit as st
import pandas as pd
from db_utils import fetch_all_expenses, fetch_expense_by_id, update_expense, delete_expense
import json
import datetime
from typing import Dict, Any, Optional, List
import logging #PY <<<--- ADD THIS IMPORT

@st.cache_data
def load_metadata() -> Optional[Dict[str, Any]]:
"""Loads metadata from the expense_metadata.json file."""
try:
with open("expense_metadata.json", "r") as f:
metadata = json.load(f)
logging.debug("Metadata loaded successfully for Reports.")
return metadata
except FileNotFoundError:
st.error("Error: expense_metadata.json not found.")
logging.error("expense_metadata.json not found.")
return None
except json.JSONDecodeError:
st.error("Error: Could not decode expense_metadata.json.")
logging.error("Could not decode expense_metadata.json.")
return None

@st.cache_data
def convert_df_to_csv(df: pd.DataFrame) -> bytes:
"""Converts a DataFrame to CSV bytes."""
try:
return df.to_csv(index=False).encode('utf-8')
except Exception as e:
logging.error(f"Error converting DataFrame to CSV: {e}")
return b""

#PY --- Function to display the Edit Form ---
def display_edit_form(expense_data: Dict[str, Any], metadata: Dict[str, Any]):
"""Displays the form for editing an existing expense."""
#PY ... (Code inside this function is mostly okay, relies on db_utils logging) ...
st.subheader(f"Edit Expense (ID: {expense_data.get('id', 'N/A')[:8]}...)")
try: default_date = datetime.datetime.strptime(str(expense_data.get('date','')), '%Y-%m-%d').date()
except: default_date = datetime.date.today()
all_categories = sorted(list(metadata.get("categories", {}).keys()))
all_accounts = metadata.get("Account", [])
user_map = metadata.get("User", {})
category_map = metadata.get("categories", {})
default_category_index = 0
if expense_data.get('category') in all_categories: default_category_index = all_categories.index(expense_data['category'])
if 'edit_form_category' not in st.session_state: st.session_state.edit_form_category = all_categories[default_category_index] if all_categories else None
def update_edit_category_state(): st.session_state.edit_form_category = st.session_state.edit_cat_widget
selected_category = st.selectbox("Category", all_categories, index=default_category_index, key='edit_cat_widget', on_change=update_edit_category_state)
current_category_in_state = st.session_state.edit_form_category
available_subcategories = sorted(category_map.get(current_category_in_state, []))
default_sub_cat_index = 0
if expense_data.get('sub_category') in available_subcategories: default_sub_cat_index = available_subcategories.index(expense_data['sub_category'])
default_account_index = 0
if expense_data.get('account') in all_accounts: default_account_index = all_accounts.index(expense_data['account'])

with st.form("edit_expense_form"):
col1, col2 = st.columns(2)
with col1:
date_val = st.date_input("Date", value=default_date)
account_val = st.selectbox("Account", all_accounts, index=default_account_index)
sub_category_val = st.selectbox("Sub-category", available_subcategories, index=default_sub_cat_index, disabled=not available_subcategories)
with col2:
type_val = st.text_input("Type (Description)", value=expense_data.get('type',''), max_chars=60)
user_val = user_map.get(account_val, "Unknown")
st.text(f"User: {user_val}")
amount_val = st.number_input("Amount (INR)", min_value=0.01, value=float(expense_data.get('amount', 0.01)), format="%.2f", step=10.0)
submitted = st.form_submit_button("Save Changes")
cancelled = st.form_submit_button("Cancel")
if submitted:
is_valid = True
if not type_val: st.toast("⚠️ Type required.", icon="⚠️"); is_valid = False
if amount_val <= 0.0: st.toast("⚠️ Amount must be positive.", icon="⚠️"); is_valid = False
if available_subcategories and not sub_category_val: st.toast(f"⚠️ Sub-category required for {current_category_in_state}.", icon="⚠️"); is_valid = False
elif sub_category_val and sub_category_val not in available_subcategories: st.toast(f"❌ Invalid sub-category '{sub_category_val}'.", icon="❌"); is_valid = False
elif not available_subcategories and sub_category_val: st.toast(f"❌ No sub-categories exist for {current_category_in_state}.", icon="❌"); is_valid = False
if is_valid:
final_sub_category = sub_category_val if available_subcategories else ""
updated_data = {"date": date_val.strftime("%Y-%m-%d"), "account": account_val, "category": current_category_in_state, "sub_category": final_sub_category, "type": type_val, "user": user_val, "amount": amount_val}
try:
success = update_expense(st.session_state.selected_expense_id, updated_data)
if success:
st.toast("✅ Expense updated!", icon="✅")
st.session_state.edit_mode = False; st.session_state.pop('selected_expense_id', None); st.session_state.pop('edit_form_category', None); st.experimental_rerun()
else: st.toast("❌ Failed to update expense.", icon="❌") #PY db_utils logs specifics
except Exception as e: st.toast(f"❌ Error: {e}", icon="❌"); logging.error(f"Update exception: {e}")
if cancelled: st.session_state.edit_mode = False; st.session_state.pop('selected_expense_id', None); st.session_state.pop('edit_form_category', None); st.experimental_rerun()

#PY --- Function to display the Delete Confirmation ---
def display_delete_confirmation(expense_data: Dict[str, Any]):
"""Displays the confirmation dialog for deleting an expense."""
#PY ... (Code inside this function is mostly okay, relies on db_utils logging) ...
st.subheader("Confirm Deletion")
st.warning(f"Permanently delete this expense?", icon="⚠️")
col_details1, col_details2 = st.columns(2)
with col_details1: st.markdown(f"**ID:** `{expense_data.get('id', 'N/A')[:8]}...`"); st.markdown(f"**Date:** {expense_data.get('date', 'N/A')}"); st.markdown(f"**Account:** {expense_data.get('account', 'N/A')}"); st.markdown(f"**User:** {expense_data.get('user', 'N/A')}")
with col_details2: st.markdown(f"**Category:** {expense_data.get('category', 'N/A')}"); st.markdown(f"**Sub-Category:** {expense_data.get('sub_category', 'N/A')}"); st[...]

#PY visuals.py
@path: tabs\visuals.py
@summary: The `visuals.py` file uses Streamlit to display a 2x2 grid of expense visualizations, including pie, bar, line, and treemap charts. It loads metadata from a JSON file, fetches expense data, and applies filters for user interaction. It includes error handling and logging for robustness.
@code:
#PY tabs/visuals.py
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import json
import datetime
from db_utils import fetch_all_expenses
from typing import Dict, Any, Optional, List
import logging #PY <<<--- ADD THIS IMPORT

@st.cache_data
def load_metadata() -> Optional[Dict[str, Any]]:
"""Loads metadata from the expense_metadata.json file."""
try:
with open("expense_metadata.json", "r") as f:
metadata = json.load(f)
logging.debug("Metadata loaded successfully for Visuals.")
return metadata
except FileNotFoundError:
st.error("Error: expense_metadata.json not found.")
logging.error("expense_metadata.json not found.")
return None
except json.JSONDecodeError:
st.error("Error: Could not decode expense_metadata.json.")
logging.error("Could not decode expense_metadata.json.")
return None

#PY --- Helper function for common Plotly layout args ---
def get_common_layout_args(chart_title: str) -> Dict[str, Any]:
"""Returns a dictionary of common Plotly layout arguments."""
#PY ... (function remains the same) ...
return {
"title_text": chart_title, "title_font_size": 16, "title_x": 0.5,
"margin": dict(l=10, r=10, t=40, b=20),
"legend": dict(orientation="h", yanchor="bottom", y=-0.2, xanchor="center", x=0.5),
"hovermode": "closest",
}


def render():
"""Renders the 'Visualizations' page with a 2x2 grid of charts."""
st.subheader("Expense Visualizations")

metadata = load_metadata()
if metadata is None:
return #PY Error already shown

#PY Fetch all data (uncached)
df_all = fetch_all_expenses() #PY This function now logs internally on error
if df_all.empty:
st.info("No expense data available for visualizations.")
return

#PY --- Data Preprocessing & Filter List Setup ---
try:
#PY Ensure date conversion doesn't fail silently
df_all['date'] = pd.to_datetime(df_all['date'], errors='raise') #PY Raise error if conversion fails
df_all['YearMonth'] = df_all['date'].dt.strftime('%Y-%m')
min_date_overall = df_all['date'].min().date()
max_date_overall = df_all['date'].max().date()
all_months = ["All"] + sorted(df_all['YearMonth'].unique(), reverse=True)
all_categories = ["All"] + sorted(list(metadata.get("categories", {}).keys()))
all_users = ["All"] + sorted(list(set(metadata.get("User", {}).values())))
all_accounts = ["All"] + metadata.get("Account", [])
treemap_parent_categories = sorted(list(metadata.get("categories", {}).keys()))
except Exception as e:
st.error(f"Error processing initial data: {e}")
logging.exception("Data preprocessing error in visuals.") #PY Log full traceback
return

#PY --- Create 2x2 Grid Layout ---
col1, col2 = st.columns(2)
col3, col4 = st.columns(2)

#PY Wrap each chart rendering in a try-except block for robustness
try:
#PY --- Chart 1: Pie Chart (Top-Left) ---
with col1:
st.markdown("####PY By Category (Proportion)")
with st.expander("Filters", expanded=False):
f_col1, f_col2 = st.columns(2)
with f_col1: pie_month = st.selectbox("Month", all_months, 0, key="pie_month_select"); pie_categories = st.multiselect("Category", all_categories, ["All"], key="pie_category_select")
with f_col2: pie_accounts = st.multiselect("Account", all_accounts, ["All"], key="pie_account_select"); pie_users = st.multiselect("User", all_users, ["All"], key="pie_user_select")
#PY Filter logic...
pie_df = df_all.copy();
if pie_month != "All": pie_df = pie_df[pie_df['YearMonth'] == pie_month]
if "All" not in pie_accounts: pie_df = pie_df[pie_df['account'].isin(pie_accounts)]
if "All" not in pie_categories: pie_df = pie_df[pie_df['category'].isin(pie_categories)]
if "All" not in pie_users: pie_df = pie_df[pie_df['user'].isin(pie_users)]
if pie_df.empty: st.info("No data: Pie", icon="ℹ️")
else:
pie_data = pie_df.groupby('category')['amount'].sum().reset_index(); pie_data = pie_data[pie_data['amount'] > 0]
if pie_data.empty: st.info("No positive data: Pie", icon="ℹ️")
else:
chart_title = f"Category Spend ({pie_month})"; fig1 = px.pie(pie_data, values='amount', names='category', hole=0.4)
fig1.update_traces(textposition='inside', textinfo='percent+label', hovertemplate="<b>%{label}</b><br>Amt: ₹%{value:,.0f}<br>(%{percent})<extra></extra>", insidetextorientation='radial')
layout_args = get_common_layout_args(chart_title); layout_args["showlegend"] = False; fig1.update_layout(**layout_args)
st.plotly_chart(fig1, use_container_width=True)
except Exception as e:
logging.exception("Error rendering Pie Chart.")
st.error("Error displaying Pie Chart.", icon="🔥")


try:
#PY --- Chart 2: Category Bar Chart (Top-Right) ---
with col2:
st.markdown("####PY By Category (Absolute)")
with st.expander("Filters", expanded=False):
f_col1, f_col2 = st.columns(2)
with f_col1: cat_bar_start_date = st.date_input("Start Date", min_date_overall, min_date_overall, max_date_overall, key="cat_bar_start_date"); cat_bar_accounts = st.multiselect("Account", all_accounts, ["All"], key="cat_bar_account_select")
with f_col2: cat_bar_end_date = st.date_input("End Date", max_date_overall, min_date_overall, max_date_overall, key="cat_bar_end_date"); cat_bar_users = st.multiselect("User", all_users, ["All"], key="cat_bar_user_select")
#PY Filter logic...
cat_bar_df = df_all.copy(); date_range_valid = cat_bar_start_date <= cat_bar_end_date
if date_range_valid:
cat_bar_df = cat_bar_df[(cat_bar_df['date'].dt.date >= cat_bar_start_date) & (cat_bar_df['date'].dt.date <= cat_bar_end_date)]
if "All" not in cat_bar_accounts: cat_bar_df = cat_bar_df[cat_bar_df['account'].isin(cat_bar_accounts)]
if "All" not in cat_bar_users: cat_bar_df = cat_bar_df[cat_bar_df['user'].isin(cat_bar_users)]
else: st.warning("Invalid date: Cat Bar", icon="⚠️"); cat_bar_df = pd.DataFrame()
if cat_bar_df.empty: st.info("No data: Cat Bar", icon="ℹ️")
else:
cat_bar_data = cat_bar_df.groupby('category')['amount'].sum().reset_index(); cat_bar_data = cat_bar_data[cat_bar_data['amount'] > 0].sort_values('amount', ascending=False)
if cat_bar_data.empty: st.info("No positive data: Cat Bar", icon="ℹ️")
else:
chart_title = f"Category Totals ({cat_bar_start_date.strftime('[...]

"""

File: instruction_file_tree.txt
Location: reference\instruction_file_tree.txt
Summary: The "app-personal-finance" project includes scripts for database creation and utilities, expense data management, and data generation. It features Python scripts for adding expenses, generating reports, and creating visuals. The project uses CSV files for sample data and includes configuration, styling, and testing files, along with reference documentation.
Code: """
app-personal-finance/
    .env
    .gitignore
    create_db.py
    db_utils.py
    dummy_expenses.csv
    dummy_expenses_generated.csv
    expenses.db
    expense_metadata.json
    main.py
    requirements-v2.0.txt
    requirements.txt
    sample_data_generation.csv
    styles.css
    style_utils.py
    test_openai.py
    data/
        expenses.csv
    reference/
        agentic_ds_app_prep.txt
        data_analysis.ipynb
        generate_code_details.py
        generate_data.py
        generate_tree.py
        git_workflow_guide.md
        instruction_advanced_question_types.txt
        instruction_code_details.txt
        instruction_folder_tree.txt
        requirement_v1_streamlit_app.txt
        requirement_v2_ds_assistant.txt
        test_llm_gemini.py
        img/
    tabs/
        add_expense.py
        reports.py
        visuals.py

"""

File: instruction_llm.txt
Location: reference\instruction_llm.txt
Summary: The file outlines the development of an autonomous, multi-agent data science assistant for a personal finance app. It references initial and current requirements, project structure, and code details. The goal is to enhance the app through code generation and brainstorming, with ongoing work detailed in the current requirement document.
Code: """
Uploading the necessary files and reference links for context, read and understand:

INSTRUCTION_LLM: Specific instructions for you to follow: instruction_llm.txt, *THIS FILE*
INITIAL_REQUIREMENT (PHASE 1: DONE): requirement_v1_streamlit_app.txt - PHASE 1: This is the INITIAL REQUIREMENT. FOR UNDERSTANDING INITIAL SCOPE ONLY. CURRENT IMPLEMENTATION HAS CHANGED. REFER TO CODEBASE FOR CURRENT STATE.
CURRENT_REQUIREMENT (PHASE 2: ONGOING): reference/requirement_v2_ds_assistant.txt - PHASE 2: This is the CURRENT REQUIREMENT.
PROJECT_STRUCTURE: reference/instruction_folder_tree.txt
PROJECT_CODE_FILE_CONTENT: reference/instruction_code_details_compressed.txt
SAMPLE_DATA: expenses_sample.csv
SAMPLE_METADATA: expense_metadata.json

REQUIREMENT: Help me build an autonomous, multi agent data science assistant for my personal finances app (Refer: CURRENT_REQUIREMENT) through code generation and brainstorming.

PUBLIC GIT REPO FOR PROJECT: https://github.com/AnirbanDattaTech/App-Personal-Finance.git

Ensure, for all future project steps, code generation and brainstorming:
✅ Code generation - ALWAYS first start with a detailed understanding of the current implemented code (PROJECT_CODE_FILE_CONTENT). Understanding the current implementation and ensuring the generated code is compatible with the current codebase is *CRITICAL*.
✅ Code generation - ALWAYS write code compatible with openai >1.0.0 ENSURE openai current version.
✅ Code generation - Always recommend whether using base python scripts/ml (sklearn etc)/dl (torch etc)/ gen ai (llms) / agentic ai (llm + langgraph etc) will be most efficient for a certain request. Don't automatically follow suggestions. Recommend alternate, more efficient and better options first.
✅ Code generation - Always generate full code block for the .py files
✅ Code generation - Always include detailed explanation of code with remarks / comments in the code file
✅ Code generation - Always include proper python structure and type hints
✅ Code generation - All libraries are installed, imports are correct, versions are latest and no  version conflicts.
✅ Code generation - Ensure all python generated images have proper chart titles, x and y axis names, graphs and charts
✅ Paths-	Always use relative paths correctly (Path(__file__).parent / "...")
✅ Variables-	No undefined variables or misused constants
✅ Imports-	Fully compatible with current langchain, langgraph, langgraph-cli, openai, pydantic versions 
✅ Data Validation-	use Pydantic whereever applicable
✅ Output-	Files are correctly created with headers, even if fallback is needed
✅ File paths-	All file paths and relative paths are correct based on project dir (PROJECT_STRUCTURE)
✅ Prompt files-	all prompt files are referrenced correctly in code
✅ Output dirs-	all dirs (inputs and outputs) are validated
✅ Model- gpt-4o or fallback gpt-3.5-turbo
✅ detailed step by step instructions (dsbsi from now).

FOR ME ----
I will use #context snapshot command in gpt plus to create a snapshot.
I can also do:
	#context snapshot assistant → only assistant design summary
	#context snapshot codebase → current code files in use
	#context snapshot ml → ML modeling or DSA-related setup
	#context snapshot todo → list of pending next steps
"""

File: requirement_v1_streamlit_app.txt
Location: reference\requirement_v1_streamlit_app.txt
Summary: The file outlines an initial requirement for a personal finance app intended for private use by a couple in Bangalore. It mentions using Python, SQLite3, and Streamlit for development. The app's primary goal is expense tracking, with a focus on categorizing expenses into investment, rent, travel, restaurant, and insurance premium categories.
Code: """
PHASE 1: This is the INITIAL REQUIREMENT. FOR UNDERSTANDING INITIAL SCOPE ONLY. CURRENT IMPLEMENTATION HAS CHANGED. REFER TO CODEBASE FOR CURRENT STATE.

PUBLIC GIT REPO LINK: https://github.com/AnirbanDattaTech/App-Personal-Finance.git

1. INITIAL PROMPT
my wife and i are building a personal finance app for just the 2 of us with you. We live in bangalore and use a lot of online platforms. we will build the app using python, sqlite3, streamlit and necessary python packages. It will be for jus the 2 of us to use. Main objective is to track expenses for both of us. So we are thinking to first create a expense category, expense sub-category and expense type.

categories = {
    "Investment": ["SIP", "Mutual Funds", "Stocks", "FD/RD"],
    "Rent": ["House Rent"],
    "Travel": ["Day Trip", "Vacation", "Commute", "Cab", "Train", "Flight", "Hotel/Stay", "Parking Fee"],
    "Restaurant": ["Dine-in", "Takeaway", "Food Delivery", "Snacks", "Cafe", "Drinks"],
    "Insurance Premium": ["Life Insurance", "ULIP", "Health Insurance", "Vehicle Insurance"],
    "Household": [
        "Electricity Bill", "Plumbing", "Electrical Repairs", "Appliance Repair", "Cleaning",
        "Pest Control", "Bike Maintenance", "Car Maintenance", 
        "Furniture", "Kitchen Tools", "Ironing", "Maid"
    ],
    "Connectivity": ["Airtel WiFi", "Jio Recharge", "Airtel Mobile", "Netflix", "Prime Video", "Disney+ Hotstar"],
    "Waste": ["Smoke", "Alcohol"],
    "Grocery": ["BigBasket", "Amazon", "Flipkart Grocery", "Zepto", "Local Store", "Other"],
    "Beauty": ["Nykaa", "Meesho", "Purplle", "Salon", "Makeup", "Skincare", "Salon"],
    "Shopping": ["Amazon", "Flipkart", "Meesho", "Nykaa", "Purple", "Lifestyle", "Max", "Myntra"],
    "Health": ["Doctor Visit", "Medicines", "Lab Test", "Health Checkup"],
    "Utilities": ["Electricity", "Water", "Gas Cylinder", "Maintenance", "Garbage Collection"],
    "Gifts & Donations": ["Family", "Friends", "Charity", "Temple"],
    "Entertainment": ["Movies", "Concerts", "Games"],
    "Education": ["Online Courses", "Books", "Workshops"]
}

-----
I have updated the categories and subcategories. Some additional information: there are only 2 users: 'Anirban' and 'Puspita'. Anirban has the following bank accouts: 'Anirban-SBI' and 'Anirban-ICICI'.  Puspita has the following bank accouts: 'Puspita-SBI' and 'Puspita-Bandhan'. I want to keep the app as simple as possible, so i am thinking of creating a database (sqlite3 / csv) with the following columns: 
'Date': Date of transaction, 
'Account': One of the 4 accounts for me and my wife mentioned above, 
'Category': from the categories dictionary mentioned above, 
'Sub-category': from the categories dictionary mentioned above, 
'Type': Free text, we need to be able to enter it in the steamlit frontend, 
'User': One of the 2 values: 'Anirban', "Puspita" 
'Amount': amount of transaction.

Additional Instructions:
"Currency Format: Just plain numbers, keep it simple!
Frequency of Transactions: minimum: 2(atleat 1 transaction per user), maximum: 20
Expense Bias: Should we simulate more transactions from a specific account or category (e.g., more grocery or restaurant spends)? - Grocery and household are the biggest ones, but they are less than rent. House rent: once a month, fixed, 30000 (Anirban-ICICI). Maid: once a month, fixed, 2500 (Puspita-SBI). I pay house rent, wife pays rent. Puspita uses Puspita-Bandhan only for Travel and beauty categories. For me, most of the daily expenses are from Anirban-ICICI, with some from Anirban-SBI.
Include recurring transactions? Like SIPs, rent, etc. on specific days?SIP: once a month, 3000, fixed. ULIP: once a month, 4000. fixed I pay both from Anirban-ICICI.
match the type to category and sub category. For example, if: Category - household, Subcategory - Ironing, then type has to be ironing. if the cat - Travel and subcat -train, the type has to be something like: bangalore-mysore vande bharat, type can't be 'lab test', In summary, the type has to make sense for category and subcategory. Also, Puspita uses her bandhan for travel and rarely something else. In travel also, she will mainly use it to book train / flight tickets, not pay  parking fees, I pay that. Please regenerate accordingly."


First, please create a metadata file that will help you understand the data so you can understand the app requirement and help me build it. Donwload it to local. Then, create a sample csv file with the above structure and fill it with dummy data from 1 January, 2025 to 15 april, 2025. Refer to the metadata for 'account', 'Category', 'Sub-category', 'User'. Use your imagination for 'type' and 'amount'. Remember, simulate realistic data based on prices in bangalore, india. amouts are to be in inr. There has to be multiple entries per day just like a real scenario. Ask any clarification questions you need because it is very important to get the sample data right for the app. remember today is 15 april, don't confuse current date with your training data. We need this sample data to start building the app.
---------------


I want to to build a personal finance and expense tracker app for me and my wife. The idea is to track monthly spending by entering expenses manually. I have created a metada with an explanation of the data and attributes that will be considered. I also have a sample csv file that has the data in the structure and format that i want. I will upload both for your reference. The data model for the app is as follows: the app should have a table (either in sqlite3 or in csv) with the following columns: 

'Date': Date of transaction, 
'Account': One of the 4 accounts for me and my wife mentioned in the metadata, 
'Category': from the categories dictionary mentioned in the metadata, 
'Sub-category': from the categories dictionary mentioned in the metadata, 
'Type': Free text, we need to be able to enter it in the steamlit frontend, 
'User': One of the 2 values: 'Anirban', "Puspita" 
'Amount': amount of transaction.

Write the code and help me build a streamlit app that can run on my local machine.
Requirement:
	A. Design Requirement:
		1. The app should have 3 main pages / tabs.
			1a. page / tab 1: 'Add Expenses': This tab will have 2 main parts:
				1a1. Add Expenses: Here we will have an input form with the following input fields: 1. Date - filled manually 2. Account - one of the predefined values from the dropdown according to the metadata 3. Category - one of the predefined values from the dropdown according to the metadata, 4. Sub-category - one of the predefined values from the dropdown according to the metadata 5. Type - free text to be entered 6. user - one of the predefined values from the dropdown according to the metadata, 7. Amount - expense amount, to be filled in manually.
				
				1a2. Show last ten expenses from either user (showing 5 rows at a time, scrollable table). It needs to be updated when a new expense is added from the section 1a1. Add Expenses above.
				
			1b. page / tab 2: 'Reports' - This tab will have 2 main parts:
				1b1. Here the entire history report should be visible (up to 10 rows or so at a time, scrollable). It should have the following filters: 1. *Month* - to be extracted from the main data table shown as a checkbox with multi selection with 'all' option for all months in history, 2. *Account* - one of the predefined values according to the metadata, shown as a checkbox with multi selection with 'All' option for all values in history 3. *Category* - one of the predefined values according to the metadata, shown as a checkbox with multi selection with 'All' option for all values in history, 4. *Sub-category*-  one of the predefined values according to the metadata, shown as a checkbox with multi selection with 'All' option for all values in history. 5. *User*: one of the predefined values according to the metadata, shown as a checkbox with multi selection with 'All' option for all values in history. 
				
				The selection boxes / menu for the 5 attributes: Month, Account, Category, Subcategory and User should come first, folling a field showing the *total expenses* for the selected values in the 5 attributes (Month, Account, Category, Subcategory and User), followed by a table (up to 10 rows or so at a time, scrollable). all filters should have 'All' value to select all available values in the filters.

			1c. Page / tab 3: 'Visualizations': this tab will have 2 main parts - 
				1c1. a pie chart for the total expenses based on 4 filters - 
					1.*Month* - to be extracted from the main data table shown as a checkbox,we need to be able to select only one month value or the 'All' value to select all months (only 1 selection from the checkbox - no multi select for this chart) 
					2.*Account* - one of the predefined values according to the metadata, shown as a checkbox with multi selection with 'All' option for all values in history 
					3.*Category* - one of the predefined values according to the metadata, shown as a checkbox with multi selection with 'All' option for all values in history.
					4.*User* - one of the predefined values according to the metadata, shown as a checkbox with multi selection with 'All' option for all values in history
					In this section, a pie chart of the total expenses across categories will be shown based on the selected values for the filters (Month, Account, Category, User)
					
				1c2. A line char showing the trend of the total expenses based on the filters selected: the x axis will have dates (day level) and y axis will have total expense (the sum of the 'amount' column in the data). x axis start data will be the first date in the data and last date will be the latest or most recent date in the data. The chart will be displayed based on the following filters:
					2.*Account* - one of the predefined values according to the metadata, shown as a checkbox with multi selection with 'All' option for all values in history 
					3.*Category* - one of the predefined values according to the metadata, shown as a checkbox with multi selection with 'All' option for all values in history.
					4.*User* - one of the predefined values according to the metadata, shown as a checkbox with multi selection with 'All' option for all values in history
					In this section, a lne chart of the total expenses across time (dates) will be shown based on the selected values for the filters (Month, Account, Category, User)
					
		2. All charts, reports and total expense values have to be refreshed when a new expense is added in 1a. page / tab 1: 'Add Expenses', or an expense is edited / deleted in 1b. page / tab 2: Reports.
		3. Make the pages nice looking and intuitive, with light yet attractive colours.
		4. Make the charts really nice with headers, axis names, legends etc. For the line chart make it a dotted line like '-o-o-o-'.
		5. Ensure the spacing and margins are nice so the graphs and charts are clearly visible.
		6. Is it possible to create a responsive UI in streamlit? if so, IMPORTANT: Prioritize responsive design. For the 1c. Page / tab 3: 'Visualizations' tab, show the graphs (pie chart and line chart mentioned in 1c.) side by side when in a wide screen, and column wise (Pie chart over the line chart) in a narrower (mobile) screen
		7. It is critical to ensure the data and fonts in the screen are legible, but they are not too big as that will be unattractive. Use a web-friendly font like segue or roboto for the frontend. (Font size around 12 should be fine, we need to experiment).
		8. CRITICAL IMPORTANCE: the options for editing / deleting an expense entry is not needed in this phase. Once an expense is added, no modification / deletion is needed. We will add this feature later.
			
	B. Data requirement: 
		1. We need to keep the app as simple as possible. We will use streamlit for the development, and python libraries for data visualization. The user needs to add expenses as mentioned in A.1.a, and edit / delete a selected expense as mentioned in A.1.b. So we can use sqlite3. Right now this app only needs to run in local system. But my wife and I need to access it from our mobiles throgh an url, so this small app needs to be deployed at a later phase using a free hosting like git. So when choosing csv vs sqlite3, keep the need to update databases and deployment scalability in mind.
		
		2. For now, use the uploaded csv file as a sample data to run the app and experiment with all features like add / delete expenses, chart generation etc.
		3. There is no need to store the charts anywhere at all unless they are absolutely necessary. If needed, give me simple way to periodically delete them and all unnecessary data. IMPORTANT: avoid chart saving if at all possible. Just show the charts.
		4. No need to store any history, snapshot etc, as long as we are able to see the reports, tables and charts,we are good. IMPORTANT: Store additional data only if they are absolutely necessary, else avoid, and use the main data file for all functions.
		5. As the user needs to manually enter date which needs to be stored in the database, and from there the month has to be extracted, ensure data validation to make sure there are no data type related issues anywhere. THey are very annoying.
		6. All 'amount' values will be in INR. Show INR in the frontend where appropriate (like column headers in reports but not inside cells).
		
	C. Development requirment:
		1. I will be using python in a conda environment which should already have most of the dependencies, but doesn't hurt to check ensure there are no version conflicts.
		2. I will use vscode in windows 10 with powershell as my default terminal, so don't suggest anything that is not compatible with windows powershell. If in doubt, try to take a pythonic approach.
		3. Keep the code simple and efficient, i am not a fan of huge and sprawling codebases. 
		4. Remember Phase 1: this phase, we will need to run it in our local machine, Phase 2: future phase: we will deploy the app and create a sharable link. So design and development of the app has to be with deployment in mind.
		5. Ensure there are no key errors when fetching the data and in the code by normalizing the column names to lower case and ensure the same variables are being used across the codebase.
		6. IMPORTANT: Remember, the subcategories are mapped to categories according to the metadata definition, sharing it specifically here for reference:
		
		categories = {
    "Investment": ["SIP", "Mutual Funds", "Stocks", "FD/RD"],
    "Rent": ["House Rent"],
    "Travel": ["Day Trip", "Vacation", "Commute", "Cab", "Train", "Flight", "Hotel/Stay", "Parking Fee"],
    "Restaurant": ["Dine-in", "Takeaway", "Food Delivery", "Snacks", "Cafe", "Drinks"],
    "Insurance Premium": ["Life Insurance", "ULIP", "Health Insurance", "Vehicle Insurance"],
    "Household": [
        "Electricity Bill", "Plumbing", "Electrical Repairs", "Appliance Repair", "Cleaning",
        "Pest Control", "Bike Maintenance", "Car Maintenance", 
        "Furniture", "Kitchen Tools", "Ironing", "Maid"
    ],
    "Connectivity": ["Airtel WiFi", "Jio Recharge", "Airtel Mobile", "Netflix", "Prime Video", "Disney+ Hotstar"],
    "Waste": ["Smoke", "Alcohol"],
    "Grocery": ["BigBasket", "Amazon", "Flipkart Grocery", "Zepto", "Local Store", "Other"],
    "Beauty": ["Nykaa", "Meesho", "Purplle", "Salon", "Makeup", "Skincare", "Salon"],
    "Shopping": ["Amazon", "Flipkart", "Meesho", "Nykaa", "Purple", "Lifestyle", "Max", "Myntra"],
    "Health": ["Doctor Visit", "Medicines", "Lab Test", "Health Checkup"],
    "Utilities": ["Electricity", "Water", "Gas Cylinder", "Maintenance", "Garbage Collection"],
    "Gifts & Donations": ["Family", "Friends", "Charity", "Temple"],
    "Entertainment": ["Movies", "Concerts", "Games"],
    "Education": ["Online Courses", "Books", "Workshops"]
}
	
Initially, all filters of all tabs should have the value 'All' selected whereever applicable. On selecting a category, only a selected set of subcategories based on the above mapping are to be shown in the dropdown / checkbox filters in all tabs whereever applicable.
		7. modularize the code, don't put everything in a huge main.py file to be run in streamlit.
		8. For sqlite3 db creation from csv, give python script with detailed explanation. Do I need to create the db by running a script (say create_db.py) or it will be automatically created when launching streamlit app? running my script makes sense as it is a one time activity, guide step by step with code accordingly.
FINAL INSTRUCTIONS:
	1.Read the above requirement carefully and go through the attched metada and sample data excel file.
	2. Tell me in detail what you understand. Clearly tell me where the requirement is ambiguous and you need to make assumptions. go ahead and make assumptions to run the code.  You need to have the necessary and sufficient information needed to complete the development.
	4. Suggest changes / additions to the requirements based on the following priority in descending order: 1. Error free 2. Simple 3. Prettier 4. Scalable (still with the same data model) for deployment (at phase 2, not now)
	5. Ensure that the code runs correctly
	6. Give me the code and detailed step by step guidance to create a streamlit app in my local conda environment based on above requirement.
			


I have shared with you the detailed requirement and instructions to build a streamlit app to manage my personal finances. Give me detailed step by step instructions along with clean, efficient, error free, modular codebase to implement the streamlit app. Whereever you need to make an assumption, go ahead with your judgement. Running the code successfully in local is the highest priority.

 2. CODE STRUCTURE TREE

app-personal-finance/
    combined_files.txt
    create_db.py
    create_file_data.py
    db_utils.py
    dummy_expenses.csv
    expenses.db
    expense_metadata.json
    folder_tree.txt
    generate_tree.py
    main.py
    requirements.txt
    styles.css
    style_utils.py
    reference/
        plotly_charts.py
        prompts.txt
    tabs/
        add_expense.py
        reports.py
        visuals.py

3. CODE FOR ALL .py FILES


# Contents of E:\Code\Projects\App-PersonalFinance\app-personal-finance\db_utils.py
# db_utils.py
import sqlite3
import pandas as pd
from uuid import uuid4

DB_NAME = "expenses.db"

def get_connection():
    return sqlite3.connect(DB_NAME, check_same_thread=False)

def fetch_all_expenses():
    conn = get_connection()
    df = pd.read_sql("SELECT * FROM expenses", conn)
    conn.close()
    df['date'] = pd.to_datetime(df['date'], errors='coerce')
    return df

def insert_expense(data):
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("""
    INSERT INTO expenses (id, date, account, category, sub_category, type, user, amount)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
""", (str(uuid4()), data['date'], data['account'], data['category'], data['sub_category'],
      data['type'], data['user'], data['amount']))
    conn.commit()
    conn.close()

def fetch_last_expenses(n=10):
    conn = get_connection()
    df = pd.read_sql(f"SELECT * FROM expenses ORDER BY date DESC LIMIT {n}", conn)
    conn.close()
    df['date'] = pd.to_datetime(df['date'], errors='coerce')
    return df

# Contents of E:\Code\Projects\App-PersonalFinance\app-personal-finance\main.py
# main.py
import streamlit as st
from tabs import add_expense, reports, visuals
from style_utils import load_css 

st.set_page_config(
    layout="wide", 
    page_title="Personal Expense Tracker", 
    page_icon="💰"
)

# Load CSS styles
load_css()

# Navigation in sidebar
st.sidebar.title("Navigation")
page = st.sidebar.radio(
    "Go to", 
    ["Add Expenses", "Reports", "Visualizations"],
    label_visibility="collapsed"  # Cleaner look
)

# Render selected page
if page == "Add Expenses":
    add_expense.render()
elif page == "Reports":
    reports.render()
elif page == "Visualizations":
    visuals.render()

# Contents of E:\Code\Projects\App-PersonalFinance\app-personal-finance\style_utils.py
# style_utils.py
import streamlit as st

def load_css(file_path: str = "styles.css"):
    with open(file_path, "r") as f:
        css = f.read()
        st.markdown(f"<style>{css}</style>", unsafe_allow_html=True)


# Contents of E:\Code\Projects\App-PersonalFinance\app-personal-finance\tabs\add_expense.py
# tabs/add_expense.py
import streamlit as st
import pandas as pd
from db_utils import insert_expense, fetch_last_expenses
import json

def load_metadata():
    with open("expense_metadata.json", "r") as f:
        return json.load(f)

def render():
    metadata = load_metadata()
    st.subheader("Add New Expense")

    # --------------------
    # Step 1: Select date before form (UX improvement)
    # --------------------
    date = st.date_input("Date of Expense", help="Format: YYYY-MM-DD")

    # --------------------
    # Step 2: Select category before form to drive sub-category
    # --------------------
    category = st.selectbox("Category", list(metadata["categories"].keys()))
    available_subcategories = metadata["categories"][category]

    # --------------------
    # Step 3: Expense form
    # --------------------
    with st.form("expense_form"):
        col1, col2 = st.columns(2)

        with col1:
            account = st.selectbox("Account", metadata["Account"])
            sub_category = st.selectbox("Sub-category", available_subcategories)

        with col2:
            type_ = st.text_input("Type (≤ 50 chars)", max_chars=50)
            user = metadata["User"][account]
            amount = st.number_input("Amount (INR)", min_value=0.0, format="%.2f")

        submitted = st.form_submit_button("Add Expense")
        if submitted:
            if not type_:
                st.warning("Please enter a valid 'Type' for the expense.")
            elif amount == 0.0:
                st.warning("Amount cannot be zero.")
            elif sub_category not in metadata["categories"][category]:
                st.error("Invalid sub-category for selected category.")
            else:
                insert_expense({
                    "date": date.strftime("%Y-%m-%d"),
                    "account": account,
                    "category": category,
                    "sub_category": sub_category,
                    "type": type_,
                    "user": user,
                    "amount": amount
                })
                st.success("✅ Expense added successfully!")

    # --------------------
    # Step 4: Show recent entries
    # --------------------
    st.markdown("---")
    st.subheader("Last 10 Expenses")
    df = fetch_last_expenses(10)
   
   # Rename columns
    display_df = df.drop(columns=["id"]).rename(columns={
        "date": "Date",
        "account": "Account",
        "category": "Category",
        "sub_category": "Sub Category",
        "type": "Type",
        "user": "User",
        "amount": "Amount"
    })

    st.dataframe(
        display_df.style.format({'Amount': '₹{:.2f}'}),
        use_container_width=True,
        height=240,
        hide_index=True
    )

# Contents of E:\Code\Projects\App-PersonalFinance\app-personal-finance\tabs\reports.py
import streamlit as st
import pandas as pd
from db_utils import fetch_all_expenses
import json

def load_metadata():
    with open("expense_metadata.json", "r") as f:
        return json.load(f)

def render():
    metadata = load_metadata()
    df = fetch_all_expenses()
    df['month'] = df['date'].dt.strftime('%Y-%m')

    st.subheader("Expense Report")

    with st.expander("Filter Options", expanded=True):
        col1, col2, col3 = st.columns(3)
        with col1:
            months = st.multiselect("Month", ["All"] + sorted(df['month'].unique()), default=["All"])
            accounts = st.multiselect("Account", ["All"] + metadata["Account"], default=["All"])
        with col2:
            categories = st.multiselect("Category", ["All"] + list(metadata["categories"].keys()), default=["All"])
            users = st.multiselect("User", ["All", "Anirban", "Puspita"], default=["All"])
        with col3:
            filtered_cats = categories if "All" not in categories else list(metadata["categories"].keys())
            sub_cats = sum([metadata["categories"][cat] for cat in filtered_cats], [])
            subcategories = st.selectbox("Sub-category", ["All"] + sorted(set(sub_cats)))

    # Apply filters
    if "All" not in months: df = df[df['month'].isin(months)]
    if "All" not in accounts: df = df[df['account'].isin(accounts)]
    if "All" not in categories: df = df[df['category'].isin(categories)]
    if subcategories != "All": df = df[df['sub_category'] == subcategories]
    if "All" not in users: df = df[df['user'].isin(users)]

    total = df['amount'].sum()
    st.markdown(f"### Total Expense: ₹{total:,.2f}")
    
    # Rename columns
    display_df = df.drop(columns=["id", "month"]).rename(columns={
        "date": "Date",
        "account": "Account",
        "category": "Category",
        "sub_category": "Sub Category",
        "type": "Type",
        "user": "User",
        "amount": "Amount"
    })

    st.dataframe(
        display_df.sort_values("Date", ascending=False).style.format({'Amount': '₹{:.2f}'}),
        use_container_width=True,
        height=400,
        hide_index=True
    )


# Contents of E:\Code\Projects\App-PersonalFinance\app-personal-finance\tabs\visuals.py
# tabs/visuals.py
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from db_utils import fetch_all_expenses
import json

def load_metadata():
    with open("expense_metadata.json", "r") as f:
        return json.load(f)

def render():
    metadata = load_metadata()
    df = fetch_all_expenses()
    df['month'] = df['date'].dt.strftime('%Y-%m')

    st.subheader("Visualizations")

    # ----- PIE CHART -----
    st.markdown("### Category-wise Expense Distribution (Pie Chart)")
    with st.expander("Pie Chart Filters", expanded=True):
        pie_month = st.selectbox(
            "Month", ["All"] + sorted(df['month'].unique()), 
            index=0, 
            key="pie_month_select"
        )
        accounts = st.multiselect(
            "Account", ["All"] + metadata["Account"], 
            default=["All"], 
            key="pie_account_select"
        )
        categories = st.multiselect(
            "Category", ["All"] + list(metadata["categories"].keys()), 
            default=["All"], 
            key="pie_category_select"
        )
        users = st.multiselect(
            "User", ["All", "Anirban", "Puspita"], 
            default=["All"], 
            key="pie_user_select"
        )

    # Filter data for pie chart
    pie_df = df.copy()
    if pie_month != "All": pie_df = pie_df[pie_df['month'] == pie_month]
    if "All" not in accounts: pie_df = pie_df[pie_df['account'].isin(accounts)]
    if "All" not in categories: pie_df = pie_df[pie_df['category'].isin(categories)]
    if "All" not in users: pie_df = pie_df[pie_df['user'].isin(users)]

    pie_data = pie_df.groupby('category')['amount'].sum().reset_index()
    fig1 = px.pie(pie_data, values='amount', names='category', title="Expenses by Category", hole=0.4)
    st.plotly_chart(fig1, use_container_width=True)

    # ----- LINE CHART -----
    st.markdown("### Daily Expense Trend (Line Chart)")
    with st.expander("Line Chart Filters", expanded=True):
        col1, col2 = st.columns(2)
        with col1:
            accounts_line = st.multiselect(
                "Account", ["All"] + metadata["Account"], 
                default=["All"], 
                key="line_account_select"
            )
            categories_line = st.multiselect(
                "Category", ["All"] + list(metadata["categories"].keys()), 
                default=["All"], 
                key="line_category_select"
            )
        with col2:
            users_line = st.multiselect(
                "User", ["All", "Anirban", "Puspita"], 
                default=["All"], 
                key="line_user_select"
            )
            chart_mode = st.radio(
                "Chart Mode",
                ["Daily", "Cumulative", "Both"],
                index=0,
                key="chart_mode_select"
            )

    # Filter data for line chart
    line_df = df.copy()
    if "All" not in accounts_line: line_df = line_df[line_df['account'].isin(accounts_line)]
    if "All" not in categories_line: line_df = line_df[line_df['category'].isin(categories_line)]
    if "All" not in users_line: line_df = line_df[line_df['user'].isin(users_line)]

    # Prepare data
    daily_data = line_df.groupby('date')['amount'].sum().reset_index().sort_values('date')
    cumulative_data = daily_data.copy()
    cumulative_data['cumulative_amount'] = cumulative_data['amount'].cumsum()

    # Create figure
    fig2 = go.Figure()
    
    if chart_mode in ["Daily", "Both"]:
        fig2.add_trace(go.Scatter(
            x=daily_data['date'],
            y=daily_data['amount'],
            name='Daily Expenses',
            mode='lines+markers',
            line=dict(color='#1f77b4', width=2)
        ))
    
    if chart_mode in ["Cumulative", "Both"]:
        fig2.add_trace(go.Scatter(
            x=cumulative_data['date'],
            y=cumulative_data['cumulative_amount'],
            name='Cumulative Expenses',
            mode='lines+markers',
            line=dict(color='#ff7f0e', width=2, dash='dot')
        ))
    
    fig2.update_layout(
        title='Expense Trends',
        xaxis_title='Date',
        yaxis_title='INR',
        legend_title='Metric',
        hovermode="x unified"
    )
    st.plotly_chart(fig2, use_container_width=True)



















































"""

File: requirement_v2_ds_assistant.txt
Location: reference\requirement_v2_ds_assistant.txt
Summary: The file outlines the development of a chatbot for querying data and providing insights, focusing on data science topics like EDA, probability, and predictive modeling. It will use an SQLite database and remember conversation history within a session, but not beyond. The project is hosted on GitHub.
Code: """
PHASE 2: This is the CURRENT REQUIREMENT.

PUBLIC GIT REPO LINK: https://github.com/AnirbanDattaTech/App-Personal-Finance.git

We will now start the development for a chatbot that can query the data and answer data insights, eda and data science related questions, to cover all areas a person might be interested in insight based on your understanding of the data, metadata and the project structure (what we are trying to do here). So we will keep all questions that require advanced statistical knowledge like probability and distributions, predictive modelling, and ML related questions (classification, regression, forecasting etc) in scope based on the data (expenses.db - sqlite3 file) and metadata.

Here 

REQUIREMENT-
1. DATA STRUCTURE AND HISTORY REQUIREMENT-
	1.1. The chatbot needs to remember the conversation history for a session for subsequent follow up questions, but no long term history needs to be saved. So each time the app is opened, a new conversation can be started where the context can be managed for the duraton of the session only.
	1.2. Currently the project has only 1 data file, the sqlite db table. Consider, based on the requirment, if any additional database needs to be created (such as the metadata) where additional chatbot related data to be stored. Modularize the codebase, creating a new folder for storing all the data files if needed, accordingly. Remember, modularity and simplicity are key requirments. The existing code may need to change to update the location references.
	1.3. I think a metada file with detailed description of all tables and all columns, including their data type, detailed description, unique values(where applicable), special constraints (like rent - once a month only, investment - once a month only) and other relevant information are required. If you agree, generate a metadata_detailed.json file with this info. Modularize the codebase, creating a new folder for storing all the metadata json files if needed, accordingly. Remember, modularity and simplicity are key requirments. The existing code may need to change to update the location references.
	
2. DESIGN REQUIREMENT-
	2.1. The chatbot needs to be in a fourth tab called 'Assistant' after visualization.
	2.2. In the assistant tab, there has to be 2 parts:
		2.2.1. CHAT WINDOW / SECTION - This is where my wife and i will interact with the chat bot through a chat window. there needs to be a simple pre-generated system messge: 'Greetings! What can I help you with?' Followed by a text box where i or my wife (not at the same time) can ask a simple question like 'what is my total spend for april?' and after the chatbot answers, ask 'ok, out of this how much did i spend on resturants?'. The conversation needs to be multiturn so state and session management is important for a single session. For toy example: AI: 'Greetings! What can I help you with?' HUMAN: 'Hey! What was my total spend on the month of march?' AI: 'Sure! Your total spend was inr 25,000.' HUMAN: 'Great! How much of that i spent on household?' AI: 'Out of total spend of inr 25000, you have spent inr 5000 on household.'
		
		2.2.2. VISUALIZATION WINDOW / SECTION - this is a section where, based on the question asked, the ai bot needs to show a relevant visualization. So for example in the previous example sequence: {AI: 'Greetings! What can I help you with?' HUMAN: 'Hey! What was my total spend on the month of march?' AI: 'Sure! Your total spend was inr 25,000.' HUMAN: 'Great! How much of that i spent on household?' AI: 'Out of total spend of inr 25000, you have spent inr 5000 on household.'} - the visualization can be a bar chart showing the spend across each category (because the human asked for the spend for a specific category) for the requested month (march in this example). 
	
3. DEVELOPMENT REQUIREMENT - 
	3.1. We will build a multi agent architecture using openai, langchain and langgraph and langsmith. I will upload the requirement file, pls ensure we have all the necessary dependencies to get started.
	3.2. CRITICAL: The key idea here is to explore autonomous agents and how they collaborate intelligently with a superagent to generate the answer and relevant visualization. If it is a deterministic workflow going from one node to next using prebuilt set of rules, there is no point in building complex agent frameworks. Explore how autonomous agents can be used to fulfill the requirement. Details on the agents follow:
	3.2. I think in the agent architecture, We need the following agents:
		3.2.1 SUPER AGENT (SA) - This is the super agent that interacts with the user and coordinates with the sub-agents.
			REQUIREMENTS - 
				3.2.1.1 Greet the user and get the user question
				3.2.1.2 Classify the question in one of 3 categories -  
					{1. CATEGORY 1: SIMPLE - Ex. 1. Question: "What was my total spend last month across categories?" Ex 2. Question: "Who spent more on household last february - me or my wife?" Ex 3. Question: "Who bought that Mixer grinder last week? (refer to spend category-spend subcategory-spend type (free text description), refer data model, schema and metadata)" - simple query, hand over to the DATA ANALYST sub agent for answer
					2. CATEGORY 2: ADVANCED (ML BASED) - 
						Ex 1. Question: "What is the forecasted total combined spending (Anirban + Puspita) across all categories for the next calendar month?" - needs advanced (ml based) logic - hand over to DATA SCIENTIST sub agent after getting the required data from DATA ANALYST agent. 
						Ex 2. Question: ""Estimate the Amount Anirban is likely to spend on a single 'Shopping' transaction at 'Amazon' or 'Flipkart', considering the platform (Sub-category), the month (for potential sales events), and the day of the week?" - needs advanced (ml based) logic - hand over to DATA SCIENTIST sub agent for answer.
						
					3. CATEGORY 3: NOT RELEVANT - Irrelevant for the context of the app (Ex. "How is the weather today?") or out of current scope of the application: (Ex. "what was my totay spend on 2015?" when the data is available only from 2024.) 
				
				A detailed prompt(s) with the best prompting techniques (few shot, CoT) needs to be developed for SUPER AGENT NODES in langgraph super agent graph.
				3.2.1.3 Ask clarification questions to correctly identify the question into one of the 3 question categories (simple / advanced (ml based) / not relevant) to trigger the correct agent workflow (SIMPLE > DAA + DVA, ADVANCED > DAA + DSA + DVA, DVA is not necessary for each question - for questions with extremely simple single outputs (EX: "My total spend last month") a single number is sufficient.)
				3.2.1.3 Coordinate with the 'DATA ANALYST' sub agent to get the response to the simple, data related questions in a tabular format
				3.2.1.4 Coordinate with the 'DATA SCIENTIST' sub agent to get the response to advanced, ml based questions (classified as one of the 5 predefined ml question types by the DATA SCIENTIST sub agent) in tabular format, along with model performance summary in a tabular format
				3.2.1.5 Coordinate with the 'DATA VISUALIZATION' agent to get the relevant graph /chart to the data related question - evaluate if chart response is needed for simple questions. If chart generation is not needed based on the DAA response, don't call the chart agent. For advanced (ml type) questions handled by the DSA, charts will always be needed, and DVA will always be called.
				3.2.1.6 Show the answer and relevant chart in the streamlit frontend
				3.2.1.7  Handle follow-up sequential questions based on previous questions
				3.2.1.8 Gently guide the user to ask a relevant question if the user asks an questions irrelevant to the solution such as 'What is the capital of Vietnam?' (handle non-relevant question, terminate after 2 tries)
				3.2.1.9 ADD ANY OTHER RELEVANT STEP HERE BASED ON YOUR UNDERSTANDING AND RECOMMENDATION
				
		3.2.2 DATA ANALYST SUB AGENT (DAA) - This sub-agent is in charge of getting the answer to the data-related user question. A detailed prompt(s) with the best prompting techniques (few shot, CoT) needs to be developed for this AGENT NODES. Do so.
			REQUIREMENTS - 
				3.2.2.1 Get the question from the SUPER AGENT or DATA SCIENTIST sub agent
				3.2.2.2 Extract entities from the question (Date,Account,Category,Sub-category,Type,User,Amount)
				3.2.2.3 Generate an sql query using langchain / sql tool etc - FLESH OUT THE DETAILS OF THIS STEP as to How exactly this will be handled
				3.2.2.4 Execute the sql on the expenses.db to get the required results
				3.2.1.5 ADD ANY OTHER RELEVANT STEP HERE BASED ON YOUR UNDERSTANDING AND RECOMMENDATION
				3.2.2.6 update the agentstate and Pass the result to the SUPER AGENT and/or the DATA SCIENTIST sub agent 
		
		3.2.3 DATA SCIENTIST SUB AGENT (DSA) - This sub-agent is in charge of answering the more advanced data science related questions. A detailed prompt(s) with the best prompting techniques (few shot, CoT) needs to be developed for this AGENT NODES. Do so.
			REQUIREMENTS - 
				3.2.3.1 Get the question from the SUPER AGENT
				
				3.2.3.2 Classify the advanced question into one of 5 predefined categories: Regression, Forecasting, Classification, Segmentation, Unsupervised Clustering. See below examples of each advanced question type:
					Ex 1. Question: "Can you predict my next week total spend? I have already paid rent, but investment ulip etc are pending (FORECASTING - based on weekly spend from expenses.db, consider fixed monthly payments like rent, investment. Predict future values (often numerical aggregates) of a variable that evolves sequentially over time. Focuses explicitly on the temporal dependencies – trend, seasonality, and autocorrelation (how past values influence future values) – inherent in the time series data itself. The primary input is the historical sequence.)" 
					Ex 2. Question: "Can you tell me the high expense uber rides in the last month? (CLASSIFICATION - classify category: Travel,  subcategory: Cab, spend type: Uber - into high spend and low spend - return high spend rides for last month. Assign an instance (e.g., a transaction, a day) to one of several predefined, discrete classes based on its features.We are predicting membership in known, predefined categories (like Essential/Discretionary). We are not defining the segments themselves (Segmentation) or discovering unknown groups (Clustering).)" 
					Ex 3. Question: "Estimate the Amount Anirban is likely to spend on a single 'Shopping' transaction at 'Amazon' or 'Flipkart', considering the platform (Sub-category), the month (for potential sales events), and the day of the week?" (REGRESSION - Predicts the value of one shopping instance. The platform (Amazon vs. Flipkart), time of year (sales), and whether it's a weekend might influence the basket size more directly than the amount spent on the previous online order. This models the characteristics-to-amount relationship for a specific event. Focuses on the relationship between features of a single instance and its numerical outcome, rather than predicting the next value in a sequence based primarily on past values and time patterns)
					Ex 4. Question: "Analyze the 'High-Frequency Spending' segment (transactions under ₹300). What are the dominant categories, sub-categories, and users within this segment? Does its total monthly value change significantly?" (SEGMENTATION - Divide data into meaningful, predefined groups based on rules or shared characteristics, and then analyze and compare these segments. We define a segment based on a rule (Amount < 300). The analysis then describes the composition (categories, users) and tracks the aggregate behavior (total value over time) of this specific, predefined segment.)
					Ex 5. Question: "Cluster our days based on the combination of total amount spent and the number of transactions that day. What kind of 'daily activity' clusters emerge (e.g., 'Low Spend/Low Activity', 'High Spend/Low Activity (single big purchase?)', 'Moderate Spend/High Activity (many small purchases?)')?" (UNSUPERVISED CLUSTERING - Allow an algorithm to automatically discover natural groupings (clusters) within the data based on similarity across features, without using predefined labels.We don't predefine what makes a 'type' of day. We feed features (total daily amount, total daily transaction count) into a clustering algorithm (like K-Means) and let it find groups of days that are mathematically similar based on these two dimensions. We then interpret the resulting clusters.)
					
				3.2.3.3 Frame a question in natural language along with specific mention of the columns, data slices and logic (JOIN, GROUP BY etc) and send it to the DAA to get the relevant data
				3.2.3.4 Get the SQL query execution results from the DAA
				3.2.3.5 Trigger a pre-defined ml workflow based on the advanced question classification: Regression, Forecasting, Classification, Segmentation, Unsupervised Clustering
				3.2.3.6 Generate model output for the required data mentioned in user question in a tabular format based on advanced question classification
				3.2.3.7 Generate model summary and other relevant information for the trained model based on the required data mentioned in user question in a tabular format, based on advanced question classification
				3.2.3.8 ADD ANY OTHER RELEVANT STEP HERE BASED ON YOUR UNDERSTANDING AND RECOMMENDATION
				3.2.3.9 update the agentstate and Pass the result to the SUPER AGENT
				
		3.2.5. DATA VISUALIZATION SUB AGENT (DVA) -  This sub-agent is responsible for creating a visualization in the 'Chart' section of the 'Assistant' tab in the streamlit UI based on the answer to the user queries generated by the DATA ANALYST SUB AGENT.A detailed prompt(s) with the best prompting techniques (few shot, CoT) needs to be developed for this AGENT NODES. Do so.
			REQUIREMENTS -
				3.2.5.1 Get the user query and the result of the sql query generated by the DATA ANALYST SUB AGENT.
				3.2.5.2 Select one of the predefined set of visualizations based on the natural language user query and the sql generated response. The categories are: {Vertical bar chart, Horizontal bar chart, Scatter plot, Histogram, Line chart, Bubble chart, Pie chart}. One of these chart types MUST be selected. No chart types other than these are to be selected.
				3.2.5.3 Get the x axis values, y axis values and other required values from the expenses.db and the sql generated response (basically get all the data required to generate the chart)
				3.2.5.4 Generate the chart with all the bells and whistles (heading, axis names, legend ticks etc) in the 'Chart' section of the 'Assistant' tab in the streamlit UI
				3.2.5.5 ADD ANY OTHER RELEVANT STEP HERE BASED ON YOUR UNDERSTANDING AND RECOMMENDATION
				3.2.5.6 update the agentstate and Pass the result to the SUPER AGENT
		
		3.2.6. The above multi-agent architecture is a recommendation. CRITICAL: use your judgement to come up with the multi-agent architecture based on this recommendations. *CRITICAL IMPORTANT*:
			3.2.6.1 Adhere to the business requirement: multi-turn conversation flow, chart generation for each question as appropriate, handling non-relevant or out of scope queries
			3.2.6.2 Implement autonomous agents using above as a references
			3.2.6.3 Refer to these specific online documents for multi-agent flow in Langgraph:
				- https://langchain-ai.github.io/langgraph/how-tos/multi-agent-multi-turn-convo/
				- https://github.com/langchain-ai/langgraph/tree/main/docs/docs/tutorials/multi_agent
	
	3.3. Only 1 user at a time, no need to worry about concurrent users.
	3.4. focus on modularity and simplicity of the entire codebase based on this new requirement.
	3.5 I want to learn the proper git development workflow with branches and everything, so pls include that in all your guidelines
	3.6 I want to use langsmith for tracing and looking at agent workflows, so include that accordingly
	3.5. carefully consider what impact it will have on the existing data/ code and modify accordingly. Existing functioalities and UI MUST remain as is.
	3.6 These are just *INDICATIVE* steps, understand the requirement and ask as many clarification questions as needed. I will also share with you the updated code content so you are upto speed.
	3.7 please carefully consider the requirment, focusing on error-free running, simlicity, robustness and scalability, and suggest changes to approach, additions, enhancements and recommedations.
	3.8 Finally, suggest a detailed step by step approach to implement the agentic ai chatbot according to requirement. No code necessary, just discuss the approach with me before development.
"""

File: test_llm_gemini.py
Location: reference\test_llm_gemini.py
Summary: The script tests LangGraph and Gemini for answering questions using a small expense data sample. It loads environment variables, reads CSV data with Pandas, sets up a LangGraph state and graph, and utilizes LangChain's ChatGoogleGenerativeAI model to generate responses. It demonstrates basic prompt engineering and error handling.
Code: """
# reference/test_llm_gemini.py
"""
Basic test script using LangGraph and Gemini to answer simple questions
based on a small sample (head) of the expense data.

Demonstrates:
- Loading environment variables (API key).
- Loading CSV data with Pandas.
- Setting up a simple LangGraph state and graph.
- Using LangChain's ChatGoogleGenerativeAI model.
- Passing data sample within the prompt (NOTE: Not scalable for large data).
"""

import pandas as pd
import os
import logging
from pathlib import Path
from dotenv import load_dotenv
from typing import Dict, TypedDict, Annotated
import operator

from langchain_google_genai import ChatGoogleGenerativeAI
from langgraph.graph import StateGraph, END
# from langgraph.checkpoint.sqlite import SqliteSaver # If you want to add memory later

# --- Configuration ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# --- Load Environment Variables (API Key) ---
# Load from .env file in the project root directory
SCRIPT_DIR = Path(__file__).parent
PROJECT_ROOT = SCRIPT_DIR.parent
ENV_PATH = PROJECT_ROOT / ".env"

if ENV_PATH.exists():
    load_dotenv(dotenv_path=ENV_PATH)
    logging.info(".env file loaded.")
else:
    logging.warning(f".env file not found at {ENV_PATH}. Make sure GOOGLE_API_KEY is set elsewhere if needed.")

# Check if API key is available
api_key = os.getenv("GOOGLE_API_KEY")
if not api_key:
    logging.error("GOOGLE_API_KEY not found in environment variables. Please set it in the .env file.")
    exit() # Stop execution if key is missing
else:
    logging.info("GOOGLE_API_KEY found.")


# --- Load Sample Data ---
DATA_FILE = PROJECT_ROOT / "dummy_expenses_generated.csv"
df = pd.DataFrame() # Initialize empty dataframe

try:
    if DATA_FILE.exists():
        df = pd.read_csv(DATA_FILE)
        # Keep only essential columns for the small prompt sample
        df_sample = df[['date', 'category', 'sub_category', 'user', 'amount']].head().to_markdown(index=False)
        logging.info(f"Loaded data sample from {DATA_FILE}")
        # print("\n--- Data Sample Sent to LLM ---")
        # print(df_sample)
        # print("-----------------------------\n")
    else:
        logging.error(f"Data file not found at {DATA_FILE}. Cannot proceed.")
        exit()
except Exception as e:
    logging.error(f"Error loading or processing data file {DATA_FILE}: {e}", exc_info=True)
    exit()


# --- Define LangGraph State ---
class SimpleAgentState(TypedDict):
    """Defines the state passed between nodes in the graph."""
    question: str # The user's question
    data_summary: str # A small summary/sample of the data
    llm_response: str # The final response from the LLM

# --- Define Graph Nodes ---

def get_user_question(state: SimpleAgentState) -> Dict:
    """Node to simply retrieve the question from the initial state."""
    logging.info("Node: get_user_question")
    question = state.get('question', '')
    if not question:
        logging.error("No question provided in initial state.")
        # Handle error appropriately, maybe raise exception or return error state
        return {"llm_response": "Error: No question was provided."}
    # In this simple example, we just pass it along implicitly
    # The 'data_summary' is also assumed to be in the initial state
    return {} # No state change needed here as question is already present

def call_gemini(state: SimpleAgentState) -> Dict:
    """Node to format the prompt and call the Gemini LLM."""
    logging.info("Node: call_gemini")
    question = state.get('question', '')
    data_summary = state.get('data_summary', '') # Get the data sample

    if not question:
        return {"llm_response": "Error: Question missing."}
    if not data_summary:
        logging.warning("Data summary is missing, LLM will have limited context.")

    # Initialize the Gemini LLM
    # Ensure API key is used automatically from environment by LangChain
    try:
        # Use gemini-1.5-flash for speed and cost-effectiveness in testing
        llm = ChatGoogleGenerativeAI(model="gemini-1.5-flash")
        logging.info(f"Initialized Gemini model: {llm.model}")
    except Exception as e:
        logging.error(f"Failed to initialize Gemini model: {e}", exc_info=True)
        return {"llm_response": f"Error: Could not initialize LLM - {e}"}

    # Simple Prompt Engineering: Combine question and data sample
    prompt = f"""
You are a helpful assistant analyzing personal expense data.
Answer the following question based *only* on the provided data summary.

Data Summary (First 5 Rows):
{data_summary}

Question: {question}

Answer:
"""
    logging.info("Sending prompt to Gemini...")
    # print(f"DEBUG Prompt:\n{prompt}") # Uncomment for debugging

    try:
        # Invoke the LLM
        response = llm.invoke(prompt)
        logging.info("Received response from Gemini.")
        # Extract the text content from the response object
        llm_response_content = response.content if hasattr(response, 'content') else str(response)
        return {"llm_response": llm_response_content}
    except Exception as e:
        logging.error(f"Error during LLM call: {e}", exc_info=True)
        return {"llm_response": f"Error: Failed to get response from LLM - {e}"}

# --- Define Graph ---
workflow = StateGraph(SimpleAgentState)

# Add nodes
workflow.add_node("fetch_question", get_user_question) # Simple node, might not be strictly necessary here
workflow.add_node("generate_answer", call_gemini)

# Define edges
workflow.set_entry_point("fetch_question")
workflow.add_edge("fetch_question", "generate_answer")
workflow.add_edge("generate_answer", END) # End after getting the answer

# Compile the graph
app = workflow.compile()
logging.info("LangGraph compiled.")

# --- Run the Test ---
if __name__ == "__main__":
    print("-" * 30)
    print("--- Basic LangGraph Gemini Test ---")
    print("-" * 30)

    # Example Question
    # test_question = "What is the total amount spent in the first few transactions shown?" # Tests reasoning on sample
    test_question = "List the categories present in the sample data." # Tests extraction from sample
    # test_question = "Who spent money in this sample?"

    print(f"Test Question: {test_question}")

    # Prepare the initial state for the graph
    initial_state: SimpleAgentState = {
        "question": test_question,
        "data_summary": df_sample, # Pass the pre-loaded data sample
        "llm_response": "" # Initialize response field
    }

    print("\nInvoking LangGraph...")

    # Run the graph
    # Stream events for more detailed output (optional)
    # for event in app.stream(initial_state):
    #     print(event)

    # Or just get the final state
    final_state = app.invoke(initial_state)

    print("\n--- Final LLM Response ---")
    print(final_state.get("llm_response", "No response generated."))
    print("-" * 30)
"""

File: add_expense.py
Location: tabs\add_expense.py
Summary: This Streamlit application manages expense tracking. It loads metadata from a JSON file, allows users to input new expenses, and displays the last 10 expenses. It includes form validation, highlights newly added entries, and handles errors with logging and user notifications.
Code: """
import streamlit as st
import pandas as pd
from db_utils import insert_expense, fetch_last_expenses
import json
import datetime
from typing import Dict, Any, Optional
import logging
import time

@st.cache_data
def load_metadata() -> Optional[Dict[str, Any]]:
    try:
        with open("expense_metadata.json", "r") as f:
            return json.load(f)
    except Exception as e:
        logging.error(f"Failed to load metadata: {e}")
        st.error("Could not load metadata.")
        return None

def render():
    # Step 1: Rerun logic (must go at the top)
    if "trigger_rerun" in st.session_state and time.time() > st.session_state["trigger_rerun"]:
        st.session_state.pop("trigger_rerun")
        st.rerun()

    st.subheader("Add New Expense")

    metadata = load_metadata()
    if metadata is None:
        return

    all_accounts = metadata.get("Account", [])
    all_categories = sorted(list(metadata.get("categories", {}).keys()))
    user_map = metadata.get("User", {})
    category_map = metadata.get("categories", {})

    if not all_accounts or not all_categories:
        st.error("Invalid metadata structure.")
        return

    expense_date = st.date_input("Date of Expense", value=datetime.date.today())

    selected_category = st.selectbox("Category", options=all_categories, index=0, key="add_category")
    available_subcategories = sorted(category_map.get(selected_category, []))

    with st.form("expense_form", clear_on_submit=True):
        col1, col2 = st.columns(2)
        with col1:
            selected_account = st.selectbox("Account", options=all_accounts, key="add_account")
            selected_sub_category = st.selectbox("Sub-category", options=available_subcategories, key="add_sub_category", disabled=not available_subcategories)
        with col2:
            expense_type = st.text_input("Type (Description)", max_chars=60, key="add_type")
            expense_user = user_map.get(selected_account, "Unknown")
            expense_amount = st.number_input("Amount (INR)", min_value=0.01, format="%.2f", step=10.0, key="add_amount")

        submitted = st.form_submit_button("Add Expense")

        if submitted:
            is_valid = True
            if not expense_type: st.toast("⚠️ Please enter a Type.", icon="⚠️"); is_valid = False
            if expense_amount <= 0: st.toast("⚠️ Enter valid amount.", icon="⚠️"); is_valid = False
            if available_subcategories and not selected_sub_category: st.toast("⚠️ Select a sub-category.", icon="⚠️"); is_valid = False

            if is_valid:
                final_sub_category = selected_sub_category if available_subcategories else ""
                dt = pd.to_datetime(expense_date)

                expense_data = {
                    "date": dt.strftime("%Y-%m-%d"),
                    "year": dt.year,
                    "month": dt.to_period("M").strftime("%Y-%m"),
                    "week": dt.strftime("%G-W%V"),
                    "day_of_week": dt.day_name(),
                    "account": selected_account,
                    "category": selected_category,
                    "sub_category": final_sub_category,
                    "type": expense_type,
                    "user": expense_user,
                    "amount": expense_amount
                }

                success = insert_expense(expense_data)
                if success:
                    st.toast("✅ Expense added!", icon="✅")
                    st.success("Entry saved.")
                    st.session_state["last_added"] = expense_data
                    st.session_state["highlight_time"] = time.time()
                    st.session_state["trigger_rerun"] = time.time() + 3  # rerun after table is visible
                else:
                    st.toast("❌ Failed to save to DB.", icon="❌")

    st.markdown("---")
    st.subheader("Last 10 Expenses Added")

    try:
        df = fetch_last_expenses(10)
        if df.empty:
            st.info("No recent expenses recorded yet.")
            return

        highlight_index = None
        last = st.session_state.get("last_added", None)
        t0 = st.session_state.get("highlight_time", None)

        if t0 and time.time() - t0 > 5:
            st.session_state.pop("last_added", None)
            st.session_state.pop("highlight_time", None)
        elif last is not None:
            match = df[
                (df["date"] == last["date"]) &
                (df["account"] == last["account"]) &
                (df["category"] == last["category"]) &
                (df["sub_category"] == last["sub_category"]) &
                (df["type"] == last["type"]) &
                (df["user"] == last["user"]) &
                (df["amount"] == float(last["amount"]))
            ]
            if not match.empty:
                highlight_index = match.index[0]

        display_df = df.drop(columns=["id", "year", "month", "week", "day_of_week"], errors="ignore").rename(columns={
            "date": "Date", "account": "Account", "category": "Category",
            "sub_category": "Sub Category", "type": "Type", "user": "User", "amount": "Amount"
        })

        def highlight(row):
            return ['background-color: #d1ffd6'] * len(row) if row.name == highlight_index else [''] * len(row)

        st.dataframe(
            display_df.style
                .format({"Date": "{:%Y-%m-%d}", "Amount": "₹{:.2f}"})
                .apply(highlight, axis=1),
            use_container_width=True, height=380, hide_index=True
        )

    except Exception as e:
        logging.exception("Failed to display table")
        st.error(f"Error loading recent expenses: {e}")

"""

File: reports.py
Location: tabs\reports.py
Summary: This Python file, `reports.py`, is a Streamlit application for managing and displaying expense reports. It imports necessary modules, including logging, and defines functions for loading metadata, converting DataFrames to CSV, and rendering the report view. It provides functionalities for editing and deleting expenses, with error handling and logging for debugging.
Code: """
# tabs/reports.py
import streamlit as st
import pandas as pd
from db_utils import fetch_all_expenses, fetch_expense_by_id, update_expense, delete_expense
import json
import datetime
from typing import Dict, Any, Optional, List
import logging # <<<--- ADD THIS IMPORT

@st.cache_data
def load_metadata() -> Optional[Dict[str, Any]]:
    """Loads metadata from the expense_metadata.json file."""
    try:
        with open("expense_metadata.json", "r") as f:
            metadata = json.load(f)
            logging.debug("Metadata loaded successfully for Reports.")
            return metadata
    except FileNotFoundError:
        st.error("Error: expense_metadata.json not found.")
        logging.error("expense_metadata.json not found.")
        return None
    except json.JSONDecodeError:
        st.error("Error: Could not decode expense_metadata.json.")
        logging.error("Could not decode expense_metadata.json.")
        return None

@st.cache_data
def convert_df_to_csv(df: pd.DataFrame) -> bytes:
    """Converts a DataFrame to CSV bytes."""
    try:
        return df.to_csv(index=False).encode('utf-8')
    except Exception as e:
        logging.error(f"Error converting DataFrame to CSV: {e}")
        return b""

# --- Function to display the Edit Form ---
def display_edit_form(expense_data: Dict[str, Any], metadata: Dict[str, Any]):
    """Displays the form for editing an existing expense."""
    # ... (Code inside this function is mostly okay, relies on db_utils logging) ...
    st.subheader(f"Edit Expense (ID: {expense_data.get('id', 'N/A')[:8]}...)")
    try: default_date = datetime.datetime.strptime(str(expense_data.get('date','')), '%Y-%m-%d').date()
    except: default_date = datetime.date.today()
    all_categories = sorted(list(metadata.get("categories", {}).keys()))
    all_accounts = metadata.get("Account", [])
    user_map = metadata.get("User", {})
    category_map = metadata.get("categories", {})
    default_category_index = 0
    if expense_data.get('category') in all_categories: default_category_index = all_categories.index(expense_data['category'])
    if 'edit_form_category' not in st.session_state: st.session_state.edit_form_category = all_categories[default_category_index] if all_categories else None
    def update_edit_category_state(): st.session_state.edit_form_category = st.session_state.edit_cat_widget
    selected_category = st.selectbox("Category", all_categories, index=default_category_index, key='edit_cat_widget', on_change=update_edit_category_state)
    current_category_in_state = st.session_state.edit_form_category
    available_subcategories = sorted(category_map.get(current_category_in_state, []))
    default_sub_cat_index = 0
    if expense_data.get('sub_category') in available_subcategories: default_sub_cat_index = available_subcategories.index(expense_data['sub_category'])
    default_account_index = 0
    if expense_data.get('account') in all_accounts: default_account_index = all_accounts.index(expense_data['account'])

    with st.form("edit_expense_form"):
        col1, col2 = st.columns(2)
        with col1:
            date_val = st.date_input("Date", value=default_date)
            account_val = st.selectbox("Account", all_accounts, index=default_account_index)
            sub_category_val = st.selectbox("Sub-category", available_subcategories, index=default_sub_cat_index, disabled=not available_subcategories)
        with col2:
            type_val = st.text_input("Type (Description)", value=expense_data.get('type',''), max_chars=60)
            user_val = user_map.get(account_val, "Unknown")
            st.text(f"User: {user_val}")
            amount_val = st.number_input("Amount (INR)", min_value=0.01, value=float(expense_data.get('amount', 0.01)), format="%.2f", step=10.0)
        submitted = st.form_submit_button("Save Changes")
        cancelled = st.form_submit_button("Cancel")
        if submitted:
            is_valid = True
            if not type_val: st.toast("⚠️ Type required.", icon="⚠️"); is_valid = False
            if amount_val <= 0.0: st.toast("⚠️ Amount must be positive.", icon="⚠️"); is_valid = False
            if available_subcategories and not sub_category_val: st.toast(f"⚠️ Sub-category required for {current_category_in_state}.", icon="⚠️"); is_valid = False
            elif sub_category_val and sub_category_val not in available_subcategories: st.toast(f"❌ Invalid sub-category '{sub_category_val}'.", icon="❌"); is_valid = False
            elif not available_subcategories and sub_category_val: st.toast(f"❌ No sub-categories exist for {current_category_in_state}.", icon="❌"); is_valid = False
            if is_valid:
                final_sub_category = sub_category_val if available_subcategories else ""
                updated_data = {"date": date_val.strftime("%Y-%m-%d"), "account": account_val, "category": current_category_in_state, "sub_category": final_sub_category, "type": type_val, "user": user_val, "amount": amount_val}
                try:
                    success = update_expense(st.session_state.selected_expense_id, updated_data)
                    if success:
                        st.toast("✅ Expense updated!", icon="✅")
                        st.session_state.edit_mode = False; st.session_state.pop('selected_expense_id', None); st.session_state.pop('edit_form_category', None); st.experimental_rerun()
                    else: st.toast("❌ Failed to update expense.", icon="❌") # db_utils logs specifics
                except Exception as e: st.toast(f"❌ Error: {e}", icon="❌"); logging.error(f"Update exception: {e}")
        if cancelled: st.session_state.edit_mode = False; st.session_state.pop('selected_expense_id', None); st.session_state.pop('edit_form_category', None); st.experimental_rerun()

# --- Function to display the Delete Confirmation ---
def display_delete_confirmation(expense_data: Dict[str, Any]):
    """Displays the confirmation dialog for deleting an expense."""
    # ... (Code inside this function is mostly okay, relies on db_utils logging) ...
    st.subheader("Confirm Deletion")
    st.warning(f"Permanently delete this expense?", icon="⚠️")
    col_details1, col_details2 = st.columns(2)
    with col_details1: st.markdown(f"**ID:** `{expense_data.get('id', 'N/A')[:8]}...`"); st.markdown(f"**Date:** {expense_data.get('date', 'N/A')}"); st.markdown(f"**Account:** {expense_data.get('account', 'N/A')}"); st.markdown(f"**User:** {expense_data.get('user', 'N/A')}")
    with col_details2: st.markdown(f"**Category:** {expense_data.get('category', 'N/A')}"); st.markdown(f"**Sub-Category:** {expense_data.get('sub_category', 'N/A')}"); st.markdown(f"**Type:** {expense_data.get('type', 'N/A')}"); st.markdown(f"**Amount:** ₹{float(expense_data.get('amount', 0)):.2f}")
    st.markdown("---")
    col_btn1, col_btn2, _ = st.columns([1, 1, 4])
    with col_btn1:
        if st.button("Yes, Delete", type="primary"):
            try:
                success = delete_expense(st.session_state.selected_expense_id)
                if success: st.toast("🗑️ Expense deleted!", icon="🗑️"); st.session_state.delete_confirm = False; st.session_state.pop('selected_expense_id', None); st.experimental_rerun()
                else: st.toast("❌ Failed to delete.", icon="❌") # db_utils logs specifics
            except Exception as e: st.toast(f"❌ Error: {e}", icon="❌"); logging.error(f"Delete exception: {e}")
    with col_btn2:
        if st.button("No, Cancel"): st.session_state.delete_confirm = False; st.session_state.pop('selected_expense_id', None); st.experimental_rerun()

# --- Main Render Function for Reports Tab ---
def render():
    """Renders the 'Reports' page, handling normal view, edit mode, and delete confirmation."""
    # ... (Initialize session state) ...
    st.session_state.setdefault('edit_mode', False)
    st.session_state.setdefault('delete_confirm', False)
    st.session_state.setdefault('selected_expense_id', None)

    metadata = load_metadata()
    if metadata is None:
        return # Error shown in load_metadata

    # --- Conditional Rendering ---
    if st.session_state.edit_mode:
        if st.session_state.selected_expense_id:
            expense_to_edit = fetch_expense_by_id(st.session_state.selected_expense_id) # db_utils logs error
            if expense_to_edit: display_edit_form(expense_to_edit, metadata)
            else: st.error("Failed to load expense for editing."); st.session_state.edit_mode = False; # Reset
        else: st.error("No expense selected for edit."); st.session_state.edit_mode = False; # Reset
        # Add Back button if needed
        if st.session_state.edit_mode and st.button("Back to Report View##Edit"):
             st.session_state.edit_mode = False; st.session_state.pop('selected_expense_id', None); st.session_state.pop('edit_form_category', None); st.experimental_rerun()

    elif st.session_state.delete_confirm:
        if st.session_state.selected_expense_id:
            expense_to_delete = fetch_expense_by_id(st.session_state.selected_expense_id) # db_utils logs error
            if expense_to_delete: display_delete_confirmation(expense_to_delete)
            else: st.error("Failed to load expense for deletion."); st.session_state.delete_confirm = False; # Reset
        else: st.error("No expense selected for deletion."); st.session_state.delete_confirm = False; # Reset
        # Add Back button if needed
        if st.session_state.delete_confirm and st.button("Back to Report View##Delete"):
             st.session_state.delete_confirm = False; st.session_state.pop('selected_expense_id', None); st.experimental_rerun()

    else:
        # Render the normal report view if not editing or deleting
        try:
            render_report_view(metadata)
        except Exception as e:
            st.error(f"An error occurred while rendering the report: {e}")
            logging.exception("Error rendering report view.") # Log full traceback


# --- Helper Function for Normal Report View ---
def render_report_view(metadata: Dict[str, Any]):
    """Renders the standard report view with filters, stats, table, and actions."""
    # ... (Code inside this function remains largely the same, relies on db_utils logging) ...
    st.subheader("Expense Report")
    df_all = fetch_all_expenses()
    if df_all.empty: st.info("No expense data."); return
    df_all['month'] = df_all['date'].dt.strftime('%Y-%m')
    all_accounts = metadata.get("Account", []); all_categories_map = metadata.get("categories", {}); all_categories_list = sorted(list(all_categories_map.keys())); all_users_list = sorted(list(set(metadata.get("User", {}).values())))

    with st.expander("Filter Options", expanded=True):
        col1, col2, col3 = st.columns(3)
        with col1: months = st.multiselect("Month", ["All"] + sorted(df_all['month'].unique(), reverse=True), default=["All"], key="report_months"); accounts = st.multiselect("Account", ["All"] + all_accounts, default=["All"], key="report_accounts")
        with col2: categories = st.multiselect("Category", ["All"] + all_categories_list, default=["All"], key="report_categories"); users = st.multiselect("User", ["All"] + all_users_list, default=["All"], key="report_users")
        with col3:
            if "All" in categories: sub_cats_options = sorted(list(set(sub for subs in all_categories_map.values() for sub in subs)))
            else: sub_cats_options = sorted(list(set(sub for cat in categories for sub in all_categories_map.get(cat, []))))
            subcategories = st.selectbox("Sub-category", ["All"] + sub_cats_options, key="report_subcat_select")

    df_filtered = df_all.copy()
    if "All" not in months: df_filtered = df_filtered[df_filtered['month'].isin(months)]
    if "All" not in accounts: df_filtered = df_filtered[df_filtered['account'].isin(accounts)]
    if "All" not in categories: df_filtered = df_filtered[df_filtered['category'].isin(categories)]
    if subcategories != "All": df_filtered = df_filtered[df_filtered['sub_category'] == subcategories]
    if "All" not in users: df_filtered = df_filtered[df_filtered['user'].isin(users)]

    total = df_filtered['amount'].sum()
    st.markdown(f"### Total Expense (Filtered): ₹{total:,.2f}")
    if not df_filtered.empty:
        st.markdown("---"); st.markdown("#### Summary Statistics (Filtered Data)")
        num_transactions = len(df_filtered); avg_transaction = df_filtered['amount'].mean()
        top_category_series = df_filtered.groupby('category')['amount'].sum().nlargest(1)
        top_category_display = "N/A"
        if not top_category_series.empty: top_category_name = top_category_series.index[0]; top_category_amount = top_category_series.iloc[0]; top_category_display = f"{top_category_name} (₹{top_category_amount:,.0f})"
        stat_col1, stat_col2, stat_col3 = st.columns(3)
        with stat_col1: st.metric(label="Transactions", value=f"{num_transactions:,}")
        with stat_col2: st.metric(label="Avg. Transaction", value=f"₹{avg_transaction:,.2f}")
        with stat_col3: st.metric(label="Top Category", value=top_category_display)
    st.markdown("---")

    display_df = pd.DataFrame()
    if not df_filtered.empty:
        display_df = df_filtered.drop(columns=["id", "month"], errors='ignore').rename(columns={"date": "Date", "account": "Account", "category": "Category","sub_category": "Sub Category", "type": "Type", "user": "User", "amount": "Amount"}).sort_values("Date", ascending=False)
        st.markdown("#### Detailed Transactions")
        st.dataframe(display_df.style.format({'Date': '{:%Y-%m-%d}', 'Amount': '₹{:.2f}'}), use_container_width=True, height=400, hide_index=True)
    else: st.info("No transactions match the current filters.")

    if not df_filtered.empty:
        st.markdown("---"); st.markdown("#### Edit / Delete Expense")
        options_limit = 500
        df_display_options = df_filtered.sort_values('date', ascending=False).head(options_limit).copy()
        df_display_options['display_str'] = df_display_options.apply(lambda row: f"{row['date'].strftime('%Y-%m-%d')} {row['account']} {row['category']} {row['sub_category'][:20]}.. ₹{row['amount']:.0f}", axis=1)
        options_dict = pd.Series(df_display_options.id.values, index=df_display_options.display_str).to_dict()
        options_dict = {"-- Select expense --": None, **options_dict}
        selected_option = st.selectbox("Select Expense to Modify", options=list(options_dict.keys()), key="expense_action_select")
        selected_id = options_dict.get(selected_option)
        col_action1, col_action2, _ = st.columns([1, 1, 4])
        edit_disabled = selected_id is None; delete_disabled = selected_id is None
        with col_action1:
            if st.button("Edit Selected", key="edit_btn", disabled=edit_disabled): st.session_state.selected_expense_id = selected_id; st.session_state.edit_mode = True; st.session_state.pop('edit_form_category', None); st.experimental_rerun()
        with col_action2:
             if st.button("Delete Selected", key="delete_btn", disabled=delete_disabled): st.session_state.selected_expense_id = selected_id; st.session_state.delete_confirm = True; st.experimental_rerun()

    if not display_df.empty:
        st.markdown("---")
        csv_data = convert_df_to_csv(display_df)
        st.download_button("Export Filtered Data to CSV", csv_data, 'filtered_expenses.csv', 'text/csv', help="Download the currently displayed report as CSV.")
"""

File: visuals.py
Location: tabs\visuals.py
Summary: The `visuals.py` file is a Streamlit application for visualizing expense data. It imports necessary libraries and defines functions to load metadata, configure Plotly layout, and render a page with a 2x2 grid of charts: a pie chart, category bar chart, line chart, and sub-category treemap. It includes error handling and logging.
Code: """
# tabs/visuals.py
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import json
import datetime
from db_utils import fetch_all_expenses
from typing import Dict, Any, Optional, List
import logging # <<<--- ADD THIS IMPORT

@st.cache_data
def load_metadata() -> Optional[Dict[str, Any]]:
    """Loads metadata from the expense_metadata.json file."""
    try:
        with open("expense_metadata.json", "r") as f:
            metadata = json.load(f)
            logging.debug("Metadata loaded successfully for Visuals.")
            return metadata
    except FileNotFoundError:
        st.error("Error: expense_metadata.json not found.")
        logging.error("expense_metadata.json not found.")
        return None
    except json.JSONDecodeError:
        st.error("Error: Could not decode expense_metadata.json.")
        logging.error("Could not decode expense_metadata.json.")
        return None

# --- Helper function for common Plotly layout args ---
def get_common_layout_args(chart_title: str) -> Dict[str, Any]:
    """Returns a dictionary of common Plotly layout arguments."""
    # ... (function remains the same) ...
    return {
        "title_text": chart_title, "title_font_size": 16, "title_x": 0.5,
        "margin": dict(l=10, r=10, t=40, b=20),
        "legend": dict(orientation="h", yanchor="bottom", y=-0.2, xanchor="center", x=0.5),
        "hovermode": "closest",
    }


def render():
    """Renders the 'Visualizations' page with a 2x2 grid of charts."""
    st.subheader("Expense Visualizations")

    metadata = load_metadata()
    if metadata is None:
        return # Error already shown

    # Fetch all data (uncached)
    df_all = fetch_all_expenses() # This function now logs internally on error
    if df_all.empty:
        st.info("No expense data available for visualizations.")
        return

    # --- Data Preprocessing & Filter List Setup ---
    try:
        # Ensure date conversion doesn't fail silently
        df_all['date'] = pd.to_datetime(df_all['date'], errors='raise') # Raise error if conversion fails
        df_all['YearMonth'] = df_all['date'].dt.strftime('%Y-%m')
        min_date_overall = df_all['date'].min().date()
        max_date_overall = df_all['date'].max().date()
        all_months = ["All"] + sorted(df_all['YearMonth'].unique(), reverse=True)
        all_categories = ["All"] + sorted(list(metadata.get("categories", {}).keys()))
        all_users = ["All"] + sorted(list(set(metadata.get("User", {}).values())))
        all_accounts = ["All"] + metadata.get("Account", [])
        treemap_parent_categories = sorted(list(metadata.get("categories", {}).keys()))
    except Exception as e:
        st.error(f"Error processing initial data: {e}")
        logging.exception("Data preprocessing error in visuals.") # Log full traceback
        return

    # --- Create 2x2 Grid Layout ---
    col1, col2 = st.columns(2)
    col3, col4 = st.columns(2)

    # Wrap each chart rendering in a try-except block for robustness
    try:
        # --- Chart 1: Pie Chart (Top-Left) ---
        with col1:
            st.markdown("#### By Category (Proportion)")
            with st.expander("Filters", expanded=False):
                f_col1, f_col2 = st.columns(2)
                with f_col1: pie_month = st.selectbox("Month", all_months, 0, key="pie_month_select"); pie_categories = st.multiselect("Category", all_categories, ["All"], key="pie_category_select")
                with f_col2: pie_accounts = st.multiselect("Account", all_accounts, ["All"], key="pie_account_select"); pie_users = st.multiselect("User", all_users, ["All"], key="pie_user_select")
            # Filter logic...
            pie_df = df_all.copy();
            if pie_month != "All": pie_df = pie_df[pie_df['YearMonth'] == pie_month]
            if "All" not in pie_accounts: pie_df = pie_df[pie_df['account'].isin(pie_accounts)]
            if "All" not in pie_categories: pie_df = pie_df[pie_df['category'].isin(pie_categories)]
            if "All" not in pie_users: pie_df = pie_df[pie_df['user'].isin(pie_users)]
            if pie_df.empty: st.info("No data: Pie", icon="ℹ️")
            else:
                pie_data = pie_df.groupby('category')['amount'].sum().reset_index(); pie_data = pie_data[pie_data['amount'] > 0]
                if pie_data.empty: st.info("No positive data: Pie", icon="ℹ️")
                else:
                    chart_title = f"Category Spend ({pie_month})"; fig1 = px.pie(pie_data, values='amount', names='category', hole=0.4)
                    fig1.update_traces(textposition='inside', textinfo='percent+label', hovertemplate="<b>%{label}</b><br>Amt: ₹%{value:,.0f}<br>(%{percent})<extra></extra>", insidetextorientation='radial')
                    layout_args = get_common_layout_args(chart_title); layout_args["showlegend"] = False; fig1.update_layout(**layout_args)
                    st.plotly_chart(fig1, use_container_width=True)
    except Exception as e:
        logging.exception("Error rendering Pie Chart.")
        st.error("Error displaying Pie Chart.", icon="🔥")


    try:
        # --- Chart 2: Category Bar Chart (Top-Right) ---
        with col2:
            st.markdown("#### By Category (Absolute)")
            with st.expander("Filters", expanded=False):
                 f_col1, f_col2 = st.columns(2)
                 with f_col1: cat_bar_start_date = st.date_input("Start Date", min_date_overall, min_date_overall, max_date_overall, key="cat_bar_start_date"); cat_bar_accounts = st.multiselect("Account", all_accounts, ["All"], key="cat_bar_account_select")
                 with f_col2: cat_bar_end_date = st.date_input("End Date", max_date_overall, min_date_overall, max_date_overall, key="cat_bar_end_date"); cat_bar_users = st.multiselect("User", all_users, ["All"], key="cat_bar_user_select")
            # Filter logic...
            cat_bar_df = df_all.copy(); date_range_valid = cat_bar_start_date <= cat_bar_end_date
            if date_range_valid:
                cat_bar_df = cat_bar_df[(cat_bar_df['date'].dt.date >= cat_bar_start_date) & (cat_bar_df['date'].dt.date <= cat_bar_end_date)]
                if "All" not in cat_bar_accounts: cat_bar_df = cat_bar_df[cat_bar_df['account'].isin(cat_bar_accounts)]
                if "All" not in cat_bar_users: cat_bar_df = cat_bar_df[cat_bar_df['user'].isin(cat_bar_users)]
            else: st.warning("Invalid date: Cat Bar", icon="⚠️"); cat_bar_df = pd.DataFrame()
            if cat_bar_df.empty: st.info("No data: Cat Bar", icon="ℹ️")
            else:
                cat_bar_data = cat_bar_df.groupby('category')['amount'].sum().reset_index(); cat_bar_data = cat_bar_data[cat_bar_data['amount'] > 0].sort_values('amount', ascending=False)
                if cat_bar_data.empty: st.info("No positive data: Cat Bar", icon="ℹ️")
                else:
                    chart_title = f"Category Totals ({cat_bar_start_date.strftime('%d%b')}-{cat_bar_end_date.strftime('%d%b%y')})"; fig2 = px.bar(cat_bar_data, x='category', y='amount', color='category')
                    fig2.update_traces(hovertemplate="<b>%{x}</b><br>Total: ₹%{y:,.0f}<extra></extra>")
                    layout_args = get_common_layout_args(chart_title); layout_args["showlegend"] = False; layout_args["xaxis_title"] = None; layout_args["yaxis_title"] = "Total (INR)"; layout_args["xaxis"] = dict(categoryorder='total descending', tickangle=-90); layout_args["margin"]["b"] = 80
                    fig2.update_layout(**layout_args)
                    st.plotly_chart(fig2, use_container_width=True)
    except Exception as e:
        logging.exception("Error rendering Category Bar Chart.")
        st.error("Error displaying Category Bar Chart.", icon="🔥")


    try:
        # --- Chart 3: Line Chart (Bottom-Left) ---
        with col3:
            st.markdown("#### Trend Over Time")
            with st.expander("Filters", expanded=False):
                f_col1, f_col2 = st.columns(2)
                with f_col1: line_start_date = st.date_input("Start Date", min_date_overall, min_date_overall, max_date_overall, key="line_start_date"); line_categories = st.multiselect("Category", all_categories, ["All"], key="line_category_select"); line_chart_mode = st.radio("View", ["Daily", "Cumulative"], 0, key="line_chart_mode_select", horizontal=True)
                with f_col2: line_end_date = st.date_input("End Date", max_date_overall, min_date_overall, max_date_overall, key="line_end_date"); line_accounts = st.multiselect("Account", all_accounts, ["All"], key="line_account_select"); line_users = st.multiselect("User", all_users, ["All"], key="line_user_select")
            # Filter logic...
            line_df_filtered = pd.DataFrame(); date_range_valid = line_start_date <= line_end_date
            if date_range_valid:
                line_df_filtered = df_all[(df_all['date'].dt.date >= line_start_date) & (df_all['date'].dt.date <= line_end_date)].copy()
                if "All" not in line_accounts: line_df_filtered = line_df_filtered[line_df_filtered['account'].isin(line_accounts)]
                if "All" not in line_categories: line_df_filtered = line_df_filtered[line_df_filtered['category'].isin(line_categories)]
                if "All" not in line_users: line_df_filtered = line_df_filtered[line_df_filtered['user'].isin(line_users)]
            else: st.error("Invalid date: Line Chart", icon="🚨");
            if line_df_filtered.empty:
                if date_range_valid: st.info("No data: Line Chart", icon="ℹ️")
            else:
                trend_data = line_df_filtered.groupby('date')['amount'].sum().reset_index().sort_values('date');
                if trend_data.empty: st.info("No spending: Line Chart", icon="ℹ️")
                else:
                    fig3 = go.Figure(); chart_title = f'{line_chart_mode} Trend ({line_start_date.strftime("%d%b")}-{line_end_date.strftime("%d%b%y")})'; yaxis_title = f'{line_chart_mode} Amount (INR)'
                    trace_args = {"x": trend_data['date'], "mode": 'lines+markers', "marker": dict(size=4)}
                    if line_chart_mode == "Daily": fig3.add_trace(go.Scatter(**trace_args, y=trend_data['amount'], name='Daily', line=dict(width=2), hovertemplate="<b>%{x|%d %b %Y}</b><br>Daily: ₹%{y:,.0f}<extra></extra>"))
                    elif line_chart_mode == "Cumulative": trend_data['cumulative_amount'] = trend_data['amount'].cumsum(); fig3.add_trace(go.Scatter(**trace_args, y=trend_data['cumulative_amount'], name='Cumulative', line=dict(width=2, dash='dot'), hovertemplate="<b>%{x|%d %b %Y}</b><br>Cumulative: ₹%{y:,.0f}<extra></extra>"))
                    layout_args = get_common_layout_args(chart_title); layout_args["yaxis_title"] = yaxis_title; layout_args["xaxis_title"] = None; layout_args["showlegend"] = False; layout_args["hovermode"] = "x unified"; layout_args["xaxis"] = dict(rangeslider=dict(visible=True), type="date")
                    fig3.update_layout(**layout_args)
                    st.plotly_chart(fig3, use_container_width=True)
    except Exception as e:
        logging.exception("Error rendering Line Chart.")
        st.error("Error displaying Line Chart.", icon="🔥")


    try:
        # --- Chart 4: Sub-category Treemap (Bottom-Right) ---
        with col4:
            st.markdown("#### Sub-Category Breakdown")
            with st.expander("Filters", expanded=False):
                default_parent_index = treemap_parent_categories.index("Grocery") if "Grocery" in treemap_parent_categories else 0
                treemap_parent_category = st.selectbox("Category to Break Down", treemap_parent_categories, index=default_parent_index, key="treemap_parent_select")
                st.markdown("---")
                f_col1, f_col2 = st.columns(2)
                with f_col1: treemap_start_date = st.date_input("Start Date", min_date_overall, min_date_overall, max_date_overall, key="treemap_start_date"); treemap_accounts = st.multiselect("Account", all_accounts, ["All"], key="treemap_account_select")
                with f_col2: treemap_end_date = st.date_input("End Date", max_date_overall, min_date_overall, max_date_overall, key="treemap_end_date"); treemap_users = st.multiselect("User", all_users, ["All"], key="treemap_user_select")
            # Filter logic...
            treemap_df = df_all.copy(); treemap_df = treemap_df[treemap_df['category'] == treemap_parent_category]
            date_range_valid = treemap_start_date <= treemap_end_date
            if date_range_valid:
                treemap_df = treemap_df[(treemap_df['date'].dt.date >= treemap_start_date) & (treemap_df['date'].dt.date <= treemap_end_date)]
                if "All" not in treemap_accounts: treemap_df = treemap_df[treemap_df['account'].isin(treemap_accounts)]
                if "All" not in treemap_users: treemap_df = treemap_df[treemap_df['user'].isin(treemap_users)]
            else: st.warning("Invalid date: Treemap", icon="⚠️"); treemap_df = pd.DataFrame()
            if treemap_df.empty: st.info(f"No '{treemap_parent_category}' data: Treemap", icon="ℹ️")
            else:
                treemap_data = treemap_df.groupby('sub_category')['amount'].sum().reset_index(); treemap_data = treemap_data[treemap_data['amount'] > 0]
                if treemap_data.empty: st.info(f"No positive spending: '{treemap_parent_category}' sub-cats.", icon="ℹ️")
                else:
                    chart_title = f"'{treemap_parent_category}' Breakdown ({treemap_start_date.strftime('%d%b')}-{treemap_end_date.strftime('%d%b%y')})"; fig4 = px.treemap(treemap_data, path=[px.Constant(treemap_parent_category), 'sub_category'], values='amount', color='sub_category', custom_data=['amount'])
                    fig4.update_traces(hovertemplate='<b>%{label}</b><br>Amt: ₹%{customdata[0]:,.0f}<br>% of Parent: %{percentParent:.1%}<extra></extra>', textinfo='label+value', insidetextfont=dict(size=12))
                    layout_args = get_common_layout_args(chart_title); layout_args["showlegend"] = False; fig4.update_layout(**layout_args)
                    st.plotly_chart(fig4, use_container_width=True)
    except Exception as e:
        logging.exception("Error rendering Treemap Chart.")
        st.error("Error displaying Treemap Chart.", icon="🔥")
"""

